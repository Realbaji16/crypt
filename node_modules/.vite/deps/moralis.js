import {
  require_bn,
  require_js,
  require_readable_browser,
  require_safe_buffer,
  require_sha,
  require_string_decoder
} from "./chunk-27XZJIL3.js";
import {
  require_elliptic,
  require_hash
} from "./chunk-XNX5Z5FP.js";
import {
  require_buffer
} from "./chunk-MZXFFUKN.js";
import {
  require_inherits_browser
} from "./chunk-X334B5A4.js";
import "./chunk-NPY75PGV.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/js-sha3/src/sha3.js
var require_sha3 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n, s) {
          return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key, message, outputBits, s) {
          return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n, s) {
          if (!n && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function(message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key, outputBits, s) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
        };
        method.update = function(key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s[i2] ^= blocks[i2];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes += this.encodeString(strs[i2]);
        }
        var paddingBytes = w - bytes % w;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s[i2] ^= blocks[i2];
        }
        f(s);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f(s);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s[i2];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s[i2];
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i2] = s[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s[i2];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/rlp/dist.browser/index.js
var require_dist = __commonJS({
  "node_modules/rlp/dist.browser/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLength = exports.decode = exports.encode = void 0;
    var bn_js_1 = __importDefault(require_bn());
    function encode5(input) {
      if (Array.isArray(input)) {
        var output = [];
        for (var i = 0; i < input.length; i++) {
          output.push(encode5(input[i]));
        }
        var buf = Buffer.concat(output);
        return Buffer.concat([encodeLength(buf.length, 192), buf]);
      } else {
        var inputBuf = toBuffer2(input);
        return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
      }
    }
    exports.encode = encode5;
    function safeParseInt(v, base) {
      if (v[0] === "0" && v[1] === "0") {
        throw new Error("invalid RLP: extra zeros");
      }
      return parseInt(v, base);
    }
    function encodeLength(len, offset) {
      if (len < 56) {
        return Buffer.from([len + offset]);
      } else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return Buffer.from(firstByte + hexLength, "hex");
      }
    }
    function decode2(input, stream) {
      if (stream === void 0) {
        stream = false;
      }
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer2(input);
      var decoded = _decode(inputBuffer);
      if (stream) {
        return decoded;
      }
      if (decoded.remainder.length !== 0) {
        throw new Error("invalid remainder");
      }
      return decoded.data;
    }
    exports.decode = decode2;
    function getLength(input) {
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer2(input);
      var firstByte = inputBuffer[0];
      if (firstByte <= 127) {
        return inputBuffer.length;
      } else if (firstByte <= 183) {
        return firstByte - 127;
      } else if (firstByte <= 191) {
        return firstByte - 182;
      } else if (firstByte <= 247) {
        return firstByte - 191;
      } else {
        var llength = firstByte - 246;
        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString("hex"), 16);
        return llength + length_1;
      }
    }
    exports.getLength = getLength;
    function _decode(input) {
      var length, llength, data, innerRemainder, d;
      var decoded = [];
      var firstByte = input[0];
      if (firstByte <= 127) {
        return {
          data: input.slice(0, 1),
          remainder: input.slice(1)
        };
      } else if (firstByte <= 183) {
        length = firstByte - 127;
        if (firstByte === 128) {
          data = Buffer.from([]);
        } else {
          data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 128) {
          throw new Error("invalid rlp encoding: byte must be less 0x80");
        }
        return {
          data,
          remainder: input.slice(length)
        };
      } else if (firstByte <= 191) {
        llength = firstByte - 182;
        if (input.length - 1 < llength) {
          throw new Error("invalid RLP: not enough bytes for string length");
        }
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        if (length <= 55) {
          throw new Error("invalid RLP: expected string length to be greater than 55");
        }
        data = input.slice(llength, length + llength);
        if (data.length < length) {
          throw new Error("invalid RLP: not enough bytes for string");
        }
        return {
          data,
          remainder: input.slice(length + llength)
        };
      } else if (firstByte <= 247) {
        length = firstByte - 191;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(length)
        };
      } else {
        llength = firstByte - 246;
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
          throw new Error("invalid rlp: total length is larger than the data");
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
          throw new Error("invalid rlp, List has a invalid length");
        }
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(totalLength)
        };
      }
    }
    function isHexPrefixed(str) {
      return str.slice(0, 2) === "0x";
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function intToHex(integer) {
      if (integer < 0) {
        throw new Error("Invalid integer as argument, must be unsigned!");
      }
      var hex = integer.toString(16);
      return hex.length % 2 ? "0" + hex : hex;
    }
    function padToEven(a) {
      return a.length % 2 ? "0" + a : a;
    }
    function intToBuffer(integer) {
      var hex = intToHex(integer);
      return Buffer.from(hex, "hex");
    }
    function toBuffer2(v) {
      if (!Buffer.isBuffer(v)) {
        if (typeof v === "string") {
          if (isHexPrefixed(v)) {
            return Buffer.from(padToEven(stripHexPrefix(v)), "hex");
          } else {
            return Buffer.from(v);
          }
        } else if (typeof v === "number" || typeof v === "bigint") {
          if (!v) {
            return Buffer.from([]);
          } else {
            return intToBuffer(v);
          }
        } else if (v === null || v === void 0) {
          return Buffer.from([]);
        } else if (v instanceof Uint8Array) {
          return Buffer.from(v);
        } else if (bn_js_1.default.isBN(v)) {
          return Buffer.from(v.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return v;
    }
  }
});

// node_modules/ethereumjs-util/dist.browser/externals.js
var require_externals = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/externals.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlp = exports.BN = void 0;
    var bn_js_1 = __importDefault(require_bn());
    exports.BN = bn_js_1.default;
    var rlp = __importStar(require_dist());
    exports.rlp = rlp;
  }
});

// node_modules/ethereumjs-util/dist.browser/constants.js
var require_constants = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
    var buffer_1 = require_buffer();
    var externals_1 = require_externals();
    exports.MAX_UINT64 = new externals_1.BN("ffffffffffffffff", 16);
    exports.MAX_INTEGER = new externals_1.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
    exports.TWO_POW256 = new externals_1.BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
    exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, "hex");
    exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
    exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, "hex");
  }
});

// browser-external:assert
var require_assert = __commonJS({
  "browser-external:assert"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "assert" has been externalized for browser compatibility. Cannot access "assert.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/secp256k1/lib/index.js
var require_lib = __commonJS({
  "node_modules/secp256k1/lib/index.js"(exports, module) {
    var errors = {
      IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
      TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
      TWEAK_MUL: "The tweak was out of range or equal to zero",
      CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
      SECKEY_INVALID: "Private Key is invalid",
      PUBKEY_PARSE: "Public Key could not be parsed",
      PUBKEY_SERIALIZE: "Public Key serialization error",
      PUBKEY_COMBINE: "The sum of the public keys is not valid",
      SIG_PARSE: "Signature could not be parsed",
      SIGN: "The nonce generation function failed, or the private key was invalid",
      RECOVER: "Public key could not be recover",
      ECDH: "Scalar was invalid (zero or overflow)"
    };
    function assert(cond, msg) {
      if (!cond) throw new Error(msg);
    }
    function isUint8Array(name, value, length) {
      assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
      if (length !== void 0) {
        if (Array.isArray(length)) {
          const numbers = length.join(", ");
          const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
          assert(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
          assert(value.length === length, msg);
        }
      }
    }
    function isCompressed(value) {
      assert(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
    }
    function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
      if (typeof output === "function") output = output(length);
      isUint8Array("output", output, length);
      return output;
    }
    function toTypeString(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    }
    module.exports = (secp256k1) => {
      return {
        contextRandomize(seed) {
          assert(
            seed === null || seed instanceof Uint8Array,
            "Expected seed to be an Uint8Array or null"
          );
          if (seed !== null) isUint8Array("seed", seed, 32);
          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
          }
        },
        privateKeyVerify(seckey) {
          isUint8Array("private key", seckey, 32);
          return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate(seckey) {
          isUint8Array("private key", seckey, 32);
          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        privateKeyTweakAdd(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        privateKeyTweakMul(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        publicKeyVerify(pubkey) {
          isUint8Array("public key", pubkey, [33, 65]);
          return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate(seckey, compressed = true, output) {
          isUint8Array("private key", seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SECKEY_INVALID);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyConvert(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyNegate(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyCombine(pubkeys, compressed = true, output) {
          assert(Array.isArray(pubkeys), "Expected public keys to be an Array");
          assert(pubkeys.length > 0, "Expected public keys array will have more than zero items");
          for (const pubkey of pubkeys) {
            isUint8Array("public key", pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_COMBINE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        signatureNormalize(sig) {
          isUint8Array("signature", sig, 64);
          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig;
            case 1:
              throw new Error(errors.SIG_PARSE);
          }
        },
        signatureExport(sig, output) {
          isUint8Array("signature", sig, 64);
          output = getAssertedOutput(output, 72);
          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen);
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        signatureImport(sig, output) {
          isUint8Array("signature", sig);
          output = getAssertedOutput(output, 64);
          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaSign(msg32, seckey, options = {}, output) {
          isUint8Array("message", msg32, 32);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0) isUint8Array("options.data", options.data);
          if (options.noncefn !== void 0) assert(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
          output = getAssertedOutput(output, 64);
          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj;
            case 1:
              throw new Error(errors.SIGN);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaVerify(sig, msg32, pubkey) {
          isUint8Array("signature", sig, 64);
          isUint8Array("message", msg32, 32);
          isUint8Array("public key", pubkey, [33, 65]);
          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true;
            case 3:
              return false;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_PARSE);
          }
        },
        ecdsaRecover(sig, recid, msg32, compressed = true, output) {
          isUint8Array("signature", sig, 64);
          assert(
            toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
            "Expected recovery id to be a Number within interval [0, 3]"
          );
          isUint8Array("message", msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.RECOVER);
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdh(pubkey, seckey, options = {}, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("private key", seckey, 32);
          assert(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0) isUint8Array("options.data", options.data);
          if (options.hashfn !== void 0) {
            assert(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
            if (options.xbuf !== void 0) isUint8Array("options.xbuf", options.xbuf, 32);
            if (options.ybuf !== void 0) isUint8Array("options.ybuf", options.ybuf, 32);
            isUint8Array("output", output);
          } else {
            output = getAssertedOutput(output, 32);
          }
          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.ECDH);
          }
        }
      };
    };
  }
});

// node_modules/secp256k1/lib/elliptic.js
var require_elliptic2 = __commonJS({
  "node_modules/secp256k1/lib/elliptic.js"(exports, module) {
    var EC = require_elliptic().ec;
    var ec = new EC("secp256k1");
    var ecparams = ec.curve;
    var BN3 = ecparams.n.constructor;
    function loadCompressedPublicKey(first, xbuf) {
      let x = new BN3(xbuf);
      if (x.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red);
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if (first === 3 !== y.isOdd()) y = y.redNeg();
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
      return ec.keyPair({ pub: { x, y } });
    }
    function loadUncompressedPublicKey(first, xbuf, ybuf) {
      let x = new BN3(xbuf);
      let y = new BN3(ybuf);
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);
      if ((first === 6 || first === 7) && y.isOdd() !== (first === 7)) return null;
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
      return ec.keyPair({ pub: { x, y } });
    }
    function loadPublicKey(pubkey) {
      const first = pubkey[0];
      switch (first) {
        case 2:
        case 3:
          if (pubkey.length !== 33) return null;
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 4:
        case 6:
        case 7:
          if (pubkey.length !== 65) return null;
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
          return null;
      }
    }
    function savePublicKey(output, point) {
      const pubkey = point.encode(null, output.length === 33);
      for (let i = 0; i < output.length; ++i) output[i] = pubkey[i];
    }
    module.exports = {
      contextRandomize() {
        return 0;
      },
      privateKeyVerify(seckey) {
        const bn = new BN3(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
      },
      privateKeyNegate(seckey) {
        const bn = new BN3(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
        seckey.set(negate);
        return 0;
      },
      privateKeyTweakAdd(seckey, tweak) {
        const bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0) return 1;
        bn.iadd(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
        if (bn.isZero()) return 1;
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      privateKeyTweakMul(seckey, tweak) {
        let bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        bn.imul(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      publicKeyVerify(pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
      },
      publicKeyCreate(output, seckey) {
        const bn = new BN3(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;
        const point = ec.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyConvert(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyNegate(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        point.y = point.y.redNeg();
        savePublicKey(output, point);
        return 0;
      },
      publicKeyCombine(output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null) return 1;
        }
        let point = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub);
        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakAdd(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0) return 2;
        const point = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2;
        savePublicKey(output, point);
        return 0;
      },
      publicKeyTweakMul(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
        const point = pair.getPublic().mul(tweak);
        savePublicKey(output, point);
        return 0;
      },
      signatureNormalize(sig) {
        const r2 = new BN3(sig.subarray(0, 32));
        const s = new BN3(sig.subarray(32, 64));
        if (r2.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;
        if (s.cmp(ec.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
        }
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport(obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN3(sigR).cmp(ecparams.n) >= 0) return 1;
        if (new BN3(sigS).cmp(ecparams.n) >= 0) return 1;
        const { output } = obj;
        let r2 = output.subarray(4, 4 + 33);
        r2[0] = 0;
        r2.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r2[posR] === 0 && !(r2[posR + 1] & 128); --lenR, ++posR) ;
        r2 = r2.subarray(posR);
        if (r2[0] & 128) return 1;
        if (lenR > 1 && r2[0] === 0 && !(r2[1] & 128)) return 1;
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS) ;
        s = s.subarray(posS);
        if (s[0] & 128) return 1;
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128)) return 1;
        obj.outputlen = 6 + lenR + lenS;
        output[0] = 48;
        output[1] = obj.outputlen - 2;
        output[2] = 2;
        output[3] = r2.length;
        output.set(r2, 4);
        output[4 + lenR] = 2;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport(output, sig) {
        if (sig.length < 8) return 1;
        if (sig.length > 72) return 1;
        if (sig[0] !== 48) return 1;
        if (sig[1] !== sig.length - 2) return 1;
        if (sig[2] !== 2) return 1;
        const lenR = sig[3];
        if (lenR === 0) return 1;
        if (5 + lenR >= sig.length) return 1;
        if (sig[4 + lenR] !== 2) return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1;
        if (6 + lenR + lenS !== sig.length) return 1;
        if (sig[4] & 128) return 1;
        if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128)) return 1;
        if (sig[lenR + 6] & 128) return 1;
        if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128)) return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error("S length is too long");
        let r2 = new BN3(sigR);
        if (r2.cmp(ecparams.n) >= 0) r2 = new BN3(0);
        let s = new BN3(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0) s = new BN3(0);
        output.set(r2.toArrayLike(Uint8Array, "be", 32), 0);
        output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
      },
      ecdsaSign(obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);
            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid) throw new Error("This is the way");
            return new BN3(nonce);
          };
        }
        const d = new BN3(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
        let sig;
        try {
          sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
      },
      ecdsaVerify(sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 2;
        const point = pair.getPublic();
        const isValid = ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3;
      },
      ecdsaRecover(output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
        if (sigr.isZero() || sigs.isZero()) return 2;
        let point;
        try {
          point = ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2;
        }
        savePublicKey(output, point);
        return 0;
      },
      ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null) return 1;
        const scalar = new BN3(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
        const point = pair.getPublic().mul(scalar);
        if (hashfn === void 0) {
          const data2 = point.encode(null, true);
          const sha2562 = ec.hash().update(data2).digest();
          for (let i = 0; i < 32; ++i) output[i] = sha2562[i];
        } else {
          if (!xbuf) xbuf = new Uint8Array(32);
          const x = point.getX().toArray("be", 32);
          for (let i = 0; i < 32; ++i) xbuf[i] = x[i];
          if (!ybuf) ybuf = new Uint8Array(32);
          const y = point.getY().toArray("be", 32);
          for (let i = 0; i < 32; ++i) ybuf[i] = y[i];
          const hash2 = hashfn(xbuf, ybuf, data);
          const isValid = hash2 instanceof Uint8Array && hash2.length === output.length;
          if (!isValid) return 2;
          output.set(hash2);
        }
        return 0;
      }
    };
  }
});

// node_modules/secp256k1/elliptic.js
var require_elliptic3 = __commonJS({
  "node_modules/secp256k1/elliptic.js"(exports, module) {
    module.exports = require_lib()(require_elliptic2());
  }
});

// node_modules/randombytes/browser.js
var require_browser = __commonJS({
  "node_modules/randombytes/browser.js"(exports, module) {
    "use strict";
    var MAX_BYTES = 65536;
    var MAX_UINT32 = 4294967295;
    function oldBrowser() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    }
    var Buffer3 = require_safe_buffer().Buffer;
    var crypto = global.crypto || global.msCrypto;
    if (crypto && crypto.getRandomValues) {
      module.exports = randomBytes;
    } else {
      module.exports = oldBrowser;
    }
    function randomBytes(size, cb) {
      if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
      var bytes = Buffer3.allocUnsafe(size);
      if (size > 0) {
        if (size > MAX_BYTES) {
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto.getRandomValues(bytes);
        }
      }
      if (typeof cb === "function") {
        return process.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/random.js
var require_random = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var randombytes = require_browser();
    function getRandomBytes(bytes) {
      return new Promise(function(resolve, reject) {
        randombytes(bytes, function(err, resp) {
          if (err) {
            reject(err);
            return;
          }
          resolve(resp);
        });
      });
    }
    exports.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
      return randombytes(bytes);
    }
    exports.getRandomBytesSync = getRandomBytesSync;
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/secp256k1.js"(exports) {
    "use strict";
    var __awaiter4 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator4 = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    function __export2(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var secp256k1_1 = require_elliptic3();
    var random_1 = require_random();
    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
      return __awaiter4(this, void 0, void 0, function() {
        var pk;
        return __generator4(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (false) return [3, 2];
              return [4, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
            case 1:
              pk = _a2.sent();
              if (secp256k1_1.privateKeyVerify(pk)) {
                return [2, pk];
              }
              return [3, 0];
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
      while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
          return pk;
        }
      }
    }
    exports.createPrivateKeySync = createPrivateKeySync;
    __export2(require_elliptic3());
  }
});

// node_modules/ethereumjs-util/dist.browser/internal.js
var require_internal = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/internal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
      }
      return str[0] === "0" && str[1] === "x";
    }
    exports.isHexPrefixed = isHexPrefixed;
    var stripHexPrefix = function(str) {
      if (typeof str !== "string")
        throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
    exports.stripHexPrefix = stripHexPrefix;
    function padToEven(value) {
      var a = value;
      if (typeof a !== "string") {
        throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
      }
      if (a.length % 2)
        a = "0".concat(a);
      return a;
    }
    exports.padToEven = padToEven;
    function getBinarySize(str) {
      if (typeof str !== "string") {
        throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
      }
      return Buffer.byteLength(str, "utf8");
    }
    exports.getBinarySize = getBinarySize;
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
      }
      if (Array.isArray(subset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
      }
      return subset[some ? "some" : "every"](function(value) {
        return superset.indexOf(value) >= 0;
      });
    }
    exports.arrayContainsArray = arrayContainsArray;
    function toAscii(hex) {
      var str = "";
      var i = 0;
      var l = hex.length;
      if (hex.substring(0, 2) === "0x")
        i = 2;
      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    }
    exports.toAscii = toAscii;
    function fromUtf8(stringValue) {
      var str = Buffer.from(stringValue, "utf8");
      return "0x".concat(padToEven(str.toString("hex")).replace(/^0+|0+$/g, ""));
    }
    exports.fromUtf8 = fromUtf8;
    function fromAscii(stringValue) {
      var hex = "";
      for (var i = 0; i < stringValue.length; i++) {
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0".concat(n) : n;
      }
      return "0x".concat(hex);
    }
    exports.fromAscii = fromAscii;
    function getKeys(params, key, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
      }
      if (typeof key !== "string") {
        throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
      }
      var result = [];
      for (var i = 0; i < params.length; i++) {
        var value = params[i][key];
        if (allowEmpty && !value) {
          value = "";
        } else if (typeof value !== "string") {
          throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
        }
        result.push(value);
      }
      return result;
    }
    exports.getKeys = getKeys;
    function isHexString2(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
      if (length && value.length !== 2 + 2 * length)
        return false;
      return true;
    }
    exports.isHexString = isHexString2;
  }
});

// node_modules/ethereumjs-util/dist.browser/helpers.js
var require_helpers = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
    var internal_1 = require_internal();
    var assertIsHexString = function(input) {
      if (!(0, internal_1.isHexString)(input)) {
        var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsHexString = assertIsHexString;
    var assertIsBuffer = function(input) {
      if (!Buffer.isBuffer(input)) {
        var msg = "This method only supports Buffer but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsBuffer = assertIsBuffer;
    var assertIsArray = function(input) {
      if (!Array.isArray(input)) {
        var msg = "This method only supports number arrays but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsArray = assertIsArray;
    var assertIsString = function(input) {
      if (typeof input !== "string") {
        var msg = "This method only supports strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsString = assertIsString;
  }
});

// node_modules/ethereumjs-util/dist.browser/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/bytes.js"(exports) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r2, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done) ar.push(r2.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r2 && !r2.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var helpers_1 = require_helpers();
    var intToHex = function(i) {
      if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error("Received an invalid integer type: ".concat(i));
      }
      return "0x".concat(i.toString(16));
    };
    exports.intToHex = intToHex;
    var intToBuffer = function(i) {
      var hex = (0, exports.intToHex)(i);
      return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), "hex");
    };
    exports.intToBuffer = intToBuffer;
    var zeros2 = function(bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
    };
    exports.zeros = zeros2;
    var setLength = function(msg, length, right) {
      var buf = (0, exports.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    var setLengthLeft = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports.setLengthLeft = setLengthLeft;
    var setLengthRight = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports.setLengthRight = setLengthRight;
    var stripZeros2 = function(a) {
      var first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    var unpadBuffer = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return stripZeros2(a);
    };
    exports.unpadBuffer = unpadBuffer;
    var unpadArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return stripZeros2(a);
    };
    exports.unpadArray = unpadArray;
    var unpadHexString = function(a) {
      (0, helpers_1.assertIsHexString)(a);
      a = (0, internal_1.stripHexPrefix)(a);
      return stripZeros2(a);
    };
    exports.unpadHexString = unpadHexString;
    var toBuffer2 = function(v) {
      if (v === null || v === void 0) {
        return Buffer.allocUnsafe(0);
      }
      if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_1.isHexString)(v)) {
          throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
        }
        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports.intToBuffer)(v);
      }
      if (externals_1.BN.isBN(v)) {
        if (v.isNeg()) {
          throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
        }
        return v.toArrayLike(Buffer);
      }
      if (v.toArray) {
        return Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports.toBuffer = toBuffer2;
    var bufferToInt = function(buf) {
      return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
    };
    exports.bufferToInt = bufferToInt;
    var bufferToHex2 = function(buf) {
      buf = (0, exports.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports.bufferToHex = bufferToHex2;
    var fromSigned = function(num) {
      return new externals_1.BN(num).fromTwos(256);
    };
    exports.fromSigned = fromSigned;
    var toUnsigned = function(num) {
      return Buffer.from(num.toTwos(256).toArray());
    };
    exports.toUnsigned = toUnsigned;
    var addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_1.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports.addHexPrefix = addHexPrefix;
    var toUtf8 = function(hex) {
      var zerosRegexp = /^(00)+|(00)+$/g;
      hex = (0, internal_1.stripHexPrefix)(hex);
      if (hex.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      var bufferVal = Buffer.from(hex.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports.toUtf8 = toUtf8;
    var baToJSON = function(ba) {
      if (Buffer.isBuffer(ba)) {
        return "0x".concat(ba.toString("hex"));
      } else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
          array.push((0, exports.baToJSON)(ba[i]));
        }
        return array;
      }
    };
    exports.baToJSON = baToJSON;
    var validateNoLeadingZeroes = function(values) {
      var e_1, _a2;
      try {
        for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
          if (v !== void 0 && v.length > 0 && v[0] === 0) {
            throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString("hex")));
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return Buffer.from(arr);
      }
      return arr.map(function(a) {
        return arrToBufArr(a);
      });
    }
    exports.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
      }
      return arr.map(function(a) {
        return bufArrToArr(a);
      });
    }
    exports.bufArrToArr = bufArrToArr;
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/hash-utils.js
var require_hash_utils = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/hash-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
      return function(msg) {
        var hash2 = hashConstructor();
        hash2.update(msg);
        return Buffer.from(hash2.digest());
      };
    }
    exports.createHashFunction = createHashFunction;
  }
});

// node_modules/ethereumjs-util/node_modules/ethereum-cryptography/keccak.js
var require_keccak = __commonJS({
  "node_modules/ethereumjs-util/node_modules/ethereum-cryptography/keccak.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hash_utils_1 = require_hash_utils();
    var createKeccakHash = require_js();
    exports.keccak224 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak224");
    });
    exports.keccak256 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak256");
    });
    exports.keccak384 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak384");
    });
    exports.keccak512 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak512");
    });
  }
});

// node_modules/hash-base/index.js
var require_hash_base = __commonJS({
  "node_modules/hash-base/index.js"(exports, module) {
    "use strict";
    var Buffer3 = require_safe_buffer().Buffer;
    var Transform = require_readable_browser().Transform;
    var inherits2 = require_inherits_browser();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer3.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer3.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits2(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized) throw new Error("Digest already called");
      if (!Buffer3.isBuffer(data)) data = Buffer3.from(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized) throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0) digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i) this._length[i] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module.exports = HashBase;
  }
});

// node_modules/md5.js/index.js
var require_md5 = __commonJS({
  "node_modules/md5.js/index.js"(exports, module) {
    "use strict";
    var inherits2 = require_inherits_browser();
    var HashBase = require_hash_base();
    var Buffer3 = require_safe_buffer().Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
    }
    inherits2(MD5, HashBase);
    MD5.prototype._update = function() {
      var M = ARRAY16;
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 3614090360, 7);
      d = fnF(d, a, b, c, M[1], 3905402710, 12);
      c = fnF(c, d, a, b, M[2], 606105819, 17);
      b = fnF(b, c, d, a, M[3], 3250441966, 22);
      a = fnF(a, b, c, d, M[4], 4118548399, 7);
      d = fnF(d, a, b, c, M[5], 1200080426, 12);
      c = fnF(c, d, a, b, M[6], 2821735955, 17);
      b = fnF(b, c, d, a, M[7], 4249261313, 22);
      a = fnF(a, b, c, d, M[8], 1770035416, 7);
      d = fnF(d, a, b, c, M[9], 2336552879, 12);
      c = fnF(c, d, a, b, M[10], 4294925233, 17);
      b = fnF(b, c, d, a, M[11], 2304563134, 22);
      a = fnF(a, b, c, d, M[12], 1804603682, 7);
      d = fnF(d, a, b, c, M[13], 4254626195, 12);
      c = fnF(c, d, a, b, M[14], 2792965006, 17);
      b = fnF(b, c, d, a, M[15], 1236535329, 22);
      a = fnG(a, b, c, d, M[1], 4129170786, 5);
      d = fnG(d, a, b, c, M[6], 3225465664, 9);
      c = fnG(c, d, a, b, M[11], 643717713, 14);
      b = fnG(b, c, d, a, M[0], 3921069994, 20);
      a = fnG(a, b, c, d, M[5], 3593408605, 5);
      d = fnG(d, a, b, c, M[10], 38016083, 9);
      c = fnG(c, d, a, b, M[15], 3634488961, 14);
      b = fnG(b, c, d, a, M[4], 3889429448, 20);
      a = fnG(a, b, c, d, M[9], 568446438, 5);
      d = fnG(d, a, b, c, M[14], 3275163606, 9);
      c = fnG(c, d, a, b, M[3], 4107603335, 14);
      b = fnG(b, c, d, a, M[8], 1163531501, 20);
      a = fnG(a, b, c, d, M[13], 2850285829, 5);
      d = fnG(d, a, b, c, M[2], 4243563512, 9);
      c = fnG(c, d, a, b, M[7], 1735328473, 14);
      b = fnG(b, c, d, a, M[12], 2368359562, 20);
      a = fnH(a, b, c, d, M[5], 4294588738, 4);
      d = fnH(d, a, b, c, M[8], 2272392833, 11);
      c = fnH(c, d, a, b, M[11], 1839030562, 16);
      b = fnH(b, c, d, a, M[14], 4259657740, 23);
      a = fnH(a, b, c, d, M[1], 2763975236, 4);
      d = fnH(d, a, b, c, M[4], 1272893353, 11);
      c = fnH(c, d, a, b, M[7], 4139469664, 16);
      b = fnH(b, c, d, a, M[10], 3200236656, 23);
      a = fnH(a, b, c, d, M[13], 681279174, 4);
      d = fnH(d, a, b, c, M[0], 3936430074, 11);
      c = fnH(c, d, a, b, M[3], 3572445317, 16);
      b = fnH(b, c, d, a, M[6], 76029189, 23);
      a = fnH(a, b, c, d, M[9], 3654602809, 4);
      d = fnH(d, a, b, c, M[12], 3873151461, 11);
      c = fnH(c, d, a, b, M[15], 530742520, 16);
      b = fnH(b, c, d, a, M[2], 3299628645, 23);
      a = fnI(a, b, c, d, M[0], 4096336452, 6);
      d = fnI(d, a, b, c, M[7], 1126891415, 10);
      c = fnI(c, d, a, b, M[14], 2878612391, 15);
      b = fnI(b, c, d, a, M[5], 4237533241, 21);
      a = fnI(a, b, c, d, M[12], 1700485571, 6);
      d = fnI(d, a, b, c, M[3], 2399980690, 10);
      c = fnI(c, d, a, b, M[10], 4293915773, 15);
      b = fnI(b, c, d, a, M[1], 2240044497, 21);
      a = fnI(a, b, c, d, M[8], 1873313359, 6);
      d = fnI(d, a, b, c, M[15], 4264355552, 10);
      c = fnI(c, d, a, b, M[6], 2734768916, 15);
      b = fnI(b, c, d, a, M[13], 1309151649, 21);
      a = fnI(a, b, c, d, M[4], 4149444226, 6);
      d = fnI(d, a, b, c, M[11], 3174756917, 10);
      c = fnI(c, d, a, b, M[2], 718787259, 15);
      b = fnI(b, c, d, a, M[9], 3951481745, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
    };
    MD5.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer3.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fnF(a, b, c, d, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
    }
    function fnG(a, b, c, d, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
    }
    function fnH(a, b, c, d, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
    }
    function fnI(a, b, c, d, m, k, s) {
      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
    }
    module.exports = MD5;
  }
});

// node_modules/ripemd160/index.js
var require_ripemd160 = __commonJS({
  "node_modules/ripemd160/index.js"(exports, module) {
    "use strict";
    var Buffer3 = require_buffer().Buffer;
    var inherits2 = require_inherits_browser();
    var HashBase = require_hash_base();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits2(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words = ARRAY16;
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer3.alloc ? Buffer3.alloc(20) : new Buffer3(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }
    module.exports = RIPEMD160;
  }
});

// browser-external:stream
var require_stream = __commonJS({
  "browser-external:stream"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "stream" has been externalized for browser compatibility. Cannot access "stream.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/cipher-base/index.js
var require_cipher_base = __commonJS({
  "node_modules/cipher-base/index.js"(exports, module) {
    "use strict";
    var Buffer3 = require_safe_buffer().Buffer;
    var Transform = require_stream().Transform;
    var StringDecoder = require_string_decoder().StringDecoder;
    var inherits2 = require_inherits_browser();
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === "string";
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this["final"] = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits2(CipherBase, Transform);
    var useUint8Array = typeof Uint8Array !== "undefined";
    var useArrayBuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined" && ArrayBuffer.isView && (Buffer3.prototype instanceof Uint8Array || Buffer3.TYPED_ARRAY_SUPPORT);
    function toBuffer2(data, encoding) {
      if (data instanceof Buffer3) {
        return data;
      }
      if (typeof data === "string") {
        return Buffer3.from(data, encoding);
      }
      if (useArrayBuffer && ArrayBuffer.isView(data)) {
        if (data.byteLength === 0) {
          return Buffer3.alloc(0);
        }
        var res = Buffer3.from(data.buffer, data.byteOffset, data.byteLength);
        if (res.byteLength === data.byteLength) {
          return res;
        }
      }
      if (useUint8Array && data instanceof Uint8Array) {
        return Buffer3.from(data);
      }
      if (Buffer3.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === "function" && data.constructor.isBuffer(data)) {
        return Buffer3.from(data);
      }
      throw new TypeError('The "data" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');
    }
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      var bufferData = toBuffer2(data, inputEnc);
      var outData = this._update(bufferData);
      if (this.hashMode) {
        return this;
      }
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {
    };
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer3.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc) {
        throw new Error("can’t switch encodings");
      }
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
      return out;
    };
    module.exports = CipherBase;
  }
});

// node_modules/create-hash/browser.js
var require_browser2 = __commonJS({
  "node_modules/create-hash/browser.js"(exports, module) {
    "use strict";
    var inherits2 = require_inherits_browser();
    var MD5 = require_md5();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha();
    var Base = require_cipher_base();
    function Hash(hash2) {
      Base.call(this, "digest");
      this._hash = hash2;
    }
    inherits2(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    module.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5") return new MD5();
      if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
      return new Hash(sha(alg));
    };
  }
});

// node_modules/ethereumjs-util/dist.browser/hash.js
var require_hash2 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/hash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
    var keccak_1 = require_keccak();
    var createHash = require_browser2();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var helpers_1 = require_helpers();
    var keccak = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsBuffer)(a);
      switch (bits) {
        case 224: {
          return (0, keccak_1.keccak224)(a);
        }
        case 256: {
          return (0, keccak_1.keccak256)(a);
        }
        case 384: {
          return (0, keccak_1.keccak384)(a);
        }
        case 512: {
          return (0, keccak_1.keccak512)(a);
        }
        default: {
          throw new Error("Invald algorithm: keccak".concat(bits));
        }
      }
    };
    exports.keccak = keccak;
    var keccak2563 = function(a) {
      return (0, exports.keccak)(a);
    };
    exports.keccak256 = keccak2563;
    var keccakFromString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsString)(a);
      var buf = Buffer.from(a, "utf8");
      return (0, exports.keccak)(buf, bits);
    };
    exports.keccakFromString = keccakFromString;
    var keccakFromHexString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsHexString)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromHexString = keccakFromHexString;
    var keccakFromArray = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsArray)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromArray = keccakFromArray;
    var _sha256 = function(a) {
      a = (0, bytes_1.toBuffer)(a);
      return createHash("sha256").update(a).digest();
    };
    var sha2562 = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return _sha256(a);
    };
    exports.sha256 = sha2562;
    var sha256FromString = function(a) {
      (0, helpers_1.assertIsString)(a);
      return _sha256(a);
    };
    exports.sha256FromString = sha256FromString;
    var sha256FromArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return _sha256(a);
    };
    exports.sha256FromArray = sha256FromArray;
    var _ripemd160 = function(a, padded) {
      a = (0, bytes_1.toBuffer)(a);
      var hash2 = createHash("rmd160").update(a).digest();
      if (padded === true) {
        return (0, bytes_1.setLengthLeft)(hash2, 32);
      } else {
        return hash2;
      }
    };
    var ripemd1602 = function(a, padded) {
      (0, helpers_1.assertIsBuffer)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160 = ripemd1602;
    var ripemd160FromString = function(a, padded) {
      (0, helpers_1.assertIsString)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromString = ripemd160FromString;
    var ripemd160FromArray = function(a, padded) {
      (0, helpers_1.assertIsArray)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromArray = ripemd160FromArray;
    var rlphash = function(a) {
      return (0, exports.keccak)(externals_1.rlp.encode(a));
    };
    exports.rlphash = rlphash;
  }
});

// node_modules/ethereumjs-util/dist.browser/types.js
var require_types = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var bytes_1 = require_bytes();
    function bnToHex(value) {
      return "0x".concat(value.toString(16));
    }
    exports.bnToHex = bnToHex;
    function bnToUnpaddedBuffer(value) {
      return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));
    }
    exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
    function bnToRlp(value) {
      return bnToUnpaddedBuffer(value);
    }
    exports.bnToRlp = bnToRlp;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BN"] = 1] = "BN";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_1.isHexString)(input)) {
        throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      var output = (0, bytes_1.toBuffer)(input);
      if (outputType === TypeOutput.Buffer) {
        return output;
      } else if (outputType === TypeOutput.BN) {
        return new externals_1.BN(output);
      } else if (outputType === TypeOutput.Number) {
        var bn = new externals_1.BN(output);
        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
        if (bn.gt(max)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
        }
        return bn.toNumber();
      } else {
        return "0x".concat(output.toString("hex"));
      }
    }
    exports.toType = toType;
  }
});

// node_modules/ethereumjs-util/dist.browser/account.js
var require_account = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/account.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r2, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done) ar.push(r2.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r2 && !r2.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var secp256k1_1 = require_secp256k1();
    var internal_1 = require_internal();
    var constants_1 = require_constants();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    var Account = (
      /** @class */
      function() {
        function Account2(nonce, balance, stateRoot, codeHash) {
          if (nonce === void 0) {
            nonce = new externals_1.BN(0);
          }
          if (balance === void 0) {
            balance = new externals_1.BN(0);
          }
          if (stateRoot === void 0) {
            stateRoot = constants_1.KECCAK256_RLP;
          }
          if (codeHash === void 0) {
            codeHash = constants_1.KECCAK256_NULL;
          }
          this.nonce = nonce;
          this.balance = balance;
          this.stateRoot = stateRoot;
          this.codeHash = codeHash;
          this._validate();
        }
        Account2.fromAccountData = function(accountData) {
          var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
          return new Account2(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : void 0, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : void 0, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : void 0, codeHash ? (0, bytes_1.toBuffer)(codeHash) : void 0);
        };
        Account2.fromRlpSerializedAccount = function(serialized) {
          var values = externals_1.rlp.decode(serialized);
          if (!Array.isArray(values)) {
            throw new Error("Invalid serialized account input. Must be array");
          }
          return this.fromValuesArray(values);
        };
        Account2.fromValuesArray = function(values) {
          var _a2 = __read(values, 4), nonce = _a2[0], balance = _a2[1], stateRoot = _a2[2], codeHash = _a2[3];
          return new Account2(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
        };
        Account2.prototype._validate = function() {
          if (this.nonce.lt(new externals_1.BN(0))) {
            throw new Error("nonce must be greater than zero");
          }
          if (this.balance.lt(new externals_1.BN(0))) {
            throw new Error("balance must be greater than zero");
          }
          if (this.stateRoot.length !== 32) {
            throw new Error("stateRoot must have a length of 32");
          }
          if (this.codeHash.length !== 32) {
            throw new Error("codeHash must have a length of 32");
          }
        };
        Account2.prototype.raw = function() {
          return [
            (0, types_1.bnToUnpaddedBuffer)(this.nonce),
            (0, types_1.bnToUnpaddedBuffer)(this.balance),
            this.stateRoot,
            this.codeHash
          ];
        };
        Account2.prototype.serialize = function() {
          return externals_1.rlp.encode(this.raw());
        };
        Account2.prototype.isContract = function() {
          return !this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        Account2.prototype.isEmpty = function() {
          return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        return Account2;
      }()
    );
    exports.Account = Account;
    var isValidAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports.isValidAddress = isValidAddress;
    var toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_1.assertIsHexString)(hexAddress);
      var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
      var prefix = "";
      if (eip1191ChainId) {
        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
        prefix = chainId.toString() + "0x";
      }
      var hash2 = (0, hash_1.keccakFromString)(prefix + address).toString("hex");
      var ret = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(hash2[i], 16) >= 8) {
          ret += address[i].toUpperCase();
        } else {
          ret += address[i];
        }
      }
      return ret;
    };
    exports.toChecksumAddress = toChecksumAddress;
    var isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports.isValidChecksumAddress = isValidChecksumAddress;
    var generateAddress = function(from, nonce) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(nonce);
      var nonceBN = new externals_1.BN(nonce);
      if (nonceBN.isZero()) {
        return (0, hash_1.rlphash)([from, null]).slice(-20);
      }
      return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    exports.generateAddress = generateAddress;
    var generateAddress2 = function(from, salt, initCode) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(salt);
      (0, helpers_1.assertIsBuffer)(initCode);
      (0, assert_1.default)(from.length === 20);
      (0, assert_1.default)(salt.length === 32);
      var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from("ff", "hex"), from, salt, (0, hash_1.keccak256)(initCode)]));
      return address.slice(-20);
    };
    exports.generateAddress2 = generateAddress2;
    var isValidPrivate = function(privateKey) {
      return (0, secp256k1_1.privateKeyVerify)(privateKey);
    };
    exports.isValidPrivate = isValidPrivate;
    var isValidPublic = function(publicKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));
      }
      if (!sanitize) {
        return false;
      }
      return (0, secp256k1_1.publicKeyVerify)(publicKey);
    };
    exports.isValidPublic = isValidPublic;
    var pubToAddress = function(pubKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
      }
      (0, assert_1.default)(pubKey.length === 64);
      return (0, hash_1.keccak)(pubKey).slice(-20);
    };
    exports.pubToAddress = pubToAddress;
    exports.publicToAddress = exports.pubToAddress;
    var privateToPublic = function(privateKey) {
      (0, helpers_1.assertIsBuffer)(privateKey);
      return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
    };
    exports.privateToPublic = privateToPublic;
    var privateToAddress = function(privateKey) {
      return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
    };
    exports.privateToAddress = privateToAddress;
    var importPublic = function(publicKey) {
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
      }
      return publicKey;
    };
    exports.importPublic = importPublic;
    var zeroAddress = function() {
      var addressLength = 20;
      var addr = (0, bytes_1.zeros)(addressLength);
      return (0, bytes_1.bufferToHex)(addr);
    };
    exports.zeroAddress = zeroAddress;
    var isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      var zeroAddr = (0, exports.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports.isZeroAddress = isZeroAddress;
  }
});

// node_modules/ethereumjs-util/dist.browser/address.js
var require_address = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/address.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Address = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var account_1 = require_account();
    var Address = (
      /** @class */
      function() {
        function Address2(buf) {
          (0, assert_1.default)(buf.length === 20, "Invalid address length");
          this.buf = buf;
        }
        Address2.zero = function() {
          return new Address2((0, bytes_1.zeros)(20));
        };
        Address2.fromString = function(str) {
          (0, assert_1.default)((0, account_1.isValidAddress)(str), "Invalid address");
          return new Address2((0, bytes_1.toBuffer)(str));
        };
        Address2.fromPublicKey = function(pubKey) {
          (0, assert_1.default)(Buffer.isBuffer(pubKey), "Public key should be Buffer");
          var buf = (0, account_1.pubToAddress)(pubKey);
          return new Address2(buf);
        };
        Address2.fromPrivateKey = function(privateKey) {
          (0, assert_1.default)(Buffer.isBuffer(privateKey), "Private key should be Buffer");
          var buf = (0, account_1.privateToAddress)(privateKey);
          return new Address2(buf);
        };
        Address2.generate = function(from, nonce) {
          (0, assert_1.default)(externals_1.BN.isBN(nonce));
          return new Address2((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));
        };
        Address2.generate2 = function(from, salt, initCode) {
          (0, assert_1.default)(Buffer.isBuffer(salt));
          (0, assert_1.default)(Buffer.isBuffer(initCode));
          return new Address2((0, account_1.generateAddress2)(from.buf, salt, initCode));
        };
        Address2.prototype.equals = function(address) {
          return this.buf.equals(address.buf);
        };
        Address2.prototype.isZero = function() {
          return this.equals(Address2.zero());
        };
        Address2.prototype.isPrecompileOrSystemAddress = function() {
          var addressBN = new externals_1.BN(this.buf);
          var rangeMin = new externals_1.BN(0);
          var rangeMax = new externals_1.BN("ffff", "hex");
          return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
        };
        Address2.prototype.toString = function() {
          return "0x" + this.buf.toString("hex");
        };
        Address2.prototype.toBuffer = function() {
          return Buffer.from(this.buf);
        };
        return Address2;
      }()
    );
    exports.Address = Address;
  }
});

// node_modules/ethereumjs-util/dist.browser/signature.js
var require_signature = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
    var secp256k1_1 = require_secp256k1();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash2();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    function ecsign(msgHash, privateKey, chainId) {
      var _a2 = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a2.signature, recovery = _a2.recid;
      var r2 = Buffer.from(signature.slice(0, 32));
      var s = Buffer.from(signature.slice(32, 64));
      if (!chainId || typeof chainId === "number") {
        if (chainId && !Number.isSafeInteger(chainId)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
        }
        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
        return { r: r2, s, v: v_1 };
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);
      return { r: r2, s, v };
    }
    exports.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
      var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (vBN.eqn(0) || vBN.eqn(1))
        return (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (!chainId) {
        return vBN.subn(27);
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      return vBN.sub(chainIdBN.muln(2).addn(35));
    }
    function isValidSigRecovery(recovery) {
      var rec = new externals_1.BN(recovery);
      return rec.eqn(0) || rec.eqn(1);
    }
    var ecrecover = function(msgHash, v, r2, s, chainId) {
      var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
      return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
    };
    exports.ecrecover = ecrecover;
    var toRpcSig = function(v, r2, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
    };
    exports.toRpcSig = toRpcSig;
    var toCompactSig = function(v, r2, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
      var ss = s;
      if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
        ss = Buffer.from(s);
        ss[0] |= 128;
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
    };
    exports.toCompactSig = toCompactSig;
    var fromRpcSig = function(sig) {
      var buf = (0, bytes_1.toBuffer)(sig);
      var r2;
      var s;
      var v;
      if (buf.length >= 65) {
        r2 = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(64));
      } else if (buf.length === 64) {
        r2 = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
        s[0] &= 127;
      } else {
        throw new Error("Invalid signature length");
      }
      if (v < 27) {
        v += 27;
      }
      return {
        v,
        r: r2,
        s
      };
    };
    exports.fromRpcSig = fromRpcSig;
    var isValidSignature = function(v, r2, s, homesteadOrLater, chainId) {
      if (homesteadOrLater === void 0) {
        homesteadOrLater = true;
      }
      var SECP256K1_N_DIV_2 = new externals_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      var SECP256K1_N = new externals_1.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
      if (r2.length !== 32 || s.length !== 32) {
        return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
      }
      var rBN = new externals_1.BN(r2);
      var sBN = new externals_1.BN(s);
      if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
      }
      if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
      return true;
    };
    exports.isValidSignature = isValidSignature;
    var hashPersonalMessage = function(message) {
      (0, helpers_1.assertIsBuffer)(message);
      var prefix = Buffer.from("Ethereum Signed Message:\n".concat(message.length), "utf-8");
      return (0, hash_1.keccak)(Buffer.concat([prefix, message]));
    };
    exports.hashPersonalMessage = hashPersonalMessage;
  }
});

// node_modules/ethereumjs-util/dist.browser/object.js
var require_object = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/object.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = void 0;
    var assert_1 = __importDefault(require_assert());
    var internal_1 = require_internal();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var defineProperties = function(self2, fields, data) {
      self2.raw = [];
      self2._fields = [];
      self2.toJSON = function(label) {
        if (label === void 0) {
          label = false;
        }
        if (label) {
          var obj_1 = {};
          self2._fields.forEach(function(field) {
            obj_1[field] = "0x".concat(self2[field].toString("hex"));
          });
          return obj_1;
        }
        return (0, bytes_1.baToJSON)(self2.raw);
      };
      self2.serialize = function serialize() {
        return externals_1.rlp.encode(self2.raw);
      };
      fields.forEach(function(field, i) {
        self2._fields.push(field.name);
        function getter() {
          return self2.raw[i];
        }
        function setter(v) {
          v = (0, bytes_1.toBuffer)(v);
          if (v.toString("hex") === "00" && !field.allowZero) {
            v = Buffer.allocUnsafe(0);
          }
          if (field.allowLess && field.length) {
            v = (0, bytes_1.unpadBuffer)(v);
            (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
          } else if (!(field.allowZero && v.length === 0) && field.length) {
            (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
          }
          self2.raw[i] = v;
        }
        Object.defineProperty(self2, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
        if (field.default) {
          self2[field.name] = field.default;
        }
        if (field.alias) {
          Object.defineProperty(self2, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
      if (data) {
        if (typeof data === "string") {
          data = Buffer.from((0, internal_1.stripHexPrefix)(data), "hex");
        }
        if (Buffer.isBuffer(data)) {
          data = externals_1.rlp.decode(data);
        }
        if (Array.isArray(data)) {
          if (data.length > self2._fields.length) {
            throw new Error("wrong number of fields in data");
          }
          data.forEach(function(d, i) {
            self2[self2._fields[i]] = (0, bytes_1.toBuffer)(d);
          });
        } else if (typeof data === "object") {
          var keys_1 = Object.keys(data);
          fields.forEach(function(field) {
            if (keys_1.indexOf(field.name) !== -1)
              self2[field.name] = data[field.name];
            if (keys_1.indexOf(field.alias) !== -1)
              self2[field.alias] = data[field.alias];
          });
        } else {
          throw new Error("invalid data");
        }
      }
    };
    exports.defineProperties = defineProperties;
  }
});

// node_modules/ethereumjs-util/dist.browser/index.js
var require_dist2 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    __exportStar(require_constants(), exports);
    __exportStar(require_account(), exports);
    __exportStar(require_address(), exports);
    __exportStar(require_hash2(), exports);
    __exportStar(require_signature(), exports);
    __exportStar(require_bytes(), exports);
    __exportStar(require_object(), exports);
    __exportStar(require_externals(), exports);
    __exportStar(require_types(), exports);
    var internal_1 = require_internal();
    Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_1.isHexPrefixed;
    } });
    Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_1.stripHexPrefix;
    } });
    Object.defineProperty(exports, "padToEven", { enumerable: true, get: function() {
      return internal_1.padToEven;
    } });
    Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function() {
      return internal_1.getBinarySize;
    } });
    Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_1.arrayContainsArray;
    } });
    Object.defineProperty(exports, "toAscii", { enumerable: true, get: function() {
      return internal_1.toAscii;
    } });
    Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function() {
      return internal_1.fromUtf8;
    } });
    Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function() {
      return internal_1.fromAscii;
    } });
    Object.defineProperty(exports, "getKeys", { enumerable: true, get: function() {
      return internal_1.getKeys;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return internal_1.isHexString;
    } });
  }
});

// node_modules/@moralisweb3/common-sol-utils/node_modules/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/@moralisweb3/common-sol-utils/node_modules/base-x/src/index.js"(exports, module) {
    "use strict";
    function base(ALPHABET2) {
      if (ALPHABET2.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET2.length; i++) {
        var x = ALPHABET2.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE = ALPHABET2.length;
      var LEADER = ALPHABET2.charAt(0);
      var FACTOR = Math.log(BASE) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE);
      function encode5(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE >>> 0;
            carry = carry / BASE >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET2.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode2(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE + " character");
      }
      return {
        encode: encode5,
        decodeUnsafe,
        decode: decode2
      };
    }
    module.exports = base;
  }
});

// node_modules/@moralisweb3/common-sol-utils/node_modules/bs58/index.js
var require_bs58 = __commonJS({
  "node_modules/@moralisweb3/common-sol-utils/node_modules/bs58/index.js"(exports, module) {
    var basex = require_src();
    var ALPHABET2 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    module.exports = basex(ALPHABET2);
  }
});

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction(_global.postMessage)
);
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue2(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue2(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue2(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue: convertValue2,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  if (utils_default.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id2) {
    if (this.handlers[id2]) {
      this.handlers[id2] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  navigator: () => _navigator,
  origin: () => origin
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var _navigator = typeof navigator === "object" && navigator || void 0;
var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
  url = new URL(url, platform_default.origin);
  return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
})(
  new URL(platform_default.origin),
  platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
) : () => true;

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, prop, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, prop, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, prop, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth: auth2 } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
  if (auth2) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth2.username || "") + ":" + (auth2.password ? unescape(encodeURIComponent(auth2.password)) : ""))
    );
  }
  let contentType;
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController();
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils_default.asap(unsubscribe);
    return signal;
  }
};
var composeSignals_default = composeSignals;

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
var readStream = async function* (stream) {
  if (stream[Symbol.asyncIterator]) {
    yield* stream;
    return;
  }
  const reader = stream.getReader();
  try {
    for (; ; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
var trackStream = (stream, chunkSize, onProgress, onFinish) => {
  const iterator = readBytes(stream, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  });
};

// node_modules/axios/lib/adapters/fetch.js
var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
var supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform_default.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
var resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
    !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
      throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response());
var getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils_default.isBlob(body)) {
    return body.size;
  }
  if (utils_default.isSpecCompliantForm(body)) {
    const _request = new Request(platform_default.origin, {
      method: "POST",
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils_default.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils_default.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
var resolveBodyLength = async (headers, body) => {
  const length = utils_default.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
var fetch_default = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig_default(config);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url, {
        method: "POST",
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils_default.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : void 0
    });
    let response = await fetch(request);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];
      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          unsubscribe && unsubscribe();
        }),
        options
      );
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders_default.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      );
    }
    throw AxiosError_default.from(err, err && err.code, config, request);
  }
});

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default,
  fetch: fetch_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id2;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id2}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id2 || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.7.9";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version11, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version11 ? " in " + version11 : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version11 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version11 + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    validator_default.assertOptions(config, {
      baseUrl: validators2.spelling("baseURL"),
      withXsrfToken: validators2.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController();
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// node_modules/@moralisweb3/common-core/lib/esm/index.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArray(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var ModuleType;
(function(ModuleType2) {
  ModuleType2["API"] = "api";
  ModuleType2["DEFAULT"] = "default";
})(ModuleType || (ModuleType = {}));
var isApiModule = function(moralisClass) {
  if (moralisClass.type === ModuleType.API) {
    return true;
  }
  return false;
};
var CoreErrorCode;
(function(CoreErrorCode2) {
  CoreErrorCode2["GENERIC_CORE_ERROR"] = "C0001";
  CoreErrorCode2["DUPLICATE_MODULE"] = "C0002";
  CoreErrorCode2["MODULE_NOT_FOUND"] = "C0003";
  CoreErrorCode2["VALIDATION_ERROR"] = "C0004";
  CoreErrorCode2["INVALID_ARGUMENT"] = "C0005";
  CoreErrorCode2["REQUEST_ERROR"] = "C0006";
  CoreErrorCode2["NO_DATA_FOUND"] = "C0007";
  CoreErrorCode2["NOT_INITIALIZED"] = "C0008";
  CoreErrorCode2["ALREADY_INITIALIZED"] = "C0009";
  CoreErrorCode2["METHOD_FAILED"] = "C0010";
  CoreErrorCode2["STATE_MACHINE_STARTED"] = "C0011";
  CoreErrorCode2["STATE_MACHINE_NOT_STARTED"] = "C0012";
  CoreErrorCode2["CONFIG_KEY_NOT_EXIST"] = "C0013";
  CoreErrorCode2["CONFIG_INVALID_VALUE"] = "C0014";
  CoreErrorCode2["CONFIG_KEY_ALREADY_EXIST"] = "C0015";
  CoreErrorCode2["INVALID_DATA"] = "C0016";
  CoreErrorCode2["BIG_NUMBER_ERROR"] = "C0500";
  CoreErrorCode2["NOT_IMPLEMENTED"] = "C9000";
})(CoreErrorCode || (CoreErrorCode = {}));
var ApiErrorCode;
(function(ApiErrorCode2) {
  ApiErrorCode2["GENERIC_API_ERROR"] = "A0001";
  ApiErrorCode2["PAGE_LIMIT_EXCEEDED"] = "A0002";
  ApiErrorCode2["API_KEY_NOT_SET"] = "A0003";
  ApiErrorCode2["INVALID_PARAMS"] = "A0004";
  ApiErrorCode2["NOT_FOUND"] = "A0404";
  ApiErrorCode2["NOT_IMPLEMENTED"] = "A9000";
})(ApiErrorCode || (ApiErrorCode = {}));
var AuthErrorCode;
(function(AuthErrorCode2) {
  AuthErrorCode2["GENERIC_AUTH_ERROR"] = "U0001";
  AuthErrorCode2["INCORRECT_NETWORK"] = "U0002";
  AuthErrorCode2["INCORRECT_PARAMETER"] = "U0003";
  AuthErrorCode2["NOT_IMPLEMENTED"] = "U9000";
})(AuthErrorCode || (AuthErrorCode = {}));
var StreamErrorCode;
(function(StreamErrorCode2) {
  StreamErrorCode2["GENERIC_STREAM_ERROR"] = "S0001";
  StreamErrorCode2["INCORRECT_NETWORK"] = "S0002";
  StreamErrorCode2["INCORRECT_PARAMETER"] = "S0003";
  StreamErrorCode2["INVALID_SIGNATURE"] = "S0004";
  StreamErrorCode2["NOT_IMPLEMENTED"] = "S9000";
})(StreamErrorCode || (StreamErrorCode = {}));
var MoralisError = (
  /** @class */
  function(_super) {
    __extends(MoralisError2, _super);
    function MoralisError2(_a2) {
      var message = _a2.message, code = _a2.code, details = _a2.details, cause = _a2.cause;
      var _this = (
        // @ts-ignore Typescript does not recognise 'cause' ? OR we have wrong TS version
        _super.call(this, MoralisError2.makeMessage(message, code), { cause }) || this
      );
      _this.name = "Moralis SDK Error";
      _this.isMoralisError = true;
      Object.setPrototypeOf(_this, MoralisError2.prototype);
      _this.code = code;
      _this.details = details;
      if (cause) {
        _this.cause = cause;
        if ("stack" in cause) {
          _this.stack = "".concat(_this.stack, "\nCAUSE: ").concat(cause.stack);
        }
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisError2);
      }
      return _this;
    }
    MoralisError2.makeMessage = function(message, code) {
      return "[".concat(code, "] ").concat(message);
    };
    return MoralisError2;
  }(Error)
);
var CoreError = (
  /** @class */
  function(_super) {
    __extends(CoreError2, _super);
    function CoreError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis SDK Core Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, CoreError2);
      }
      return _this;
    }
    return CoreError2;
  }(MoralisError)
);
var MoralisApiError = (
  /** @class */
  function(_super) {
    __extends(MoralisApiError2, _super);
    function MoralisApiError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis SDK API Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisApiError2);
      }
      return _this;
    }
    return MoralisApiError2;
  }(MoralisError)
);
var MoralisAuthError = (
  /** @class */
  function(_super) {
    __extends(MoralisAuthError2, _super);
    function MoralisAuthError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis Auth Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisAuthError2);
      }
      return _this;
    }
    return MoralisAuthError2;
  }(MoralisError)
);
var MoralisStreamError = (
  /** @class */
  function(_super) {
    __extends(MoralisStreamError2, _super);
    function MoralisStreamError2(options) {
      var _this = _super.call(this, options) || this;
      _this.name = "Moralis Stream Error";
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_this, MoralisStreamError2);
      }
      return _this;
    }
    return MoralisStreamError2;
  }(MoralisError)
);
var isMoralisError = function(error) {
  if (!(error instanceof Error)) {
    return false;
  }
  if (!error.isMoralisError) {
    return false;
  }
  return true;
};
var Modules = (
  /** @class */
  function() {
    function Modules2() {
      this.modules = /* @__PURE__ */ new Map();
    }
    Modules2.prototype.register = function(module) {
      if (this.modules.has(module.name)) {
        throw new CoreError({
          code: CoreErrorCode.DUPLICATE_MODULE,
          message: 'The module "'.concat(module.name, '" has already been registered.')
        });
      }
      this.modules.set(module.name, module);
      module.setup();
    };
    Modules2.prototype.get = function(name) {
      var module = this.modules.get(name);
      if (!module) {
        throw new CoreError({ code: CoreErrorCode.MODULE_NOT_FOUND, message: 'Module "'.concat(name, '" does not exist.') });
      }
      return module;
    };
    Modules2.prototype.tryGet = function(name) {
      return this.modules.get(name) || null;
    };
    Modules2.prototype.has = function(name) {
      return this.modules.has(name);
    };
    Modules2.prototype.getApi = function(name) {
      var module = this.modules.get(name);
      if (!module || !isApiModule(module)) {
        throw new CoreError({
          code: CoreErrorCode.MODULE_NOT_FOUND,
          message: 'No ApiModule found with the name "'.concat(name, '"')
        });
      }
      return module;
    };
    Modules2.prototype.remove = function(name) {
      var isRemoved = this.modules.delete(name);
      if (!isRemoved) {
        throw new CoreError({ code: CoreErrorCode.MODULE_NOT_FOUND, message: 'Module "'.concat(name, '" does not exist.') });
      }
    };
    Modules2.prototype.list = function() {
      return Array.from(this.modules.values());
    };
    Modules2.prototype.listNames = function() {
      return this.list().map(function(module) {
        return module.name;
      });
    };
    Modules2.prototype.listApis = function() {
      return this.list().filter(isApiModule);
    };
    return Modules2;
  }()
);
var CoreConfig = {
  logLevel: {
    name: "logLevel",
    defaultValue: "info"
  },
  buidEnvironment: {
    name: "buidEnvironment",
    defaultValue: "browser"
  },
  defaultNetwork: {
    name: "defaultNetwork",
    defaultValue: "Evm"
  },
  product: {
    name: "product",
    defaultValue: void 0
  },
  /**
   * @description Maximal number of request retries.
   */
  maxRetries: {
    name: "maxRetries",
    defaultValue: 2
  }
};
var logLevelMap = {
  verbose: 5,
  debug: 4,
  info: 3,
  warning: 2,
  error: 1,
  off: 0
};
var LoggerController = (
  /** @class */
  function() {
    function LoggerController2(moduleName, config) {
      this.moduleName = moduleName;
      this.config = config;
    }
    LoggerController2.create = function(moduleName, core2) {
      return new LoggerController2(moduleName, core2.config);
    };
    Object.defineProperty(LoggerController2.prototype, "level", {
      get: function() {
        return this.config.get(CoreConfig.logLevel);
      },
      enumerable: false,
      configurable: true
    });
    LoggerController2.prototype._transport = function(level, message, details) {
      var logMessage = this._makeLogMessage(message);
      var args = [logMessage, details].filter(function(arg) {
        return arg != null;
      });
      switch (level) {
        case "error":
          console.error.apply(console, args);
          break;
        case "warn":
          console.warn.apply(console, args);
          break;
        case "log":
          console.log.apply(console, args);
          break;
      }
    };
    LoggerController2.prototype._shouldLog = function(logLevel) {
      var level = logLevelMap[logLevel];
      var acceptedLevel = logLevelMap[this.level];
      if (level > acceptedLevel) {
        return false;
      }
      return true;
    };
    LoggerController2.prototype._makeLogMessage = function(message) {
      return "Moralis[".concat(this.moduleName, "]: ").concat(message);
    };
    LoggerController2.prototype.error = function(error, details) {
      if (!this._shouldLog("error")) {
        return;
      }
      var message = "";
      if (typeof error === "string") {
        message = error;
      } else if (isMoralisError(error)) {
        message = error.message;
        if (error.details) {
          if (details) {
            details._errorDetails = error.details;
          } else {
            details = {
              _errorDetails: error.details
            };
          }
        }
      } else {
        message = error.message;
      }
      this._transport("error", message, details);
    };
    LoggerController2.prototype.warn = function(message, details) {
      if (!this._shouldLog("warning")) {
        return;
      }
      this._transport("warn", message, details);
    };
    LoggerController2.prototype.info = function(message, details) {
      if (!this._shouldLog("info")) {
        return;
      }
      this._transport("log", message, details);
    };
    LoggerController2.prototype.debug = function(message, details) {
      if (!this._shouldLog("debug")) {
        return;
      }
      this._transport("log", message, details);
    };
    LoggerController2.prototype.verbose = function(message, details) {
      if (!this._shouldLog("verbose")) {
        return;
      }
      this._transport("log", message, details);
    };
    return LoggerController2;
  }()
);
var Config = (
  /** @class */
  function() {
    function Config2() {
      this.items = /* @__PURE__ */ new Map();
    }
    Config2.prototype.registerKey = function(key, validator) {
      if (this.items.has(key.name)) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_KEY_ALREADY_EXIST,
          message: 'Key "'.concat(key.name, '" is already registered')
        });
      }
      this.items.set(key.name, { key, value: key.defaultValue, validator });
    };
    Config2.prototype.getKeys = function() {
      return Array.from(this.items.keys());
    };
    Config2.prototype.hasKey = function(key) {
      return this.items.has(key.name);
    };
    Config2.prototype.get = function(keyOrName) {
      return this.getItem(keyOrName).value;
    };
    Config2.prototype.set = function(keyOrName, value) {
      var item = this.getItem(keyOrName);
      var error = item.validator ? item.validator(value) : null;
      if (error) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_INVALID_VALUE,
          message: 'Cannot set this config. Invalid value for "'.concat(item.key.name, '". ').concat(error)
        });
      }
      item.value = value;
    };
    Config2.prototype.merge = function(values) {
      var _this = this;
      Object.keys(values).forEach(function(keyName) {
        _this.set(keyName, values[keyName]);
      });
    };
    Config2.prototype.reset = function() {
      this.items.forEach(function(item) {
        item.value = item.key.defaultValue;
      });
    };
    Config2.prototype.getItem = function(keyOrName) {
      var keyName = typeof keyOrName === "string" ? keyOrName : keyOrName.name;
      var item = this.items.get(keyName);
      if (!item) {
        throw new CoreError({
          code: CoreErrorCode.CONFIG_KEY_NOT_EXIST,
          message: 'Key "'.concat(keyName, '" is unregistered. Have you registered all required modules?')
        });
      }
      return item;
    };
    return Config2;
  }()
);
var CoreConfigSetup = (
  /** @class */
  function() {
    function CoreConfigSetup2() {
    }
    CoreConfigSetup2.register = function(config) {
      config.registerKey(CoreConfig.logLevel);
      config.registerKey(CoreConfig.buidEnvironment);
      config.registerKey(CoreConfig.defaultNetwork);
      config.registerKey(CoreConfig.product);
      config.registerKey(CoreConfig.maxRetries);
    };
    return CoreConfigSetup2;
  }()
);
var LIB_VERSION = "2.27.2";
var MoralisData = (
  /** @class */
  /* @__PURE__ */ function() {
    function MoralisData2() {
    }
    return MoralisData2;
  }()
);
var MoralisDataObject = (
  /** @class */
  function(_super) {
    __extends(MoralisDataObject2, _super);
    function MoralisDataObject2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return MoralisDataObject2;
  }(MoralisData)
);
var BigNumberFormatter = (
  /** @class */
  function() {
    function BigNumberFormatter2() {
    }
    BigNumberFormatter2.toDecimal = function(value, decimals) {
      if (decimals < 0) {
        throw new CoreError({
          code: CoreErrorCode.BIG_NUMBER_ERROR,
          message: "Invalid decimals"
        });
      }
      var result = value.toString();
      if (decimals === 0) {
        return result;
      }
      var isNegative = result.startsWith("-");
      if (isNegative) {
        result = result.substring(1);
      }
      result = result.padStart(decimals, "0");
      var dot = result.length - decimals;
      var whole = dot === 0 ? "0" : result.substring(0, dot);
      var fraction = result.substring(dot);
      result = "".concat(whole, ".").concat(fraction);
      while (result[result.length - 1] === "0" && result[result.length - 2] !== ".") {
        result = result.substring(0, result.length - 1);
      }
      if (isNegative) {
        result = "-".concat(result);
      }
      return result;
    };
    BigNumberFormatter2.toHex = function(value) {
      var result = value.toString(16);
      var isNegative = result.startsWith("-");
      if (isNegative) {
        result = result.substring(1);
      }
      if (result.length % 2 !== 0) {
        result = "0".concat(result);
      }
      result = "0x".concat(result);
      if (isNegative) {
        result = "-".concat(result);
      }
      return result;
    };
    return BigNumberFormatter2;
  }()
);
var BigNumberParser = (
  /** @class */
  function() {
    function BigNumberParser2() {
    }
    BigNumberParser2.parseInt = function(value) {
      assertNotEmpty(value);
      if (typeof value === "string") {
        if (value.length === 0) {
          throw createError("Value is empty");
        }
        var isNegativeHex = value.startsWith("-0x");
        if (isNegativeHex) {
          value = value.substring(1);
        }
        var result = BigInt(value);
        if (isNegativeHex) {
          result *= BigInt(-1);
        }
        return result;
      }
      return BigInt(value);
    };
    BigNumberParser2.parseDecimal = function(value, decimals) {
      assertNotEmpty(value);
      var multiplier = getMultiplier(decimals);
      if (typeof value === "number") {
        return BigInt(value) * multiplier;
      }
      if (typeof value === "bigint") {
        return value * multiplier;
      }
      var isNegative = value.startsWith("-");
      if (isNegative) {
        value = value.substring(1);
      }
      var fragments = value.split(".");
      if (fragments.length > 2) {
        throw createError("Value has more than one dot");
      }
      if (fragments.some(function(fragment) {
        return !fragment;
      })) {
        throw createError("Value has empty fragments");
      }
      var result;
      if (fragments.length === 1) {
        result = BigInt(fragments[0]) * multiplier;
      } else {
        var whole = fragments[0];
        var fraction = fragments[1];
        if (fraction.length > decimals) {
          throw createError("Value has too long fractional part: ".concat(fraction.length, ", max: ").concat(decimals));
        }
        if (fraction.length < decimals) {
          fraction = fraction.padEnd(decimals, "0");
        }
        result = BigInt(whole) * multiplier + BigInt(fraction);
      }
      if (isNegative) {
        result *= BigInt(-1);
      }
      return result;
    };
    return BigNumberParser2;
  }()
);
function assertNotEmpty(value) {
  if (value === null) {
    throw createError("Value is null");
  }
  if (value === void 0) {
    throw createError("Value is undefined");
  }
}
function getMultiplier(decimals) {
  if (decimals < 0) {
    throw createError("Invalid decimals");
  }
  var ten = BigInt(10);
  var multiplier = BigInt(1);
  while (decimals-- > 0) {
    multiplier *= ten;
  }
  return multiplier;
}
function createError(message) {
  return new CoreError({
    code: CoreErrorCode.BIG_NUMBER_ERROR,
    message
  });
}
var BigNumber = (
  /** @class */
  function() {
    function BigNumber3(value) {
      this.value = value;
    }
    BigNumber3.create = function(value) {
      if (value instanceof BigNumber3) {
        return value;
      }
      return new BigNumber3(BigNumberParser.parseInt(value));
    };
    BigNumber3.fromJSON = function(json) {
      return BigNumber3.create(json);
    };
    BigNumber3.fromDecimal = function(value, decimals) {
      if (decimals === void 0) {
        decimals = 0;
      }
      return new BigNumber3(BigNumberParser.parseDecimal(value, decimals));
    };
    BigNumber3.prototype.toBigInt = function() {
      return this.value;
    };
    BigNumber3.prototype.add = function(value) {
      return new BigNumber3(this.value + asBigInt(value));
    };
    BigNumber3.prototype.sub = function(value) {
      return new BigNumber3(this.value - asBigInt(value));
    };
    BigNumber3.prototype.mul = function(value) {
      return new BigNumber3(this.value * asBigInt(value));
    };
    BigNumber3.prototype.div = function(value) {
      return new BigNumber3(this.value / asBigInt(value));
    };
    BigNumber3.prototype.equals = function(value) {
      return this.value === value.toBigInt();
    };
    BigNumber3.prototype.toDecimal = function(decimals) {
      return BigNumberFormatter.toDecimal(this.value, decimals);
    };
    BigNumber3.prototype.toString = function() {
      return this.value.toString();
    };
    BigNumber3.prototype.toHex = function() {
      return BigNumberFormatter.toHex(this.value);
    };
    BigNumber3.prototype.toJSON = function() {
      return this.toHex();
    };
    return BigNumber3;
  }()
);
function asBigInt(value) {
  return BigNumber.create(value).toBigInt();
}
var dateInputToDate = function(value) {
  return typeof value === "string" ? new Date(value) : value;
};
var Core = (
  /** @class */
  function() {
    function Core2(modules, config, logger16) {
      var _this = this;
      this.modules = modules;
      this.config = config;
      this.logger = logger16;
      this.name = Core2.moduleName;
      this._isStarted = false;
      this.registerModules = function(modules2) {
        modules2.forEach(_this.registerModule);
      };
      this.registerModule = function(module) {
        if ("create" in module) {
          module = module.create(_this);
        }
        _this.modules.register(module);
        _this.logger.verbose("Module registered", { module: module.name });
      };
      this.getModule = function(name) {
        return _this.modules.get(name);
      };
      this.start = function(providedConfig) {
        return __awaiter(_this, void 0, void 0, function() {
          var allModules;
          return __generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (this._isStarted) {
                  throw new MoralisError({
                    message: "Modules are started already. This method should be called only one time.",
                    code: CoreErrorCode.ALREADY_INITIALIZED
                  });
                }
                this._isStarted = true;
                allModules = this.modules.list();
                if (providedConfig) {
                  this.config.merge(providedConfig);
                }
                this.logger.verbose("Starting all registered modules", {
                  moduleNames: this.modules.listNames()
                });
                return [4, Promise.all(allModules.map(function(module) {
                  return module.start();
                }))];
              case 1:
                _a2.sent();
                this.logger.verbose("Finished starting all registered modules", {
                  moduleNames: this.modules.listNames()
                });
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
    }
    Core2.create = function() {
      var modules = new Modules();
      var config = new Config();
      var logger16 = new LoggerController(Core2.moduleName, config);
      var core2 = new Core2(modules, config, logger16);
      CoreConfigSetup.register(config);
      return core2;
    };
    Object.defineProperty(Core2.prototype, "isStarted", {
      get: function() {
        return this._isStarted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Core2.prototype, "BigNumber", {
      get: function() {
        return BigNumber;
      },
      enumerable: false,
      configurable: true
    });
    Core2.moduleName = "core";
    Core2.libVersion = LIB_VERSION;
    return Core2;
  }()
);
var CoreProvider = (
  /** @class */
  function() {
    function CoreProvider2() {
    }
    CoreProvider2.getDefault = function() {
      if (!this.core) {
        throw new CoreError({
          code: CoreErrorCode.NOT_INITIALIZED,
          message: "Default instance of Core is not set"
        });
      }
      return this.core;
    };
    CoreProvider2.setDefault = function(core2) {
      if (this.core) {
        throw new CoreError({
          code: CoreErrorCode.ALREADY_INITIALIZED,
          message: "Default instance of Core is already set"
        });
      }
      this.core = core2;
    };
    return CoreProvider2;
  }()
);
var Module = (
  /** @class */
  function() {
    function Module2(name, core2, type) {
      if (type === void 0) {
        type = ModuleType.DEFAULT;
      }
      this.name = name;
      this.core = core2;
      this.type = type;
      this.logger = LoggerController.create(this.name, this.core);
    }
    Module2.prototype.cleanUp = function() {
      this.core.modules.remove(this.name);
    };
    return Module2;
  }()
);
var ApiModule = (
  /** @class */
  function(_super) {
    __extends(ApiModule2, _super);
    function ApiModule2(name, core2, baseUrlProvider) {
      var _this = _super.call(this, name, core2, ModuleType.API) || this;
      _this.baseUrlProvider = baseUrlProvider;
      return _this;
    }
    Object.defineProperty(ApiModule2.prototype, "baseUrl", {
      /**
       * @description The base URL of the API.
       */
      get: function() {
        if (!this._baseUrl) {
          this._baseUrl = this.baseUrlProvider();
        }
        return this._baseUrl;
      },
      enumerable: false,
      configurable: true
    });
    return ApiModule2;
  }(Module)
);
var UnreachableError = new CoreError({
  code: CoreErrorCode.GENERIC_CORE_ERROR,
  message: "Incorrect type provided, code should not reach here"
});
var AxiosRetry = (
  /** @class */
  function() {
    function AxiosRetry2() {
    }
    AxiosRetry2.request = function(retryConfig, requestConfig) {
      var _a2;
      return __awaiter(this, void 0, void 0, function() {
        var attempt, response, e_1, axiosError;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              attempt = 1;
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              return [4, axios_default.request(requestConfig)];
            case 2:
              response = _b.sent();
              return [2, response];
            case 3:
              e_1 = _b.sent();
              if (attempt >= retryConfig.maxRetries) {
                throw e_1;
              }
              if (!requestConfig.method || !retryConfig.allowedMethods.includes(requestConfig.method.toUpperCase())) {
                throw e_1;
              }
              if (!axios_default.isAxiosError(e_1)) {
                throw e_1;
              }
              axiosError = e_1;
              if (!((_a2 = axiosError.response) === null || _a2 === void 0 ? void 0 : _a2.status) || !retryConfig.allowedResponseStatuses.includes(axiosError.response.status)) {
                throw e_1;
              }
              if (retryConfig.beforeRetry) {
                retryConfig.beforeRetry(attempt, axiosError);
              }
              return [3, 4];
            case 4:
              attempt++;
              return [3, 1];
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    return AxiosRetry2;
  }()
);
var isApiRequestError = function(error) {
  if (!(error instanceof AxiosError2)) {
    return false;
  }
  if (error.code !== AxiosError2.ERR_BAD_REQUEST && error.code !== AxiosError2.ERR_BAD_RESPONSE) {
    return false;
  }
  return true;
};
var getMessageFromApiRequestError = function(error) {
  var _a2 = error.response.data, message = _a2.message, details = _a2.details;
  var result = "Unknown error (no error info returned from API)";
  if (Array.isArray(message)) {
    result = message.join(", ");
  } else if (typeof message === "string") {
    result = message;
  }
  if (details) {
    result += " ".concat(JSON.stringify(details));
  }
  return result;
};
var RequestController = (
  /** @class */
  function() {
    function RequestController2(config, logger16) {
      this.config = config;
      this.logger = logger16;
    }
    RequestController2.create = function(core2) {
      return new RequestController2(core2.config, core2.logger);
    };
    RequestController2.prototype.request = function(config) {
      return __awaiter(this, void 0, void 0, function() {
        var maxRetries, retryConfig, response, e_1, error;
        var _this = this;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              this.logger.verbose("[RequestController] request started", {
                url: config.url,
                method: config.method,
                body: config.data
              });
              maxRetries = this.config.get(CoreConfig.maxRetries);
              retryConfig = {
                maxRetries,
                allowedMethods: ["GET", "OPTIONS"],
                allowedResponseStatuses: [408, 413, 429, 500, 502, 503, 504],
                beforeRetry: function(attempt, error2) {
                  _this.logger.verbose("[RequestController] request retry", {
                    url: config.url,
                    method: config.method,
                    body: config.data,
                    error: error2,
                    attempt
                  });
                }
              };
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, AxiosRetry.request(retryConfig, __assign(__assign({}, config), { timeout: 2e4, maxContentLength: Infinity, maxBodyLength: Infinity }))];
            case 2:
              response = _a2.sent();
              return [2, response.data];
            case 3:
              e_1 = _a2.sent();
              error = this.makeError(e_1);
              this.logger.verbose("[RequestController] request error", {
                url: config.url,
                method: config.method,
                body: config.data,
                cause: error.cause,
                name: error.name,
                details: error.details
              });
              throw error;
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    RequestController2.prototype.makeError = function(error) {
      if (isApiRequestError(error)) {
        var _a2 = error.response, status_1 = _a2.status, statusText = _a2.statusText;
        var apiMessage = getMessageFromApiRequestError(error);
        return new CoreError({
          code: CoreErrorCode.REQUEST_ERROR,
          message: "Request failed, ".concat(statusText, "(").concat(status_1, "): ").concat(apiMessage),
          cause: error,
          details: {
            status: status_1,
            response: error.response
          }
        });
      }
      var err = error instanceof Error ? error : new Error("".concat(error));
      return new CoreError({
        code: CoreErrorCode.REQUEST_ERROR,
        message: "Request failed: ".concat(err.message),
        cause: err
      });
    };
    RequestController2.prototype.post = function(url, searchParams, body, options, abortSignal) {
      return this.request({
        url,
        params: searchParams,
        method: "POST",
        data: body,
        headers: options === null || options === void 0 ? void 0 : options.headers,
        signal: abortSignal
      });
    };
    RequestController2.prototype.put = function(url, searchParams, body, options, abortSignal) {
      return this.request({
        url,
        params: searchParams,
        method: "PUT",
        data: body,
        headers: options === null || options === void 0 ? void 0 : options.headers,
        signal: abortSignal
      });
    };
    RequestController2.prototype.get = function(url, searchParams, options, abortSignal) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          return [2, this.request({
            url,
            params: searchParams,
            method: "GET",
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal
          })];
        });
      });
    };
    RequestController2.prototype.delete = function(url, searchParams, body, options, abortSignal) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          return [2, this.request({
            url,
            params: searchParams,
            method: "DELETE",
            data: body,
            headers: options === null || options === void 0 ? void 0 : options.headers,
            signal: abortSignal
          })];
        });
      });
    };
    return RequestController2;
  }()
);
var OperationRequestValidator = (
  /** @class */
  function() {
    function OperationRequestValidator2(operation) {
      this.allParamNames = __spreadArray(__spreadArray(__spreadArray([], operation.urlPathParamNames || [], true), operation.urlSearchParamNames || [], true), operation.bodyParamNames || [], true);
    }
    OperationRequestValidator2.prototype.validate = function(request) {
      var requestParamNames = Object.keys(request);
      for (var _i = 0, requestParamNames_1 = requestParamNames; _i < requestParamNames_1.length; _i++) {
        var paramName = requestParamNames_1[_i];
        if (!this.allParamNames.includes(paramName)) {
          var allParamsNames = this.allParamNames.join(", ");
          throw new MoralisError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Request contains unknown parameter: ".concat(paramName, ". This operation supports the following parameters: ").concat(allParamsNames)
          });
        }
      }
    };
    return OperationRequestValidator2;
  }()
);
var OperationType;
(function(OperationType2) {
  OperationType2["NON_NULLABLE"] = "nonNullable";
  OperationType2["NULLABLE"] = "nullable";
  OperationType2["PAGINATED"] = "paginated";
})(OperationType || (OperationType = {}));
var NextPaginatedRequestResolver = (
  /** @class */
  function() {
    function NextPaginatedRequestResolver2() {
    }
    NextPaginatedRequestResolver2.resolve = function(firstPageIndex, request, pagination) {
      if (pagination.cursor) {
        return __assign(__assign({}, request), { cursor: pagination.cursor });
      }
      if (typeof pagination.total === "number") {
        var currentPage = firstPageIndex === 1 ? pagination.page : pagination.page + 1;
        var hasNextPage = pagination.total > pagination.pageSize * currentPage;
        if (hasNextPage) {
          var offset = (pagination.page + 1) * (request.limit || 500);
          return __assign(__assign({}, request), { offset });
        }
      }
      return null;
    };
    return NextPaginatedRequestResolver2;
  }()
);
var PaginationReader = (
  /** @class */
  function() {
    function PaginationReader2() {
    }
    PaginationReader2.read = function(jsonResponse) {
      var _a2, _b;
      return {
        page: (_a2 = jsonResponse.page) !== null && _a2 !== void 0 ? _a2 : 0,
        pageSize: (_b = jsonResponse.page_size) !== null && _b !== void 0 ? _b : 0,
        total: jsonResponse.total,
        cursor: jsonResponse.cursor
      };
    };
    return PaginationReader2;
  }()
);
var ResponseAdapter = (
  /** @class */
  function() {
    function ResponseAdapter2(jsonResponse, getResponse) {
      this.jsonResponse = jsonResponse;
      this.getResponse = getResponse;
    }
    Object.defineProperty(ResponseAdapter2.prototype, "result", {
      get: function() {
        return this.getResponse();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ResponseAdapter2.prototype, "raw", {
      get: function() {
        return this.jsonResponse;
      },
      enumerable: false,
      configurable: true
    });
    ResponseAdapter2.prototype.toJSON = function() {
      return this.jsonResponse;
    };
    return ResponseAdapter2;
  }()
);
var PaginatedResponseAdapter = (
  /** @class */
  function() {
    function PaginatedResponseAdapter2(pagination, jsonResponse, getResult, nextHandler) {
      var _this = this;
      this.pagination = pagination;
      this.jsonResponse = jsonResponse;
      this.getResult = getResult;
      this.nextHandler = nextHandler;
      this.hasNext = function() {
        return !!_this.nextHandler;
      };
      this.next = function() {
        if (!_this.nextHandler) {
          throw new MoralisError({
            code: CoreErrorCode.NO_DATA_FOUND,
            message: "Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method."
          });
        }
        return _this.nextHandler();
      };
    }
    Object.defineProperty(PaginatedResponseAdapter2.prototype, "result", {
      get: function() {
        return this.getResult();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PaginatedResponseAdapter2.prototype, "raw", {
      get: function() {
        return this.jsonResponse;
      },
      enumerable: false,
      configurable: true
    });
    PaginatedResponseAdapter2.prototype.toJSON = function() {
      return this.jsonResponse;
    };
    return PaginatedResponseAdapter2;
  }()
);
var toCamel = function(value) {
  return value.replace(/([-_][a-z])/gi, function($1) {
    return $1.toUpperCase().replace("-", "").replace("_", "");
  });
};
var isObject2 = function(o) {
  return o === Object(o) && !Array.isArray(o) && typeof o !== "function";
};
var toCamelCase2 = function(data) {
  if (isObject2(data)) {
    var n_1 = {};
    Object.keys(data).forEach(function(k) {
      n_1[toCamel(k)] = toCamelCase2(data[k]);
    });
    return n_1;
  }
  if (Array.isArray(data)) {
    return data.map(function(i) {
      return toCamelCase2(i);
    });
  }
  return data;
};
function maybe(value, transform) {
  if (value == null) {
    return void 0;
  }
  if (transform) {
    return transform(value);
  }
  return value;
}

// node_modules/@moralisweb3/api-utils/lib/esm/index.js
var ApiUtilsConfig = {
  apiKey: {
    name: "apiKey",
    defaultValue: null
  }
};
var _a;
var Environment;
(function(Environment2) {
  Environment2["BROWSER"] = "browser";
  Environment2["NODE"] = "node";
})(Environment || (Environment = {}));
var sdkNameForEnvironment = (_a = {}, _a[Environment.BROWSER] = "Javascript SDK", _a[Environment.NODE] = "NodeJS SDK", _a);
var currentEnvironment = getEnvironment();
function detectIsBrowser() {
  try {
    return typeof window !== "undefined" && typeof window.document !== "undefined";
  } catch (error) {
    return false;
  }
}
function getEnvironment() {
  if (detectIsBrowser()) {
    return Environment.BROWSER;
  }
  return Environment.NODE;
}
function getSdkName(environment, product) {
  if (product) {
    return product;
  }
  return sdkNameForEnvironment[environment];
}
var getSdkDetailsHeaders = function(product) {
  var sdkName = getSdkName(currentEnvironment, product);
  return {
    "x-moralis-platform": sdkName,
    "x-moralis-platform-version": Core.libVersion,
    "x-moralis-build-target": currentEnvironment
  };
};
var extendStatics2 = function(d, b) {
  extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics2(d, b);
};
function __extends2(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign2 = function() {
  __assign2 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var OperationRequestBuilder = (
  /** @class */
  function() {
    function OperationRequestBuilder2(operation, core2) {
      this.operation = operation;
      this.core = core2;
    }
    OperationRequestBuilder2.prototype.prepareUrl = function(baseUrl, request) {
      var _this = this;
      var _a2;
      var urlParams = this.operation.getRequestUrlParams(request, this.core);
      var urlPath = this.operation.urlPathPattern;
      for (var _i = 0, _b = (_a2 = this.operation.urlPathParamNames) !== null && _a2 !== void 0 ? _a2 : []; _i < _b.length; _i++) {
        var paramName = _b[_i];
        var paramValue = urlParams[paramName];
        if (paramValue === void 0 || paramValue === null) {
          throw new Error("Param ".concat(paramName, " is required"));
        }
        urlPath = urlPath.replace("{".concat(paramName, "}"), paramValue);
      }
      var url = "".concat(baseUrl).concat(urlPath);
      var urlSearchParams = {};
      Object.keys(urlParams).filter(function(paramName2) {
        var _a3;
        return !((_a3 = _this.operation.urlPathParamNames) === null || _a3 === void 0 ? void 0 : _a3.includes(paramName2));
      }).forEach(function(paramName2) {
        var paramValue2 = urlParams[paramName2];
        if (paramValue2 !== void 0 && paramValue2 !== null) {
          urlSearchParams[paramName2] = paramValue2;
        }
      });
      return { url, urlSearchParams };
    };
    OperationRequestBuilder2.prototype.prepareBody = function(request) {
      if (!this.operation.bodyType && !this.operation.getRequestBody) {
        return void 0;
      }
      if (!this.operation.getRequestBody) {
        throw new Error("getRequestBody is not implemented for operation ".concat(this.operation.name));
      }
      if (!this.operation.bodyParamNames) {
        throw new Error("bodyParamNames are empty for operation ".concat(this.operation.name));
      }
      var body = this.operation.getRequestBody(request, this.core);
      if (this.operation.bodyType === "properties") {
        return body;
      }
      if (this.operation.bodyType === "raw") {
        return body;
      }
      throw new Error("Not supported body type: ".concat(this.operation.bodyType));
    };
    OperationRequestBuilder2.prototype.prepareHeaders = function() {
      var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);
      var product = this.core.config.get(CoreConfig.product);
      if (!apiKey) {
        throw new MoralisApiError({
          code: ApiErrorCode.API_KEY_NOT_SET,
          message: "apiKey is not set"
        });
      }
      var headers = getSdkDetailsHeaders(product);
      headers["x-api-key"] = apiKey;
      return headers;
    };
    return OperationRequestBuilder2;
  }()
);
var OperationResolver = (
  /** @class */
  /* @__PURE__ */ function() {
    function OperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter2(_this, void 0, void 0, function() {
          var _a2, url, urlSearchParams, body, jsonResponse;
          var _this2 = this;
          return __generator2(this, function(_b) {
            switch (_b.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
                body = this.requestBuilder.prepareBody(request);
                return [4, this.requestController.request({
                  method: this.operation.method,
                  url,
                  params: urlSearchParams,
                  headers: this.requestBuilder.prepareHeaders(),
                  data: body
                })];
              case 1:
                jsonResponse = _b.sent();
                return [2, new ResponseAdapter(jsonResponse, function() {
                  return _this2.operation.deserializeResponse(jsonResponse, request, _this2.core);
                })];
            }
          });
        });
      };
      if (operation.isNullable) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
      }
    }
    return OperationResolver2;
  }()
);
function isNotFoundError(e) {
  var _a2;
  if (isMoralisError(e)) {
    if (((_a2 = e.details) === null || _a2 === void 0 ? void 0 : _a2.status) === 404) {
      return true;
    }
    if (e.code === ApiErrorCode.NOT_FOUND) {
      return true;
    }
  }
  return false;
}
var NullableOperationResolver = (
  /** @class */
  function() {
    function NullableOperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter2(_this, void 0, void 0, function() {
          var result, e_1;
          return __generator2(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2.label = 1;
              case 1:
                _a2.trys.push([1, 3, , 4]);
                return [4, this._fetch(request)];
              case 2:
                result = _a2.sent();
                if (!result.raw || typeof result.raw === "object" && Object.keys(result.raw).length === 0) {
                  throw new MoralisApiError({
                    code: ApiErrorCode.NOT_FOUND,
                    message: "The resource is not found"
                  });
                }
                return [2, result];
              case 3:
                e_1 = _a2.sent();
                if (isNotFoundError(e_1)) {
                  return [2, null];
                }
                throw e_1;
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      if (!operation.isNullable) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for isNullable property"));
      }
    }
    NullableOperationResolver2.prototype._fetch = function(request) {
      return __awaiter2(this, void 0, void 0, function() {
        var _a2, url, urlSearchParams, body, jsonResponse;
        var _this = this;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
              body = this.requestBuilder.prepareBody(request);
              return [4, this.requestController.request({
                method: this.operation.method,
                url,
                params: urlSearchParams,
                headers: this.requestBuilder.prepareHeaders(),
                data: body
              })];
            case 1:
              jsonResponse = _b.sent();
              return [2, new ResponseAdapter(jsonResponse, function() {
                return _this.operation.deserializeResponse(jsonResponse, request, _this.core);
              })];
          }
        });
      });
    };
    return NullableOperationResolver2;
  }()
);
var PaginatedOperationResolver = (
  /** @class */
  /* @__PURE__ */ function() {
    function PaginatedOperationResolver2(operation, baseUrl, core2) {
      var _this = this;
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestValidator = new OperationRequestValidator(this.operation);
      this.requestBuilder = new OperationRequestBuilder(this.operation, this.core);
      this.requestController = RequestController.create(this.core);
      this.fetch = function(request) {
        return __awaiter2(_this, void 0, void 0, function() {
          var _a2, url, urlSearchParams, body, jsonResponse, pagination, nextRequest;
          var _this2 = this;
          return __generator2(this, function(_b) {
            switch (_b.label) {
              case 0:
                this.requestValidator.validate(request);
                _a2 = this.requestBuilder.prepareUrl(this.baseUrl, request), url = _a2.url, urlSearchParams = _a2.urlSearchParams;
                body = this.requestBuilder.prepareBody(request);
                return [4, this.requestController.request({
                  method: this.operation.method,
                  url,
                  params: urlSearchParams,
                  headers: this.requestBuilder.prepareHeaders(),
                  data: body
                })];
              case 1:
                jsonResponse = _b.sent();
                pagination = PaginationReader.read(jsonResponse);
                nextRequest = NextPaginatedRequestResolver.resolve(this.operation.firstPageIndex, request, pagination);
                return [2, new PaginatedResponseAdapter(pagination, jsonResponse, function() {
                  return _this2.operation.deserializeResponse(jsonResponse, request, _this2.core);
                }, nextRequest ? function() {
                  return _this2.fetch(nextRequest);
                } : void 0)];
            }
          });
        });
      };
      if (operation.firstPageIndex !== 0 && operation.firstPageIndex !== 1) {
        throw new Error("Operation ".concat(operation.name, " has invalid value for firstPageIndex property"));
      }
    }
    return PaginatedOperationResolver2;
  }()
);
var OperationV3Resolver = (
  /** @class */
  function() {
    function OperationV3Resolver2(operation, baseUrl, core2) {
      this.operation = operation;
      this.baseUrl = baseUrl;
      this.core = core2;
      this.requestController = RequestController.create(this.core);
    }
    OperationV3Resolver2.prototype.request = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        var urlParamNames, requestJSON, url, searchParams, bodyJSON, responseJson;
        var _this = this;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              urlParamNames = this.operation.parameterNames.filter(function(name) {
                return _this.operation.routePattern.includes("{".concat(name, "}"));
              });
              requestJSON = this.operation.serializeRequest ? this.operation.serializeRequest(request) : {};
              url = urlParamNames.reduce(function(current, name) {
                var value = requestJSON[name];
                current = current.replace("{".concat(name, "}"), String(value));
                return current;
              }, this.operation.routePattern);
              searchParams = this.operation.parameterNames.filter(function(name) {
                return !urlParamNames.includes(name);
              }).reduce(function(current, name) {
                current[name] = requestJSON[name];
                return current;
              }, {});
              bodyJSON = body && this.operation.serializeBody ? this.operation.serializeBody(body) : void 0;
              return [4, this.requestController.request({
                url,
                params: searchParams,
                baseURL: this.resolveBaseUrl(request),
                method: this.operation.httpMethod,
                data: bodyJSON,
                headers: this.prepareHeaders()
              })];
            case 1:
              responseJson = _a2.sent();
              if (!responseJson || !this.operation.parseResponse) {
                if (this.operation.hasResponse) {
                  throw new Error("Expected response, but API has returned empty response");
                }
                return [2, {
                  response: null,
                  responseJson: null
                }];
              }
              return [2, {
                response: this.operation.parseResponse(responseJson),
                responseJson
              }];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.resolve = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.request(request, body)];
            case 1:
              return [2, _a2.sent().response];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.fetch = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        var data;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.request(request, body)];
            case 1:
              data = _a2.sent();
              return [2, new ResponseAdapter(data.responseJson, function() {
                return data.response;
              })];
          }
        });
      });
    };
    OperationV3Resolver2.prototype.resolveBaseUrl = function(request) {
      return typeof this.baseUrl === "string" ? this.baseUrl : this.baseUrl(request);
    };
    OperationV3Resolver2.prototype.prepareHeaders = function() {
      var apiKey = this.core.config.get(ApiUtilsConfig.apiKey);
      var product = this.core.config.get(CoreConfig.product);
      if (!apiKey) {
        throw new MoralisApiError({
          code: ApiErrorCode.API_KEY_NOT_SET,
          message: "apiKey is not set"
        });
      }
      var headers = getSdkDetailsHeaders();
      headers["x-api-key"] = "".concat(apiKey);
      headers["Authorization"] = "Bearer ".concat(apiKey);
      if (product) {
        headers["x-moralis-product"] = product;
      }
      return headers;
    };
    return OperationV3Resolver2;
  }()
);
var PaginatedResponseV3Adapter = (
  /** @class */
  function() {
    function PaginatedResponseV3Adapter2(response, json, nextHandler) {
      this.response = response;
      this.json = json;
      this.nextHandler = nextHandler;
    }
    Object.defineProperty(PaginatedResponseV3Adapter2.prototype, "result", {
      get: function() {
        if (!this.response.result) {
          throw new Error("No result");
        }
        return this.response.result;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(PaginatedResponseV3Adapter2.prototype, "pagination", {
      get: function() {
        return {
          total: this.response.total || 0,
          page: this.response.page || 0,
          pageSize: this.response.pageSize || 0,
          cursor: this.response.cursor
        };
      },
      enumerable: false,
      configurable: true
    });
    PaginatedResponseV3Adapter2.prototype.hasNext = function() {
      return !!this.nextHandler;
    };
    PaginatedResponseV3Adapter2.prototype.next = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a2) {
          if (!this.nextHandler) {
            throw new MoralisError({
              code: CoreErrorCode.NO_DATA_FOUND,
              message: "Page limit exceeded! Before call this method check an existence of the next page by .hasNext() method."
            });
          }
          return [2, this.nextHandler()];
        });
      });
    };
    PaginatedResponseV3Adapter2.prototype.raw = function() {
      return this.json;
    };
    PaginatedResponseV3Adapter2.prototype.toJSON = function() {
      return this.json;
    };
    return PaginatedResponseV3Adapter2;
  }()
);
var PaginatedOperationV3Resolver = (
  /** @class */
  function() {
    function PaginatedOperationV3Resolver2(operation, baseUrl, core2) {
      this.resolver = new OperationV3Resolver(operation, baseUrl, core2);
    }
    PaginatedOperationV3Resolver2.prototype.fetch = function(request, body) {
      return __awaiter2(this, void 0, void 0, function() {
        var data, nextHandler;
        var _this = this;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.resolver.request(request, body)];
            case 1:
              data = _a2.sent();
              nextHandler = null;
              if (data.responseJson.cursor) {
                nextHandler = function() {
                  return __awaiter2(_this, void 0, void 0, function() {
                    var nextRequest;
                    return __generator2(this, function(_a3) {
                      nextRequest = __assign2(__assign2({}, request), { cursor: data.response.cursor });
                      return [2, this.fetch(nextRequest, body)];
                    });
                  });
                };
              }
              return [2, new PaginatedResponseV3Adapter(data.response, data.responseJson, nextHandler)];
          }
        });
      });
    };
    return PaginatedOperationV3Resolver2;
  }()
);
var ApiUtilsConfigSetup = (
  /** @class */
  function() {
    function ApiUtilsConfigSetup2() {
    }
    ApiUtilsConfigSetup2.register = function(config) {
      if (!config.hasKey(ApiUtilsConfig.apiKey)) {
        config.registerKey(ApiUtilsConfig.apiKey);
      }
    };
    return ApiUtilsConfigSetup2;
  }()
);
var ApiUtils = (
  /** @class */
  function(_super) {
    __extends2(ApiUtils2, _super);
    function ApiUtils2(core2) {
      return _super.call(this, ApiUtils2.moduleName, core2) || this;
    }
    ApiUtils2.create = function(core2) {
      return new ApiUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    ApiUtils2.prototype.setup = function() {
      ApiUtilsConfigSetup.register(this.core.config);
    };
    ApiUtils2.prototype.start = function() {
    };
    ApiUtils2.moduleName = "api";
    return ApiUtils2;
  }(Module)
);

// node_modules/@moralisweb3/common-aptos-utils/lib/esm/index.js
var CommonAptosUtilsConfig = {
  defaultAptosNetwork: {
    name: "defaultAptosNetwork",
    defaultValue: "mainnet"
  }
};
var CommonAptosUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonAptosUtilsConfigSetup2() {
    }
    CommonAptosUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonAptosUtilsConfig.defaultAptosNetwork);
    };
    return CommonAptosUtilsConfigSetup2;
  }()
);
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(uint8a) {
  if (!(uint8a instanceof Uint8Array))
    throw new Error("Uint8Array expected");
  let hex = "";
  for (let i = 0; i < uint8a.length; i++) {
    hex += hexes[uint8a[i]];
  }
  return hex;
}
function hexToBytes(hex) {
  if (typeof hex !== "string") {
    throw new TypeError("hexToBytes: expected string, got " + typeof hex);
  }
  if (hex.length % 2)
    throw new Error("hexToBytes: received invalid unpadded hex");
  const array = new Uint8Array(hex.length / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
var HexString = (
  /** @class */
  function() {
    function HexString2(hexString) {
      if (hexString.startsWith("0x")) {
        this.hexString = hexString;
      } else {
        this.hexString = "0x".concat(hexString);
      }
    }
    HexString2.fromBuffer = function(buffer) {
      return HexString2.fromUint8Array(buffer);
    };
    HexString2.fromUint8Array = function(arr) {
      return new HexString2(bytesToHex(arr));
    };
    HexString2.ensure = function(hexString) {
      if (typeof hexString === "string") {
        return new HexString2(hexString);
      }
      return hexString;
    };
    HexString2.prototype.hex = function() {
      return this.hexString;
    };
    HexString2.prototype.noPrefix = function() {
      return this.hexString.slice(2);
    };
    HexString2.prototype.toString = function() {
      return this.hex();
    };
    HexString2.prototype.toShortString = function() {
      var trimmed = this.hexString.replace(/^0x0*/, "");
      return "0x".concat(trimmed);
    };
    HexString2.prototype.toUint8Array = function() {
      return Uint8Array.from(hexToBytes(this.noPrefix()));
    };
    return HexString2;
  }()
);
var AccountAddress = (
  /** @class */
  function() {
    function AccountAddress2(address) {
      if (address.length !== AccountAddress2.LENGTH) {
        throw new Error("Expected address of length 32");
      }
      this.address = address;
    }
    AccountAddress2.fromHex = function(addr) {
      var address = HexString.ensure(addr);
      if (address.noPrefix().length % 2 !== 0) {
        address = new HexString("0".concat(address.noPrefix()));
      }
      var addressBytes = address.toUint8Array();
      if (addressBytes.length > AccountAddress2.LENGTH) {
        throw new Error("Hex string is too long. Address's length is 32 bytes.");
      } else if (addressBytes.length === AccountAddress2.LENGTH) {
        return new AccountAddress2(addressBytes);
      }
      var res = new Uint8Array(AccountAddress2.LENGTH);
      res.set(addressBytes, AccountAddress2.LENGTH - addressBytes.length);
      return new AccountAddress2(res);
    };
    AccountAddress2.isValid = function(addr) {
      if (addr === "") {
        return false;
      }
      var address = HexString.ensure(addr);
      if (address.noPrefix().length % 2 !== 0) {
        address = new HexString("0".concat(address.noPrefix()));
      }
      var addressBytes = address.toUint8Array();
      return addressBytes.length <= AccountAddress2.LENGTH;
    };
    AccountAddress2.LENGTH = 32;
    AccountAddress2.CORE_CODE_ADDRESS = AccountAddress2.fromHex("0x1");
    return AccountAddress2;
  }()
);
var AptosAddress = (
  /** @class */
  function() {
    function AptosAddress2(address) {
      this.address = address;
    }
    AptosAddress2.create = function(address) {
      if (address instanceof AptosAddress2) {
        return address;
      }
      return new AptosAddress2(AptosAddress2.parse(address));
    };
    AptosAddress2.fromJSON = function(json) {
      return AptosAddress2.create(json);
    };
    AptosAddress2.parse = function(address) {
      try {
        if (!AccountAddress.isValid(address)) {
          throw new Error("Address is invalid");
        }
      } catch (e) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid address provided: ".concat(address),
          cause: e
        });
      }
      if (address.startsWith("0x")) {
        address = address.substring(2);
      }
      var addr = address.padStart(64, "0");
      return "0x".concat(addr);
    };
    AptosAddress2.prototype.format = function() {
      return this.address;
    };
    AptosAddress2.equals = function(addressA, addressB) {
      return AptosAddress2.create(addressA).equals(addressB);
    };
    AptosAddress2.prototype.equals = function(address) {
      return this.address === AptosAddress2.create(address).address;
    };
    AptosAddress2.prototype.toString = function() {
      return this.address;
    };
    AptosAddress2.prototype.toJSON = function() {
      return this.address;
    };
    Object.defineProperty(AptosAddress2.prototype, "short", {
      /**
       * @returns a string representing the address, the leading zeros are removed from the address.
       * @example address.short; // "0x1"
       */
      get: function() {
        var address = this.address.substring(2).replace(/^0+/, "");
        return "0x".concat(address);
      },
      enumerable: false,
      configurable: true
    });
    return AptosAddress2;
  }()
);
var aptosNetworkNames = ["mainnet", "testnet", "devnet"];
var aptosChainIdToNetworkNames = {
  "1": "mainnet",
  "2": "testnet"
};
var AptosNetwork = (
  /** @class */
  function() {
    function AptosNetwork2(network) {
      this.network = network;
    }
    Object.defineProperty(AptosNetwork2, "MAINNET", {
      /**
       * Returns MAINNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("mainnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNetwork2, "TESTNET", {
      /**
       * Returns TESTNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("testnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNetwork2, "DEVNET", {
      /**
       * Returns DEVNET network
       *
       * @example AptosNetwork.MAINNET
       */
      get: function() {
        return AptosNetwork2.create("devnet");
      },
      enumerable: false,
      configurable: true
    });
    AptosNetwork2.create = function(network) {
      return network instanceof AptosNetwork2 ? network : new AptosNetwork2(AptosNetwork2.parse(network));
    };
    AptosNetwork2.parse = function(network) {
      var _a2;
      if (typeof network !== "string") {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Aptos network is not supported: ".concat(network)
        });
      }
      var networkName = (_a2 = aptosChainIdToNetworkNames[network]) !== null && _a2 !== void 0 ? _a2 : network;
      if (!aptosNetworkNames.includes(networkName)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Aptos network is not supported: ".concat(network)
        });
      }
      return networkName;
    };
    AptosNetwork2.prototype.format = function() {
      return this.network;
    };
    AptosNetwork2.prototype.equals = function(network) {
      return this.network === AptosNetwork2.create(network).network;
    };
    AptosNetwork2.prototype.toJSON = function() {
      return this.network;
    };
    AptosNetwork2.prototype.toString = function() {
      return this.network;
    };
    return AptosNetwork2;
  }()
);
var unitToDecimals = {
  aptos: 8,
  octas: 0
};
var AptosNative = (
  /** @class */
  function() {
    function AptosNative2(rawValue) {
      this.rawValue = rawValue;
    }
    AptosNative2.create = function(value, unit) {
      if (value instanceof AptosNative2) {
        return value;
      }
      return new AptosNative2(AptosNative2.parse(value, unit));
    };
    AptosNative2.fromJSON = function(json) {
      return AptosNative2.create(json, "octas");
    };
    AptosNative2.parse = function(value, unit) {
      if (unit === void 0) {
        unit = "aptos";
      }
      var decimal;
      if (typeof unit === "number") {
        decimal = unit;
      } else if (unitToDecimals[unit] !== void 0) {
        decimal = unitToDecimals[unit];
      } else {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Not supported Aptos unit: ".concat(unit)
        });
      }
      return BigNumber.fromDecimal(value.toString(), decimal);
    };
    AptosNative2.equals = function(valueA, valueB) {
      var aptosNativeA = AptosNative2.create(valueA);
      var aptosNativeB = AptosNative2.create(valueB);
      return aptosNativeA.octas === aptosNativeB.octas;
    };
    AptosNative2.prototype.equals = function(value) {
      return AptosNative2.equals(this, value);
    };
    AptosNative2.prototype.format = function() {
      return this.octas;
    };
    AptosNative2.prototype.toJSON = function() {
      return this.octas;
    };
    AptosNative2.prototype.toString = function() {
      return this.octas;
    };
    Object.defineProperty(AptosNative2.prototype, "value", {
      /**
       * @returns the value of the AptosNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNative2.prototype, "aptos", {
      /**
       * Converts the AptosNative to an aptos unit.
       * @returns the value of the AptosNative as an aptos string
       * @example `native.aptos`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals["aptos"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosNative2.prototype, "octas", {
      /**
       * Converts the AptosNative to a string.
       * @returns the value of the AptosNative as a string
       * @example `native.lamports`
       */
      get: function() {
        return this.rawValue.toString();
      },
      enumerable: false,
      configurable: true
    });
    return AptosNative2;
  }()
);
var AptosNetworkResolver = (
  /** @class */
  function() {
    function AptosNetworkResolver2() {
    }
    AptosNetworkResolver2.resolve = function(network, core2) {
      if (!network) {
        network = core2.config.get(CommonAptosUtilsConfig.defaultAptosNetwork);
      }
      return AptosNetwork.create(network).network;
    };
    return AptosNetworkResolver2;
  }()
);
var extendStatics3 = function(d, b) {
  extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics3(d, b);
};
function __extends3(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var CommonAptosUtils = (
  /** @class */
  function(_super) {
    __extends3(CommonAptosUtils2, _super);
    function CommonAptosUtils2(core2) {
      return _super.call(this, CommonAptosUtils2.moduleName, core2) || this;
    }
    CommonAptosUtils2.create = function(core2) {
      return new CommonAptosUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonAptosUtils2.prototype.setup = function() {
      CommonAptosUtilsConfigSetup.register(this.core.config);
    };
    CommonAptosUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosAddress", {
      get: function() {
        return AptosAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosNative", {
      get: function() {
        return AptosNative;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonAptosUtils2.prototype, "AptosNetwork", {
      get: function() {
        return AptosNetwork;
      },
      enumerable: false,
      configurable: true
    });
    CommonAptosUtils2.moduleName = "aptosUtils";
    return CommonAptosUtils2;
  }(Module)
);
var AptosNFTTokenResponseDefaultProperties = (
  /** @class */
  function() {
    function AptosNFTTokenResponseDefaultProperties2() {
    }
    AptosNFTTokenResponseDefaultProperties2.create = function(input) {
      return input;
    };
    AptosNFTTokenResponseDefaultProperties2.fromJSON = function(json) {
      return json;
    };
    return AptosNFTTokenResponseDefaultProperties2;
  }()
);
var AptosNFTTokenResponse = (
  /** @class */
  function() {
    function AptosNFTTokenResponse2(input) {
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.defaultProperties = AptosNFTTokenResponseDefaultProperties.create(input.defaultProperties);
      this.description = input.description;
      this.descriptionMutable = input.descriptionMutable;
      this.largestPropertyVersion = input.largestPropertyVersion;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.maximum = input.maximum;
      this.maximumMutable = input.maximumMutable;
      this.metadataUri = input.metadataUri;
      this.name = input.name;
      this.payeeAddress = AptosAddress.create(input.payeeAddress);
      this.propertiesMutable = input.propertiesMutable;
      this.royaltyMutable = input.royaltyMutable;
      this.royaltyPointsDenominator = input.royaltyPointsDenominator;
      this.royaltyPointsNumerator = input.royaltyPointsNumerator;
      this.supply = input.supply;
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.uriMutable = input.uriMutable;
    }
    AptosNFTTokenResponse2.create = function(input) {
      if (input instanceof AptosNFTTokenResponse2) {
        return input;
      }
      return new AptosNFTTokenResponse2(input);
    };
    AptosNFTTokenResponse2.fromJSON = function(json) {
      var input = {
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        defaultProperties: AptosNFTTokenResponseDefaultProperties.fromJSON(json.default_properties),
        description: json.description,
        descriptionMutable: json.description_mutable,
        largestPropertyVersion: json.largest_property_version,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        maximum: json.maximum,
        maximumMutable: json.maximum_mutable,
        metadataUri: json.metadata_uri,
        name: json.name,
        payeeAddress: AptosAddress.fromJSON(json.payee_address),
        propertiesMutable: json.properties_mutable,
        royaltyMutable: json.royalty_mutable,
        royaltyPointsDenominator: json.royalty_points_denominator,
        royaltyPointsNumerator: json.royalty_points_numerator,
        supply: json.supply,
        tokenDataIdHash: json.token_data_id_hash,
        uriMutable: json.uri_mutable
      };
      return AptosNFTTokenResponse2.create(input);
    };
    AptosNFTTokenResponse2.prototype.toJSON = function() {
      return {
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        default_properties: this.defaultProperties,
        description: this.description,
        description_mutable: this.descriptionMutable,
        largest_property_version: this.largestPropertyVersion,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        maximum: this.maximum,
        maximum_mutable: this.maximumMutable,
        metadata_uri: this.metadataUri,
        name: this.name,
        payee_address: this.payeeAddress.toJSON(),
        properties_mutable: this.propertiesMutable,
        royalty_mutable: this.royaltyMutable,
        royalty_points_denominator: this.royaltyPointsDenominator,
        royalty_points_numerator: this.royaltyPointsNumerator,
        supply: this.supply,
        token_data_id_hash: this.tokenDataIdHash,
        uri_mutable: this.uriMutable
      };
    };
    return AptosNFTTokenResponse2;
  }()
);
var GetNFTsByIdsOperation = {
  operationId: "getNFTsByIds",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts",
  parameterNames: ["token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosNFTTokenResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTokensByCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTTokensByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTokenResponse.create(item);
      });
    }
    AptosNFTTokensByCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTTokensByCollectionResponse2) {
        return input;
      }
      return new AptosNFTTokensByCollectionResponse2(input);
    };
    AptosNFTTokensByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTokenResponse.fromJSON(item);
        })
      };
      return AptosNFTTokensByCollectionResponse2.create(input);
    };
    AptosNFTTokensByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTokensByCollectionResponse2;
  }()
);
var GetNFTsByCollectionOperation = {
  operationId: "getNFTsByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/tokens",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTokensByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTokensByCreatorsResponse = (
  /** @class */
  function() {
    function AptosNFTTokensByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTokenResponse.create(item);
      });
    }
    AptosNFTTokensByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosNFTTokensByCreatorsResponse2) {
        return input;
      }
      return new AptosNFTTokensByCreatorsResponse2(input);
    };
    AptosNFTTokensByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTokenResponse.fromJSON(item);
        })
      };
      return AptosNFTTokensByCreatorsResponse2.create(input);
    };
    AptosNFTTokensByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTokensByCreatorsResponse2;
  }()
);
var GetNFTsByCreatorsOperation = {
  operationId: "getNFTsByCreators",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTokensByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTCollectionItemResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionItemResponse2(input) {
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.description = input.description;
      this.descriptionMutable = input.descriptionMutable;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.maximum = input.maximum;
      this.maximumMutable = input.maximumMutable;
      this.metadataUri = input.metadataUri;
      this.supply = input.supply;
      this.tableHandle = input.tableHandle;
      this.uriMutable = input.uriMutable;
    }
    AptosNFTCollectionItemResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionItemResponse2) {
        return input;
      }
      return new AptosNFTCollectionItemResponse2(input);
    };
    AptosNFTCollectionItemResponse2.fromJSON = function(json) {
      var input = {
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        description: json.description,
        descriptionMutable: json.description_mutable,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        maximum: json.maximum,
        maximumMutable: json.maximum_mutable,
        metadataUri: json.metadata_uri,
        supply: json.supply,
        tableHandle: json.table_handle,
        uriMutable: json.uri_mutable
      };
      return AptosNFTCollectionItemResponse2.create(input);
    };
    AptosNFTCollectionItemResponse2.prototype.toJSON = function() {
      return {
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        description: this.description,
        description_mutable: this.descriptionMutable,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        maximum: this.maximum,
        maximum_mutable: this.maximumMutable,
        metadata_uri: this.metadataUri,
        supply: this.supply,
        table_handle: this.tableHandle,
        uri_mutable: this.uriMutable
      };
    };
    return AptosNFTCollectionItemResponse2;
  }()
);
var AptosNFTCollectionsByNameRangeResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionsByNameRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTCollectionItemResponse.create(item);
      });
    }
    AptosNFTCollectionsByNameRangeResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionsByNameRangeResponse2) {
        return input;
      }
      return new AptosNFTCollectionsByNameRangeResponse2(input);
    };
    AptosNFTCollectionsByNameRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTCollectionItemResponse.fromJSON(item);
        })
      };
      return AptosNFTCollectionsByNameRangeResponse2.create(input);
    };
    AptosNFTCollectionsByNameRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTCollectionsByNameRangeResponse2;
  }()
);
var GetNFTCollectionsOperation = {
  operationId: "getNFTCollections",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections",
  parameterNames: ["limit", "offset", "cursor", "fromName", "toName", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTCollectionsByNameRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromName = request.fromName;
    var toName = request.toName;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      fromName,
      toName,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetNFTCollectionsByIdsOperation = {
  operationId: "getNFTCollectionsByIds",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections/ids",
  parameterNames: ["ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosNFTCollectionItemResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var ids = request.ids;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      ids,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTCollectionsByCreatorResponse = (
  /** @class */
  function() {
    function AptosNFTCollectionsByCreatorResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTCollectionItemResponse.create(item);
      });
    }
    AptosNFTCollectionsByCreatorResponse2.create = function(input) {
      if (input instanceof AptosNFTCollectionsByCreatorResponse2) {
        return input;
      }
      return new AptosNFTCollectionsByCreatorResponse2(input);
    };
    AptosNFTCollectionsByCreatorResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTCollectionItemResponse.fromJSON(item);
        })
      };
      return AptosNFTCollectionsByCreatorResponse2.create(input);
    };
    AptosNFTCollectionsByCreatorResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTCollectionsByCreatorResponse2;
  }()
);
var GetNFTCollectionsByCreatorOperation = {
  operationId: "getNFTCollectionsByCreator",
  groupName: "collections",
  httpMethod: "get",
  routePattern: "/collections/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_address", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTCollectionsByCreatorResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddress = AptosAddress.create(request.creatorAddress);
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_address: creatorAddress.toJSON(),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnerResponseTokenProperties = (
  /** @class */
  function() {
    function AptosNFTOwnerResponseTokenProperties2() {
    }
    AptosNFTOwnerResponseTokenProperties2.create = function(input) {
      return input;
    };
    AptosNFTOwnerResponseTokenProperties2.fromJSON = function(json) {
      return json;
    };
    return AptosNFTOwnerResponseTokenProperties2;
  }()
);
var AptosNFTOwnerResponse = (
  /** @class */
  function() {
    function AptosNFTOwnerResponse2(input) {
      this.amount = AptosNative.create(input.amount);
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.name = input.name;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
      this.propertyVersion = input.propertyVersion;
      this.tableType = input.tableType;
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.tokenProperties = AptosNFTOwnerResponseTokenProperties.create(input.tokenProperties);
    }
    AptosNFTOwnerResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnerResponse2) {
        return input;
      }
      return new AptosNFTOwnerResponse2(input);
    };
    AptosNFTOwnerResponse2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        name: json.name,
        ownerAddress: AptosAddress.fromJSON(json.owner_address),
        propertyVersion: json.property_version,
        tableType: json.table_type,
        tokenDataIdHash: json.token_data_id_hash,
        tokenProperties: AptosNFTOwnerResponseTokenProperties.fromJSON(json.token_properties)
      };
      return AptosNFTOwnerResponse2.create(input);
    };
    AptosNFTOwnerResponse2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        name: this.name,
        owner_address: this.ownerAddress.toJSON(),
        property_version: this.propertyVersion,
        table_type: this.tableType,
        token_data_id_hash: this.tokenDataIdHash,
        token_properties: this.tokenProperties
      };
    };
    return AptosNFTOwnerResponse2;
  }()
);
var AptosNFTOwnersByTokensResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersByTokensResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTOwnersByTokensResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersByTokensResponse2) {
        return input;
      }
      return new AptosNFTOwnersByTokensResponse2(input);
    };
    AptosNFTOwnersByTokensResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTOwnersByTokensResponse2.create(input);
    };
    AptosNFTOwnersByTokensResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTOwnersByTokensResponse2;
  }()
);
var GetNFTOwnersByTokensOperation = {
  operationId: "getNFTOwnersByTokens",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/owners",
  parameterNames: ["limit", "offset", "cursor", "token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersByTokensResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnersByCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTOwnersByCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersByCollectionResponse2) {
        return input;
      }
      return new AptosNFTOwnersByCollectionResponse2(input);
    };
    AptosNFTOwnersByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTOwnersByCollectionResponse2.create(input);
    };
    AptosNFTOwnersByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTOwnersByCollectionResponse2;
  }()
);
var GetNFTOwnersByCollectionOperation = {
  operationId: "getNFTOwnersByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/owners",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "wallet_blacklist", "wallet_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTOwnersOfCollectionResponse = (
  /** @class */
  function() {
    function AptosNFTOwnersOfCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result;
    }
    AptosNFTOwnersOfCollectionResponse2.create = function(input) {
      if (input instanceof AptosNFTOwnersOfCollectionResponse2) {
        return input;
      }
      return new AptosNFTOwnersOfCollectionResponse2(input);
    };
    AptosNFTOwnersOfCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result
      };
      return AptosNFTOwnersOfCollectionResponse2.create(input);
    };
    AptosNFTOwnersOfCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result
      };
    };
    return AptosNFTOwnersOfCollectionResponse2;
  }()
);
var GetNFTOwnersOfCollectionOperation = {
  operationId: "getNFTOwnersOfCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/collections/{collection_data_id_hash}/owners/list",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTOwnersOfCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTransferResponse = (
  /** @class */
  function() {
    function AptosNFTTransferResponse2(input) {
      this.coinAmount = input.coinAmount ? AptosNative.create(input.coinAmount) : void 0;
      this.coinType = input.coinType;
      this.collectionDataIdHash = input.collectionDataIdHash;
      this.collectionName = input.collectionName;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.eventAccountAddress = input.eventAccountAddress;
      this.eventCreationNumber = input.eventCreationNumber;
      this.eventSequenceNumber = input.eventSequenceNumber;
      this.fromAddress = input.fromAddress ? AptosAddress.create(input.fromAddress) : void 0;
      this.name = input.name;
      this.propertyVersion = input.propertyVersion;
      this.toAddress = input.toAddress ? AptosAddress.create(input.toAddress) : void 0;
      this.tokenAmount = AptosNative.create(input.tokenAmount);
      this.tokenDataIdHash = input.tokenDataIdHash;
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
      this.transferType = input.transferType;
    }
    AptosNFTTransferResponse2.create = function(input) {
      if (input instanceof AptosNFTTransferResponse2) {
        return input;
      }
      return new AptosNFTTransferResponse2(input);
    };
    AptosNFTTransferResponse2.fromJSON = function(json) {
      var input = {
        coinAmount: json.coin_amount ? AptosNative.fromJSON(json.coin_amount) : void 0,
        coinType: json.coin_type,
        collectionDataIdHash: json.collection_data_id_hash,
        collectionName: json.collection_name,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        eventAccountAddress: json.event_account_address,
        eventCreationNumber: json.event_creation_number,
        eventSequenceNumber: json.event_sequence_number,
        fromAddress: json.from_address ? AptosAddress.fromJSON(json.from_address) : void 0,
        name: json.name,
        propertyVersion: json.property_version,
        toAddress: json.to_address ? AptosAddress.fromJSON(json.to_address) : void 0,
        tokenAmount: AptosNative.fromJSON(json.token_amount),
        tokenDataIdHash: json.token_data_id_hash,
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version,
        transferType: json.transfer_type
      };
      return AptosNFTTransferResponse2.create(input);
    };
    AptosNFTTransferResponse2.prototype.toJSON = function() {
      return {
        coin_amount: this.coinAmount ? this.coinAmount.toJSON() : void 0,
        coin_type: this.coinType,
        collection_data_id_hash: this.collectionDataIdHash,
        collection_name: this.collectionName,
        creator_address: this.creatorAddress.toJSON(),
        event_account_address: this.eventAccountAddress,
        event_creation_number: this.eventCreationNumber,
        event_sequence_number: this.eventSequenceNumber,
        from_address: this.fromAddress ? this.fromAddress.toJSON() : void 0,
        name: this.name,
        property_version: this.propertyVersion,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        token_amount: this.tokenAmount.toJSON(),
        token_data_id_hash: this.tokenDataIdHash,
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion,
        transfer_type: this.transferType
      };
    };
    return AptosNFTTransferResponse2;
  }()
);
var AptosNFTTransfersByTokensResponse = (
  /** @class */
  function() {
    function AptosNFTTransfersByTokensResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosNFTTransfersByTokensResponse2.create = function(input) {
      if (input instanceof AptosNFTTransfersByTokensResponse2) {
        return input;
      }
      return new AptosNFTTransfersByTokensResponse2(input);
    };
    AptosNFTTransfersByTokensResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosNFTTransfersByTokensResponse2.create(input);
    };
    AptosNFTTransfersByTokensResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTransfersByTokensResponse2;
  }()
);
var GetNFTTransfersByIdsOperation = {
  operationId: "getNFTTransfersByIds",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers",
  parameterNames: ["limit", "offset", "cursor", "wallet_blacklist", "wallet_whitelist", "token_ids", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByTokensResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var tokenIds = request.tokenIds;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      token_ids: tokenIds,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetNFTTransfersByCollectionResponse = (
  /** @class */
  function() {
    function AptosGetNFTTransfersByCollectionResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosGetNFTTransfersByCollectionResponse2.create = function(input) {
      if (input instanceof AptosGetNFTTransfersByCollectionResponse2) {
        return input;
      }
      return new AptosGetNFTTransfersByCollectionResponse2(input);
    };
    AptosGetNFTTransfersByCollectionResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosGetNFTTransfersByCollectionResponse2.create(input);
    };
    AptosGetNFTTransfersByCollectionResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetNFTTransfersByCollectionResponse2;
  }()
);
var GetNFTTransfersByCollectionOperation = {
  operationId: "getNFTTransfersByCollection",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/collections/{collection_data_id_hash}",
  parameterNames: ["collection_data_id_hash", "limit", "offset", "cursor", "wallet_whitelist", "wallet_blacklist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetNFTTransfersByCollectionResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var collectionDataIdHash = request.collectionDataIdHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletWhitelist = request.walletWhitelist;
    var walletBlacklist = request.walletBlacklist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      collection_data_id_hash: collectionDataIdHash,
      limit,
      offset,
      cursor,
      wallet_whitelist: walletWhitelist,
      wallet_blacklist: walletBlacklist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetNFTTransfersByCreatorsResponse = (
  /** @class */
  function() {
    function AptosGetNFTTransfersByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosGetNFTTransfersByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosGetNFTTransfersByCreatorsResponse2) {
        return input;
      }
      return new AptosGetNFTTransfersByCreatorsResponse2(input);
    };
    AptosGetNFTTransfersByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosGetNFTTransfersByCreatorsResponse2.create(input);
    };
    AptosGetNFTTransfersByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetNFTTransfersByCreatorsResponse2;
  }()
);
var GetNFTTransfersByCreatorsOperation = {
  operationId: "getNFTTransfersByCreators",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetNFTTransfersByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTTransfersByWalletsResponse = (
  /** @class */
  function() {
    function AptosNFTTransfersByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTTransferResponse.create(item);
      });
    }
    AptosNFTTransfersByWalletsResponse2.create = function(input) {
      if (input instanceof AptosNFTTransfersByWalletsResponse2) {
        return input;
      }
      return new AptosNFTTransfersByWalletsResponse2(input);
    };
    AptosNFTTransfersByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTTransferResponse.fromJSON(item);
        })
      };
      return AptosNFTTransfersByWalletsResponse2.create(input);
    };
    AptosNFTTransfersByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTTransfersByWalletsResponse2;
  }()
);
var GetNFTTransfersByWalletsOperation = {
  operationId: "getNFTTransfersByWallets",
  groupName: "nfts",
  httpMethod: "get",
  routePattern: "/nfts/transfers/wallets",
  parameterNames: ["limit", "offset", "cursor", "wallet_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletAddresses = request.walletAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_addresses: walletAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCoinInfoDto = (
  /** @class */
  function() {
    function AptosCoinInfoDto2(input) {
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.creatorAddress = AptosAddress.create(input.creatorAddress);
      this.decimals = input.decimals;
      this.name = input.name;
      this.supplyAggregatorTableHandle = input.supplyAggregatorTableHandle;
      this.supplyAggregatorTableKey = input.supplyAggregatorTableKey;
      this.symbol = input.symbol;
      this.transactionCreatedTimestamp = input.transactionCreatedTimestamp;
      this.transactionVersionCreated = input.transactionVersionCreated;
    }
    AptosCoinInfoDto2.create = function(input) {
      if (input instanceof AptosCoinInfoDto2) {
        return input;
      }
      return new AptosCoinInfoDto2(input);
    };
    AptosCoinInfoDto2.fromJSON = function(json) {
      var input = {
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        creatorAddress: AptosAddress.fromJSON(json.creator_address),
        decimals: json.decimals,
        name: json.name,
        supplyAggregatorTableHandle: json.supply_aggregator_table_handle,
        supplyAggregatorTableKey: json.supply_aggregator_table_key,
        symbol: json.symbol,
        transactionCreatedTimestamp: json.transaction_created_timestamp,
        transactionVersionCreated: json.transaction_version_created
      };
      return AptosCoinInfoDto2.create(input);
    };
    AptosCoinInfoDto2.prototype.toJSON = function() {
      return {
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        creator_address: this.creatorAddress.toJSON(),
        decimals: this.decimals,
        name: this.name,
        supply_aggregator_table_handle: this.supplyAggregatorTableHandle,
        supply_aggregator_table_key: this.supplyAggregatorTableKey,
        symbol: this.symbol,
        transaction_created_timestamp: this.transactionCreatedTimestamp,
        transaction_version_created: this.transactionVersionCreated
      };
    };
    return AptosCoinInfoDto2;
  }()
);
var GetCoinInfoByCoinTypeHashesOperation = {
  operationId: "getCoinInfoByCoinTypeHashes",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins",
  parameterNames: ["coin_type_hashes", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosCoinInfoDto.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var coinTypeHashes = request.coinTypeHashes;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type_hashes: coinTypeHashes,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetLatestCoinsResponse = (
  /** @class */
  function() {
    function AptosGetLatestCoinsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetLatestCoinsResponse2.create = function(input) {
      if (input instanceof AptosGetLatestCoinsResponse2) {
        return input;
      }
      return new AptosGetLatestCoinsResponse2(input);
    };
    AptosGetLatestCoinsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetLatestCoinsResponse2.create(input);
    };
    AptosGetLatestCoinsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetLatestCoinsResponse2;
  }()
);
var GetLatestCoinsOperation = {
  operationId: "getLatestCoins",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/latest",
  parameterNames: ["limit", "offset", "cursor", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetLatestCoinsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsByNameRangeResponse = (
  /** @class */
  function() {
    function AptosGetCoinsByNameRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsByNameRangeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsByNameRangeResponse2) {
        return input;
      }
      return new AptosGetCoinsByNameRangeResponse2(input);
    };
    AptosGetCoinsByNameRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsByNameRangeResponse2.create(input);
    };
    AptosGetCoinsByNameRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsByNameRangeResponse2;
  }()
);
var GetCoinsByNameRangeOperation = {
  operationId: "getCoinsByNameRange",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/names",
  parameterNames: ["limit", "offset", "cursor", "from_name", "to_name", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsByNameRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromName = request.fromName;
    var toName = request.toName;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      from_name: fromName,
      to_name: toName,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsBySymbolRangeResponse = (
  /** @class */
  function() {
    function AptosGetCoinsBySymbolRangeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsBySymbolRangeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsBySymbolRangeResponse2) {
        return input;
      }
      return new AptosGetCoinsBySymbolRangeResponse2(input);
    };
    AptosGetCoinsBySymbolRangeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsBySymbolRangeResponse2.create(input);
    };
    AptosGetCoinsBySymbolRangeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsBySymbolRangeResponse2;
  }()
);
var GetCoinsBySymbolRangeOperation = {
  operationId: "getCoinsBySymbolRange",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/symbols",
  parameterNames: ["limit", "offset", "cursor", "from_symbol", "to_symbol", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsBySymbolRangeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromSymbol = request.fromSymbol;
    var toSymbol = request.toSymbol;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      from_symbol: fromSymbol,
      to_symbol: toSymbol,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinsByCreatorsResponse = (
  /** @class */
  function() {
    function AptosGetCoinsByCreatorsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinInfoDto.create(item);
      });
    }
    AptosGetCoinsByCreatorsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinsByCreatorsResponse2) {
        return input;
      }
      return new AptosGetCoinsByCreatorsResponse2(input);
    };
    AptosGetCoinsByCreatorsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinInfoDto.fromJSON(item);
        })
      };
      return AptosGetCoinsByCreatorsResponse2.create(input);
    };
    AptosGetCoinsByCreatorsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinsByCreatorsResponse2;
  }()
);
var GetCoinsByCreatorsOperation = {
  operationId: "getCoinsByCreators",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/creators",
  parameterNames: ["limit", "offset", "cursor", "creator_addresses", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinsByCreatorsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var creatorAddresses = request.creatorAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      creator_addresses: creatorAddresses.map(function(item) {
        return item.toJSON();
      }),
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCoinTransferDto = (
  /** @class */
  function() {
    function AptosCoinTransferDto2(input) {
      this.activityType = input.activityType;
      this.amount = AptosNative.create(input.amount);
      this.blockHeight = input.blockHeight;
      this.coinType = input.coinType;
      this.entryFunctionIdStr = input.entryFunctionIdStr;
      this.eventAccountAddress = input.eventAccountAddress;
      this.eventCreationNumber = input.eventCreationNumber;
      this.eventSequenceNumber = input.eventSequenceNumber;
      this.isGasFee = input.isGasFee;
      this.isTransactionSuccess = input.isTransactionSuccess;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
    }
    AptosCoinTransferDto2.create = function(input) {
      if (input instanceof AptosCoinTransferDto2) {
        return input;
      }
      return new AptosCoinTransferDto2(input);
    };
    AptosCoinTransferDto2.fromJSON = function(json) {
      var input = {
        activityType: json.activity_type,
        amount: AptosNative.fromJSON(json.amount),
        blockHeight: json.block_height,
        coinType: json.coin_type,
        entryFunctionIdStr: json.entry_function_id_str,
        eventAccountAddress: json.event_account_address,
        eventCreationNumber: json.event_creation_number,
        eventSequenceNumber: json.event_sequence_number,
        isGasFee: json.is_gas_fee,
        isTransactionSuccess: json.is_transaction_success,
        ownerAddress: AptosAddress.fromJSON(json.owner_address),
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version
      };
      return AptosCoinTransferDto2.create(input);
    };
    AptosCoinTransferDto2.prototype.toJSON = function() {
      return {
        activity_type: this.activityType,
        amount: this.amount.toJSON(),
        block_height: this.blockHeight,
        coin_type: this.coinType,
        entry_function_id_str: this.entryFunctionIdStr,
        event_account_address: this.eventAccountAddress,
        event_creation_number: this.eventCreationNumber,
        event_sequence_number: this.eventSequenceNumber,
        is_gas_fee: this.isGasFee,
        is_transaction_success: this.isTransactionSuccess,
        owner_address: this.ownerAddress.toJSON(),
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion
      };
    };
    return AptosCoinTransferDto2;
  }()
);
var AptosGetCoinTransfersByOwnerAddressesResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByOwnerAddressesResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByOwnerAddressesResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByOwnerAddressesResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByOwnerAddressesResponse2(input);
    };
    AptosGetCoinTransfersByOwnerAddressesResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByOwnerAddressesResponse2.create(input);
    };
    AptosGetCoinTransfersByOwnerAddressesResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByOwnerAddressesResponse2;
  }()
);
var GetCoinTransfersByOwnerAddressesOperation = {
  operationId: "getCoinTransfersByOwnerAddresses",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/wallets",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "from_date", "to_date", "coin_type_blacklist", "coin_type_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var coinTypeBlacklist = request.coinTypeBlacklist;
    var coinTypeWhitelist = request.coinTypeWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      from_date: fromDate,
      to_date: toDate,
      coin_type_blacklist: coinTypeBlacklist,
      coin_type_whitelist: coinTypeWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinTransfersByBlockHeightsResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByBlockHeightsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByBlockHeightsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByBlockHeightsResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByBlockHeightsResponse2(input);
    };
    AptosGetCoinTransfersByBlockHeightsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByBlockHeightsResponse2.create(input);
    };
    AptosGetCoinTransfersByBlockHeightsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByBlockHeightsResponse2;
  }()
);
var GetCoinTransfersByBlockHeightsOperation = {
  operationId: "getCoinTransfersByBlockHeights",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/blocks",
  parameterNames: ["limit", "offset", "cursor", "block_heights", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByBlockHeightsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var blockHeights = request.blockHeights;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      block_heights: blockHeights,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinTransfersByCoinTypeResponse = (
  /** @class */
  function() {
    function AptosGetCoinTransfersByCoinTypeResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCoinTransferDto.create(item);
      });
    }
    AptosGetCoinTransfersByCoinTypeResponse2.create = function(input) {
      if (input instanceof AptosGetCoinTransfersByCoinTypeResponse2) {
        return input;
      }
      return new AptosGetCoinTransfersByCoinTypeResponse2(input);
    };
    AptosGetCoinTransfersByCoinTypeResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCoinTransferDto.fromJSON(item);
        })
      };
      return AptosGetCoinTransfersByCoinTypeResponse2.create(input);
    };
    AptosGetCoinTransfersByCoinTypeResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinTransfersByCoinTypeResponse2;
  }()
);
var GetCoinTransfersByCoinTypeOperation = {
  operationId: "getCoinTransfersByCoinType",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/transfers/{coin_type}",
  parameterNames: ["coin_type", "limit", "offset", "cursor", "from_date", "to_date", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByCoinTypeResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var coinType = request.coinType;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type: coinType,
      limit,
      offset,
      cursor,
      from_date: fromDate,
      to_date: toDate,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosCurrentCoinBalanceDto = (
  /** @class */
  function() {
    function AptosCurrentCoinBalanceDto2(input) {
      this.amount = AptosNative.create(input.amount);
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.lastTransactionTimestamp = input.lastTransactionTimestamp;
      this.lastTransactionVersion = input.lastTransactionVersion;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
    }
    AptosCurrentCoinBalanceDto2.create = function(input) {
      if (input instanceof AptosCurrentCoinBalanceDto2) {
        return input;
      }
      return new AptosCurrentCoinBalanceDto2(input);
    };
    AptosCurrentCoinBalanceDto2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        lastTransactionTimestamp: json.last_transaction_timestamp,
        lastTransactionVersion: json.last_transaction_version,
        ownerAddress: AptosAddress.fromJSON(json.owner_address)
      };
      return AptosCurrentCoinBalanceDto2.create(input);
    };
    AptosCurrentCoinBalanceDto2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        last_transaction_timestamp: this.lastTransactionTimestamp,
        last_transaction_version: this.lastTransactionVersion,
        owner_address: this.ownerAddress.toJSON()
      };
    };
    return AptosCurrentCoinBalanceDto2;
  }()
);
var AptosGetTopHoldersByCoinResponse = (
  /** @class */
  function() {
    function AptosGetTopHoldersByCoinResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCurrentCoinBalanceDto.create(item);
      });
    }
    AptosGetTopHoldersByCoinResponse2.create = function(input) {
      if (input instanceof AptosGetTopHoldersByCoinResponse2) {
        return input;
      }
      return new AptosGetTopHoldersByCoinResponse2(input);
    };
    AptosGetTopHoldersByCoinResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCurrentCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetTopHoldersByCoinResponse2.create(input);
    };
    AptosGetTopHoldersByCoinResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetTopHoldersByCoinResponse2;
  }()
);
var GetTopHoldersByCoinOperation = {
  operationId: "getTopHoldersByCoin",
  groupName: "coins",
  httpMethod: "get",
  routePattern: "/coins/owners/{coin_type_hash}/top-holders",
  parameterNames: ["coin_type_hash", "limit", "offset", "cursor", "min_amount", "min_version", "wallet_blacklist", "wallet_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTopHoldersByCoinResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var coinTypeHash = request.coinTypeHash;
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var minAmount = request.minAmount ? AptosNative.create(request.minAmount) : void 0;
    var minVersion = request.minVersion;
    var walletBlacklist = request.walletBlacklist;
    var walletWhitelist = request.walletWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      coin_type_hash: coinTypeHash,
      limit,
      offset,
      cursor,
      min_amount: minAmount ? minAmount.toJSON() : void 0,
      min_version: minVersion,
      wallet_blacklist: walletBlacklist,
      wallet_whitelist: walletWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetCoinBalancesByWalletsResponse = (
  /** @class */
  function() {
    function AptosGetCoinBalancesByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosCurrentCoinBalanceDto.create(item);
      });
    }
    AptosGetCoinBalancesByWalletsResponse2.create = function(input) {
      if (input instanceof AptosGetCoinBalancesByWalletsResponse2) {
        return input;
      }
      return new AptosGetCoinBalancesByWalletsResponse2(input);
    };
    AptosGetCoinBalancesByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosCurrentCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetCoinBalancesByWalletsResponse2.create(input);
    };
    AptosGetCoinBalancesByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetCoinBalancesByWalletsResponse2;
  }()
);
var GetCoinBalancesByWalletsOperation = {
  operationId: "getCoinBalancesByWallets",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "coin_type_hash_blacklist", "coin_type_hash_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinBalancesByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var coinTypeHashBlacklist = request.coinTypeHashBlacklist;
    var coinTypeHashWhitelist = request.coinTypeHashWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      coin_type_hash_blacklist: coinTypeHashBlacklist,
      coin_type_hash_whitelist: coinTypeHashWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosHistoricalCoinBalanceDto = (
  /** @class */
  function() {
    function AptosHistoricalCoinBalanceDto2(input) {
      this.amount = AptosNative.create(input.amount);
      this.coinType = input.coinType;
      this.coinTypeHash = input.coinTypeHash;
      this.transactionTimestamp = input.transactionTimestamp;
      this.transactionVersion = input.transactionVersion;
      this.ownerAddress = AptosAddress.create(input.ownerAddress);
    }
    AptosHistoricalCoinBalanceDto2.create = function(input) {
      if (input instanceof AptosHistoricalCoinBalanceDto2) {
        return input;
      }
      return new AptosHistoricalCoinBalanceDto2(input);
    };
    AptosHistoricalCoinBalanceDto2.fromJSON = function(json) {
      var input = {
        amount: AptosNative.fromJSON(json.amount),
        coinType: json.coin_type,
        coinTypeHash: json.coin_type_hash,
        transactionTimestamp: json.transaction_timestamp,
        transactionVersion: json.transaction_version,
        ownerAddress: AptosAddress.fromJSON(json.owner_address)
      };
      return AptosHistoricalCoinBalanceDto2.create(input);
    };
    AptosHistoricalCoinBalanceDto2.prototype.toJSON = function() {
      return {
        amount: this.amount.toJSON(),
        coin_type: this.coinType,
        coin_type_hash: this.coinTypeHash,
        transaction_timestamp: this.transactionTimestamp,
        transaction_version: this.transactionVersion,
        owner_address: this.ownerAddress.toJSON()
      };
    };
    return AptosHistoricalCoinBalanceDto2;
  }()
);
var AptosGetHistoricalCoinBalancesByWalletsResponse = (
  /** @class */
  function() {
    function AptosGetHistoricalCoinBalancesByWalletsResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosHistoricalCoinBalanceDto.create(item);
      });
    }
    AptosGetHistoricalCoinBalancesByWalletsResponse2.create = function(input) {
      if (input instanceof AptosGetHistoricalCoinBalancesByWalletsResponse2) {
        return input;
      }
      return new AptosGetHistoricalCoinBalancesByWalletsResponse2(input);
    };
    AptosGetHistoricalCoinBalancesByWalletsResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosHistoricalCoinBalanceDto.fromJSON(item);
        })
      };
      return AptosGetHistoricalCoinBalancesByWalletsResponse2.create(input);
    };
    AptosGetHistoricalCoinBalancesByWalletsResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGetHistoricalCoinBalancesByWalletsResponse2;
  }()
);
var GetHistoricalCoinBalancesByWalletsOperation = {
  operationId: "getHistoricalCoinBalancesByWallets",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins/history",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "coin_type_hash_blacklist", "coin_type_hash_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetHistoricalCoinBalancesByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var coinTypeHashBlacklist = request.coinTypeHashBlacklist;
    var coinTypeHashWhitelist = request.coinTypeHashWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      coin_type_hash_blacklist: coinTypeHashBlacklist,
      coin_type_hash_whitelist: coinTypeHashWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetCoinTransfersByWalletAddressesOperation = {
  operationId: "getCoinTransfersByWalletAddresses",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/coins/transfers",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "from_date", "to_date", "coin_type_blacklist", "coin_type_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetCoinTransfersByOwnerAddressesResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var coinTypeBlacklist = request.coinTypeBlacklist;
    var coinTypeWhitelist = request.coinTypeWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      from_date: fromDate,
      to_date: toDate,
      coin_type_blacklist: coinTypeBlacklist,
      coin_type_whitelist: coinTypeWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosNFTsByOwnersResponse = (
  /** @class */
  function() {
    function AptosNFTsByOwnersResponse2(input) {
      this.cursor = input.cursor;
      this.hasNextPage = input.hasNextPage;
      this.result = input.result.map(function(item) {
        return AptosNFTOwnerResponse.create(item);
      });
    }
    AptosNFTsByOwnersResponse2.create = function(input) {
      if (input instanceof AptosNFTsByOwnersResponse2) {
        return input;
      }
      return new AptosNFTsByOwnersResponse2(input);
    };
    AptosNFTsByOwnersResponse2.fromJSON = function(json) {
      var input = {
        cursor: json.cursor,
        hasNextPage: json.hasNextPage,
        result: json.result.map(function(item) {
          return AptosNFTOwnerResponse.fromJSON(item);
        })
      };
      return AptosNFTsByOwnersResponse2.create(input);
    };
    AptosNFTsByOwnersResponse2.prototype.toJSON = function() {
      return {
        cursor: this.cursor,
        hasNextPage: this.hasNextPage,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosNFTsByOwnersResponse2;
  }()
);
var GetNFTByOwnersOperation = {
  operationId: "getNFTByOwners",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/nfts",
  parameterNames: ["limit", "offset", "cursor", "owner_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTsByOwnersResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var ownerAddresses = request.ownerAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      owner_addresses: ownerAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetWalletsNFTTransfersOperation = {
  operationId: "getWalletsNFTTransfers",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/nfts/transfers",
  parameterNames: ["limit", "offset", "cursor", "wallet_addresses", "collection_blacklist", "collection_whitelist", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosNFTTransfersByWalletsResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var offset = request.offset;
    var cursor = request.cursor;
    var walletAddresses = request.walletAddresses.map(function(item) {
      return AptosAddress.create(item);
    });
    var collectionBlacklist = request.collectionBlacklist;
    var collectionWhitelist = request.collectionWhitelist;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      offset,
      cursor,
      wallet_addresses: walletAddresses.map(function(item) {
        return item.toJSON();
      }),
      collection_blacklist: collectionBlacklist,
      collection_whitelist: collectionWhitelist,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountResponse = (
  /** @class */
  function() {
    function AptosGetAccountResponse2(input) {
      this.sequenceNumber = input.sequenceNumber;
      this.authenticationKey = input.authenticationKey;
    }
    AptosGetAccountResponse2.create = function(input) {
      if (input instanceof AptosGetAccountResponse2) {
        return input;
      }
      return new AptosGetAccountResponse2(input);
    };
    AptosGetAccountResponse2.fromJSON = function(json) {
      var input = {
        sequenceNumber: json.sequence_number,
        authenticationKey: json.authentication_key
      };
      return AptosGetAccountResponse2.create(input);
    };
    AptosGetAccountResponse2.prototype.toJSON = function() {
      return {
        sequence_number: this.sequenceNumber,
        authentication_key: this.authenticationKey
      };
    };
    return AptosGetAccountResponse2;
  }()
);
var GetAccountOperation = {
  operationId: "getAccount",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}",
  parameterNames: ["address", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountResourceResponseData = (
  /** @class */
  function() {
    function AptosGetAccountResourceResponseData2() {
    }
    AptosGetAccountResourceResponseData2.create = function(input) {
      return input;
    };
    AptosGetAccountResourceResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetAccountResourceResponseData2;
  }()
);
var AptosGetAccountResourceResponse = (
  /** @class */
  function() {
    function AptosGetAccountResourceResponse2(input) {
      this.type = input.type;
      this.data = AptosGetAccountResourceResponseData.create(input.data);
    }
    AptosGetAccountResourceResponse2.create = function(input) {
      if (input instanceof AptosGetAccountResourceResponse2) {
        return input;
      }
      return new AptosGetAccountResourceResponse2(input);
    };
    AptosGetAccountResourceResponse2.fromJSON = function(json) {
      var input = {
        type: json.type,
        data: AptosGetAccountResourceResponseData.fromJSON(json.data)
      };
      return AptosGetAccountResourceResponse2.create(input);
    };
    AptosGetAccountResourceResponse2.prototype.toJSON = function() {
      return {
        type: this.type,
        data: this.data
      };
    };
    return AptosGetAccountResourceResponse2;
  }()
);
var GetAccountResourcesOperation = {
  operationId: "getAccountResources",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resources",
  parameterNames: ["address", "ledger_version", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountResourceResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGenericTypeParam = (
  /** @class */
  function() {
    function AptosGenericTypeParam2(input) {
      this.constraints = input.constraints;
    }
    AptosGenericTypeParam2.create = function(input) {
      if (input instanceof AptosGenericTypeParam2) {
        return input;
      }
      return new AptosGenericTypeParam2(input);
    };
    AptosGenericTypeParam2.fromJSON = function(json) {
      var input = {
        constraints: json.constraints
      };
      return AptosGenericTypeParam2.create(input);
    };
    AptosGenericTypeParam2.prototype.toJSON = function() {
      return {
        constraints: this.constraints
      };
    };
    return AptosGenericTypeParam2;
  }()
);
var AptosModuleExposedFunction = (
  /** @class */
  function() {
    function AptosModuleExposedFunction2(input) {
      this.name = input.name;
      this.visibility = input.visibility;
      this.isEntry = input.isEntry;
      this.genericTypeParams = input.genericTypeParams.map(function(item) {
        return AptosGenericTypeParam.create(item);
      });
      this.params = input.params;
      this.return = input.return;
    }
    AptosModuleExposedFunction2.create = function(input) {
      if (input instanceof AptosModuleExposedFunction2) {
        return input;
      }
      return new AptosModuleExposedFunction2(input);
    };
    AptosModuleExposedFunction2.fromJSON = function(json) {
      var input = {
        name: json.name,
        visibility: json.visibility,
        isEntry: json.is_entry,
        genericTypeParams: json.generic_type_params.map(function(item) {
          return AptosGenericTypeParam.fromJSON(item);
        }),
        params: json.params,
        return: json.return
      };
      return AptosModuleExposedFunction2.create(input);
    };
    AptosModuleExposedFunction2.prototype.toJSON = function() {
      return {
        name: this.name,
        visibility: this.visibility,
        is_entry: this.isEntry,
        generic_type_params: this.genericTypeParams.map(function(item) {
          return item.toJSON();
        }),
        params: this.params,
        return: this.return
      };
    };
    return AptosModuleExposedFunction2;
  }()
);
var AptosModuleStructField = (
  /** @class */
  function() {
    function AptosModuleStructField2(input) {
      this.name = input.name;
      this.type = input.type;
    }
    AptosModuleStructField2.create = function(input) {
      if (input instanceof AptosModuleStructField2) {
        return input;
      }
      return new AptosModuleStructField2(input);
    };
    AptosModuleStructField2.fromJSON = function(json) {
      var input = {
        name: json.name,
        type: json.type
      };
      return AptosModuleStructField2.create(input);
    };
    AptosModuleStructField2.prototype.toJSON = function() {
      return {
        name: this.name,
        type: this.type
      };
    };
    return AptosModuleStructField2;
  }()
);
var AptosModuleStruct = (
  /** @class */
  function() {
    function AptosModuleStruct2(input) {
      this.name = input.name;
      this.isNative = input.isNative;
      this.abilities = input.abilities;
      this.genericTypeParams = input.genericTypeParams.map(function(item) {
        return AptosGenericTypeParam.create(item);
      });
      this.fields = input.fields.map(function(item) {
        return AptosModuleStructField.create(item);
      });
    }
    AptosModuleStruct2.create = function(input) {
      if (input instanceof AptosModuleStruct2) {
        return input;
      }
      return new AptosModuleStruct2(input);
    };
    AptosModuleStruct2.fromJSON = function(json) {
      var input = {
        name: json.name,
        isNative: json.is_native,
        abilities: json.abilities,
        genericTypeParams: json.generic_type_params.map(function(item) {
          return AptosGenericTypeParam.fromJSON(item);
        }),
        fields: json.fields.map(function(item) {
          return AptosModuleStructField.fromJSON(item);
        })
      };
      return AptosModuleStruct2.create(input);
    };
    AptosModuleStruct2.prototype.toJSON = function() {
      return {
        name: this.name,
        is_native: this.isNative,
        abilities: this.abilities,
        generic_type_params: this.genericTypeParams.map(function(item) {
          return item.toJSON();
        }),
        fields: this.fields.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosModuleStruct2;
  }()
);
var AptosMoveModuleAbi = (
  /** @class */
  function() {
    function AptosMoveModuleAbi2(input) {
      this.address = AptosAddress.create(input.address);
      this.name = input.name;
      this.friends = input.friends;
      this.exposedFunctions = input.exposedFunctions.map(function(item) {
        return AptosModuleExposedFunction.create(item);
      });
      this.structs = input.structs.map(function(item) {
        return AptosModuleStruct.create(item);
      });
    }
    AptosMoveModuleAbi2.create = function(input) {
      if (input instanceof AptosMoveModuleAbi2) {
        return input;
      }
      return new AptosMoveModuleAbi2(input);
    };
    AptosMoveModuleAbi2.fromJSON = function(json) {
      var input = {
        address: AptosAddress.fromJSON(json.address),
        name: json.name,
        friends: json.friends,
        exposedFunctions: json.exposed_functions.map(function(item) {
          return AptosModuleExposedFunction.fromJSON(item);
        }),
        structs: json.structs.map(function(item) {
          return AptosModuleStruct.fromJSON(item);
        })
      };
      return AptosMoveModuleAbi2.create(input);
    };
    AptosMoveModuleAbi2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        name: this.name,
        friends: this.friends,
        exposed_functions: this.exposedFunctions.map(function(item) {
          return item.toJSON();
        }),
        structs: this.structs.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosMoveModuleAbi2;
  }()
);
var AptosGetAccountModuleResponse = (
  /** @class */
  function() {
    function AptosGetAccountModuleResponse2(input) {
      this.bytecode = input.bytecode;
      this.abi = AptosMoveModuleAbi.create(input.abi);
    }
    AptosGetAccountModuleResponse2.create = function(input) {
      if (input instanceof AptosGetAccountModuleResponse2) {
        return input;
      }
      return new AptosGetAccountModuleResponse2(input);
    };
    AptosGetAccountModuleResponse2.fromJSON = function(json) {
      var input = {
        bytecode: json.bytecode,
        abi: AptosMoveModuleAbi.fromJSON(json.abi)
      };
      return AptosGetAccountModuleResponse2.create(input);
    };
    AptosGetAccountModuleResponse2.prototype.toJSON = function() {
      return {
        bytecode: this.bytecode,
        abi: this.abi.toJSON()
      };
    };
    return AptosGetAccountModuleResponse2;
  }()
);
var GetAccountModulesOperation = {
  operationId: "getAccountModules",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/modules",
  parameterNames: ["address", "ledger_version", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountModuleResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var ledgerVersion = request.ledgerVersion;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      ledger_version: ledgerVersion,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetAccountResourceOperation = {
  operationId: "getAccountResource",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resource/{resource_type}",
  parameterNames: ["address", "resource_type", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountResourceResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var resourceType = request.resourceType;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      resource_type: resourceType,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetAccountModuleOperation = {
  operationId: "getAccountModule",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/resource/{module_name}",
  parameterNames: ["address", "module_name", "ledger_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetAccountModuleResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = request.address;
    var moduleName = request.moduleName;
    var ledgerVersion = request.ledgerVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      module_name: moduleName,
      ledger_version: ledgerVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosTransactionEventGuid = (
  /** @class */
  function() {
    function AptosTransactionEventGuid2(input) {
      this.creationNumber = input.creationNumber;
      this.accountAddress = AptosAddress.create(input.accountAddress);
    }
    AptosTransactionEventGuid2.create = function(input) {
      if (input instanceof AptosTransactionEventGuid2) {
        return input;
      }
      return new AptosTransactionEventGuid2(input);
    };
    AptosTransactionEventGuid2.fromJSON = function(json) {
      var input = {
        creationNumber: json.creation_number,
        accountAddress: AptosAddress.fromJSON(json.account_address)
      };
      return AptosTransactionEventGuid2.create(input);
    };
    AptosTransactionEventGuid2.prototype.toJSON = function() {
      return {
        creation_number: this.creationNumber,
        account_address: this.accountAddress.toJSON()
      };
    };
    return AptosTransactionEventGuid2;
  }()
);
var AptosGetEventsByCreationNumberResponseData = (
  /** @class */
  function() {
    function AptosGetEventsByCreationNumberResponseData2() {
    }
    AptosGetEventsByCreationNumberResponseData2.create = function(input) {
      return input;
    };
    AptosGetEventsByCreationNumberResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetEventsByCreationNumberResponseData2;
  }()
);
var AptosGetEventsByCreationNumberResponse = (
  /** @class */
  function() {
    function AptosGetEventsByCreationNumberResponse2(input) {
      this.version = input.version;
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosGetEventsByCreationNumberResponseData.create(input.data);
    }
    AptosGetEventsByCreationNumberResponse2.create = function(input) {
      if (input instanceof AptosGetEventsByCreationNumberResponse2) {
        return input;
      }
      return new AptosGetEventsByCreationNumberResponse2(input);
    };
    AptosGetEventsByCreationNumberResponse2.fromJSON = function(json) {
      var input = {
        version: json.version,
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosGetEventsByCreationNumberResponseData.fromJSON(json.data)
      };
      return AptosGetEventsByCreationNumberResponse2.create(input);
    };
    AptosGetEventsByCreationNumberResponse2.prototype.toJSON = function() {
      return {
        version: this.version,
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosGetEventsByCreationNumberResponse2;
  }()
);
var GetEventsByCreationNumberOperation = {
  operationId: "getEventsByCreationNumber",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/events/{creation_number}",
  parameterNames: ["address", "creation_number", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetEventsByCreationNumberResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var creationNumber = request.creationNumber;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      creation_number: creationNumber,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetEventsByEventHandleResponseData = (
  /** @class */
  function() {
    function AptosGetEventsByEventHandleResponseData2() {
    }
    AptosGetEventsByEventHandleResponseData2.create = function(input) {
      return input;
    };
    AptosGetEventsByEventHandleResponseData2.fromJSON = function(json) {
      return json;
    };
    return AptosGetEventsByEventHandleResponseData2;
  }()
);
var AptosGetEventsByEventHandleResponse = (
  /** @class */
  function() {
    function AptosGetEventsByEventHandleResponse2(input) {
      this.version = input.version;
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosGetEventsByEventHandleResponseData.create(input.data);
    }
    AptosGetEventsByEventHandleResponse2.create = function(input) {
      if (input instanceof AptosGetEventsByEventHandleResponse2) {
        return input;
      }
      return new AptosGetEventsByEventHandleResponse2(input);
    };
    AptosGetEventsByEventHandleResponse2.fromJSON = function(json) {
      var input = {
        version: json.version,
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosGetEventsByEventHandleResponseData.fromJSON(json.data)
      };
      return AptosGetEventsByEventHandleResponse2.create(input);
    };
    AptosGetEventsByEventHandleResponse2.prototype.toJSON = function() {
      return {
        version: this.version,
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosGetEventsByEventHandleResponse2;
  }()
);
var GetEventsByEventHandleOperation = {
  operationId: "getEventsByEventHandle",
  groupName: "accounts",
  httpMethod: "get",
  routePattern: "/accounts/{address}/events/{event_handle}/{field_name}",
  parameterNames: ["address", "event_handle", "field_name", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetEventsByEventHandleResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var eventHandle = request.eventHandle;
    var fieldName = request.fieldName;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      event_handle: eventHandle,
      field_name: fieldName,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosEntryFunctionPayloadRequest = (
  /** @class */
  function() {
    function AptosEntryFunctionPayloadRequest2(input) {
      this.type = input.type;
      this.function = input.function;
      this.typeArguments = input.typeArguments;
      this.arguments = input.arguments;
    }
    AptosEntryFunctionPayloadRequest2.create = function(input) {
      if (input instanceof AptosEntryFunctionPayloadRequest2) {
        return input;
      }
      return new AptosEntryFunctionPayloadRequest2(input);
    };
    AptosEntryFunctionPayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        function: json.function,
        typeArguments: json.type_arguments,
        arguments: json.arguments
      };
      return AptosEntryFunctionPayloadRequest2.create(input);
    };
    AptosEntryFunctionPayloadRequest2.isInput = function(input) {
      return ["type", "function", "typeArguments", "arguments"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosEntryFunctionPayloadRequest2.isJSON = function(json) {
      return ["type", "function", "type_arguments", "arguments"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosEntryFunctionPayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        function: this.function,
        type_arguments: this.typeArguments,
        arguments: this.arguments
      };
    };
    return AptosEntryFunctionPayloadRequest2;
  }()
);
var AptosScriptPayloadRequestCode = (
  /** @class */
  function() {
    function AptosScriptPayloadRequestCode2() {
    }
    AptosScriptPayloadRequestCode2.create = function(input) {
      return input;
    };
    AptosScriptPayloadRequestCode2.fromJSON = function(json) {
      return json;
    };
    return AptosScriptPayloadRequestCode2;
  }()
);
var AptosScriptPayloadRequest = (
  /** @class */
  function() {
    function AptosScriptPayloadRequest2(input) {
      this.type = input.type;
      this.code = AptosScriptPayloadRequestCode.create(input.code);
      this.typeArguments = input.typeArguments;
      this.arguments = input.arguments;
    }
    AptosScriptPayloadRequest2.create = function(input) {
      if (input instanceof AptosScriptPayloadRequest2) {
        return input;
      }
      return new AptosScriptPayloadRequest2(input);
    };
    AptosScriptPayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        code: AptosScriptPayloadRequestCode.fromJSON(json.code),
        typeArguments: json.type_arguments,
        arguments: json.arguments
      };
      return AptosScriptPayloadRequest2.create(input);
    };
    AptosScriptPayloadRequest2.isInput = function(input) {
      return ["type", "code", "typeArguments", "arguments"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosScriptPayloadRequest2.isJSON = function(json) {
      return ["type", "code", "type_arguments", "arguments"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosScriptPayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        code: this.code,
        type_arguments: this.typeArguments,
        arguments: this.arguments
      };
    };
    return AptosScriptPayloadRequest2;
  }()
);
var AptosModuleBundlePayloadRequest = (
  /** @class */
  function() {
    function AptosModuleBundlePayloadRequest2(input) {
      this.type = input.type;
      this.modules = input.modules;
    }
    AptosModuleBundlePayloadRequest2.create = function(input) {
      if (input instanceof AptosModuleBundlePayloadRequest2) {
        return input;
      }
      return new AptosModuleBundlePayloadRequest2(input);
    };
    AptosModuleBundlePayloadRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        modules: json.modules
      };
      return AptosModuleBundlePayloadRequest2.create(input);
    };
    AptosModuleBundlePayloadRequest2.isInput = function(input) {
      return ["type", "modules"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosModuleBundlePayloadRequest2.isJSON = function(json) {
      return ["type", "modules"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosModuleBundlePayloadRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        modules: this.modules
      };
    };
    return AptosModuleBundlePayloadRequest2;
  }()
);
var AptosPendingTransactionPayload = (
  /** @class */
  function() {
    function AptosPendingTransactionPayload2() {
    }
    AptosPendingTransactionPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadInput");
    };
    AptosPendingTransactionPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosPendingTransactionPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionPayloadValue");
    };
    return AptosPendingTransactionPayload2;
  }()
);
var AptosEd25519SignatureRequest = (
  /** @class */
  function() {
    function AptosEd25519SignatureRequest2(input) {
      this.type = input.type;
      this.signature = input.signature;
      this.publicKey = input.publicKey;
    }
    AptosEd25519SignatureRequest2.create = function(input) {
      if (input instanceof AptosEd25519SignatureRequest2) {
        return input;
      }
      return new AptosEd25519SignatureRequest2(input);
    };
    AptosEd25519SignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        signature: json.signature,
        publicKey: json.public_key
      };
      return AptosEd25519SignatureRequest2.create(input);
    };
    AptosEd25519SignatureRequest2.isInput = function(input) {
      return ["type", "signature", "publicKey"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosEd25519SignatureRequest2.isJSON = function(json) {
      return ["type", "signature", "public_key"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosEd25519SignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        signature: this.signature,
        public_key: this.publicKey
      };
    };
    return AptosEd25519SignatureRequest2;
  }()
);
var AptosMultiEd25519SignatureRequest = (
  /** @class */
  function() {
    function AptosMultiEd25519SignatureRequest2(input) {
      this.type = input.type;
      this.publicKeys = input.publicKeys;
      this.signatures = input.signatures;
      this.threshold = input.threshold;
      this.bitmap = input.bitmap;
    }
    AptosMultiEd25519SignatureRequest2.create = function(input) {
      if (input instanceof AptosMultiEd25519SignatureRequest2) {
        return input;
      }
      return new AptosMultiEd25519SignatureRequest2(input);
    };
    AptosMultiEd25519SignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        publicKeys: json.public_keys,
        signatures: json.signatures,
        threshold: json.threshold,
        bitmap: json.bitmap
      };
      return AptosMultiEd25519SignatureRequest2.create(input);
    };
    AptosMultiEd25519SignatureRequest2.isInput = function(input) {
      return ["type", "publicKeys", "signatures", "threshold", "bitmap"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosMultiEd25519SignatureRequest2.isJSON = function(json) {
      return ["type", "public_keys", "signatures", "threshold", "bitmap"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosMultiEd25519SignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        public_keys: this.publicKeys,
        signatures: this.signatures,
        threshold: this.threshold,
        bitmap: this.bitmap
      };
    };
    return AptosMultiEd25519SignatureRequest2;
  }()
);
var AptosMultiAgentSignatureRequestSecondarySigners = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequestSecondarySigners2() {
    }
    AptosMultiAgentSignatureRequestSecondarySigners2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersInput");
    };
    AptosMultiAgentSignatureRequestSecondarySigners2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosMultiAgentSignatureRequestSecondarySigners2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSecondarySignersValue");
    };
    return AptosMultiAgentSignatureRequestSecondarySigners2;
  }()
);
var AptosMultiAgentSignatureRequest = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequest2(input) {
      this.type = input.type;
      this.sender = AptosAddress.create(input.sender);
      this.secondarySignerAddresses = input.secondarySignerAddresses;
      this.secondarySigners = AptosMultiAgentSignatureRequestSecondarySigners.create(input.secondarySigners);
    }
    AptosMultiAgentSignatureRequest2.create = function(input) {
      if (input instanceof AptosMultiAgentSignatureRequest2) {
        return input;
      }
      return new AptosMultiAgentSignatureRequest2(input);
    };
    AptosMultiAgentSignatureRequest2.fromJSON = function(json) {
      var input = {
        type: json.type,
        sender: AptosAddress.fromJSON(json.sender),
        secondarySignerAddresses: json.secondary_signer_addresses,
        secondarySigners: AptosMultiAgentSignatureRequestSecondarySigners.fromJSON(json.secondary_signers)
      };
      return AptosMultiAgentSignatureRequest2.create(input);
    };
    AptosMultiAgentSignatureRequest2.isInput = function(input) {
      return ["type", "sender", "secondarySignerAddresses", "secondarySigners"].every(function(name) {
        return input[name] !== void 0;
      });
    };
    AptosMultiAgentSignatureRequest2.isJSON = function(json) {
      return ["type", "sender", "secondary_signer_addresses", "secondary_signers"].every(function(name) {
        return json[name] !== void 0;
      });
    };
    AptosMultiAgentSignatureRequest2.prototype.toJSON = function() {
      return {
        type: this.type,
        sender: this.sender.toJSON(),
        secondary_signer_addresses: this.secondarySignerAddresses,
        secondary_signers: AptosMultiAgentSignatureRequestSecondarySigners.toJSON(this.secondarySigners)
      };
    };
    return AptosMultiAgentSignatureRequest2;
  }()
);
var AptosPendingTransactionSignature = (
  /** @class */
  function() {
    function AptosPendingTransactionSignature2() {
    }
    AptosPendingTransactionSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureInput");
    };
    AptosPendingTransactionSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosPendingTransactionSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosPendingTransactionSignatureValue");
    };
    return AptosPendingTransactionSignature2;
  }()
);
var AptosPendingTransaction = (
  /** @class */
  function() {
    function AptosPendingTransaction2(input) {
      this.hash = input.hash;
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosPendingTransactionPayload.create(input.payload);
      this.signature = AptosPendingTransactionSignature.create(input.signature);
    }
    AptosPendingTransaction2.create = function(input) {
      if (input instanceof AptosPendingTransaction2) {
        return input;
      }
      return new AptosPendingTransaction2(input);
    };
    AptosPendingTransaction2.fromJSON = function(json) {
      var input = {
        hash: json.hash,
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosPendingTransactionPayload.fromJSON(json.payload),
        signature: AptosPendingTransactionSignature.fromJSON(json.signature)
      };
      return AptosPendingTransaction2.create(input);
    };
    AptosPendingTransaction2.isInput = function(input) {
      return input.type === "pending_transaction";
    };
    AptosPendingTransaction2.isJSON = function(json) {
      return json.type === "pending_transaction";
    };
    AptosPendingTransaction2.prototype.toJSON = function() {
      return {
        hash: this.hash,
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosPendingTransactionPayload.toJSON(this.payload),
        signature: AptosPendingTransactionSignature.toJSON(this.signature)
      };
    };
    return AptosPendingTransaction2;
  }()
);
var AptosDeleteModuleChangeModule = (
  /** @class */
  function() {
    function AptosDeleteModuleChangeModule2() {
    }
    AptosDeleteModuleChangeModule2.create = function(input) {
      return input;
    };
    AptosDeleteModuleChangeModule2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteModuleChangeModule2;
  }()
);
var AptosDeleteModuleChange = (
  /** @class */
  function() {
    function AptosDeleteModuleChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.module = AptosDeleteModuleChangeModule.create(input.module);
    }
    AptosDeleteModuleChange2.create = function(input) {
      if (input instanceof AptosDeleteModuleChange2) {
        return input;
      }
      return new AptosDeleteModuleChange2(input);
    };
    AptosDeleteModuleChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        module: AptosDeleteModuleChangeModule.fromJSON(json.module)
      };
      return AptosDeleteModuleChange2.create(input);
    };
    AptosDeleteModuleChange2.isInput = function(input) {
      return input.type === "delete_module";
    };
    AptosDeleteModuleChange2.isJSON = function(json) {
      return json.type === "delete_module";
    };
    AptosDeleteModuleChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        module: this.module
      };
    };
    return AptosDeleteModuleChange2;
  }()
);
var AptosDeleteResourceChangeResource = (
  /** @class */
  function() {
    function AptosDeleteResourceChangeResource2() {
    }
    AptosDeleteResourceChangeResource2.create = function(input) {
      return input;
    };
    AptosDeleteResourceChangeResource2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteResourceChangeResource2;
  }()
);
var AptosDeleteResourceChange = (
  /** @class */
  function() {
    function AptosDeleteResourceChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.resource = AptosDeleteResourceChangeResource.create(input.resource);
    }
    AptosDeleteResourceChange2.create = function(input) {
      if (input instanceof AptosDeleteResourceChange2) {
        return input;
      }
      return new AptosDeleteResourceChange2(input);
    };
    AptosDeleteResourceChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        resource: AptosDeleteResourceChangeResource.fromJSON(json.resource)
      };
      return AptosDeleteResourceChange2.create(input);
    };
    AptosDeleteResourceChange2.isInput = function(input) {
      return input.type === "delete_resource";
    };
    AptosDeleteResourceChange2.isJSON = function(json) {
      return json.type === "delete_resource";
    };
    AptosDeleteResourceChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        resource: this.resource
      };
    };
    return AptosDeleteResourceChange2;
  }()
);
var AptosDeleteTableItemChangeHandle = (
  /** @class */
  function() {
    function AptosDeleteTableItemChangeHandle2() {
    }
    AptosDeleteTableItemChangeHandle2.create = function(input) {
      return input;
    };
    AptosDeleteTableItemChangeHandle2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteTableItemChangeHandle2;
  }()
);
var AptosDeleteTableItemChangeKey = (
  /** @class */
  function() {
    function AptosDeleteTableItemChangeKey2() {
    }
    AptosDeleteTableItemChangeKey2.create = function(input) {
      return input;
    };
    AptosDeleteTableItemChangeKey2.fromJSON = function(json) {
      return json;
    };
    return AptosDeleteTableItemChangeKey2;
  }()
);
var AptosDeletedTableData = (
  /** @class */
  function() {
    function AptosDeletedTableData2(input) {
      this.key = input.key;
      this.keyType = input.keyType;
    }
    AptosDeletedTableData2.create = function(input) {
      if (input instanceof AptosDeletedTableData2) {
        return input;
      }
      return new AptosDeletedTableData2(input);
    };
    AptosDeletedTableData2.fromJSON = function(json) {
      var input = {
        key: json.key,
        keyType: json.key_type
      };
      return AptosDeletedTableData2.create(input);
    };
    AptosDeletedTableData2.prototype.toJSON = function() {
      return {
        key: this.key,
        key_type: this.keyType
      };
    };
    return AptosDeletedTableData2;
  }()
);
var AptosDeleteTableItemChange = (
  /** @class */
  function() {
    function AptosDeleteTableItemChange2(input) {
      this.type = input.type;
      this.stateKeyHash = input.stateKeyHash;
      this.handle = AptosDeleteTableItemChangeHandle.create(input.handle);
      this.key = AptosDeleteTableItemChangeKey.create(input.key);
      this.data = AptosDeletedTableData.create(input.data);
    }
    AptosDeleteTableItemChange2.create = function(input) {
      if (input instanceof AptosDeleteTableItemChange2) {
        return input;
      }
      return new AptosDeleteTableItemChange2(input);
    };
    AptosDeleteTableItemChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        stateKeyHash: json.state_key_hash,
        handle: AptosDeleteTableItemChangeHandle.fromJSON(json.handle),
        key: AptosDeleteTableItemChangeKey.fromJSON(json.key),
        data: AptosDeletedTableData.fromJSON(json.data)
      };
      return AptosDeleteTableItemChange2.create(input);
    };
    AptosDeleteTableItemChange2.isInput = function(input) {
      return input.type === "delete_table_item";
    };
    AptosDeleteTableItemChange2.isJSON = function(json) {
      return json.type === "delete_table_item";
    };
    AptosDeleteTableItemChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        state_key_hash: this.stateKeyHash,
        handle: this.handle,
        key: this.key,
        data: this.data.toJSON()
      };
    };
    return AptosDeleteTableItemChange2;
  }()
);
var AptosWriteModuleData = (
  /** @class */
  function() {
    function AptosWriteModuleData2(input) {
      this.bytecode = input.bytecode;
      this.abi = AptosMoveModuleAbi.create(input.abi);
    }
    AptosWriteModuleData2.create = function(input) {
      if (input instanceof AptosWriteModuleData2) {
        return input;
      }
      return new AptosWriteModuleData2(input);
    };
    AptosWriteModuleData2.fromJSON = function(json) {
      var input = {
        bytecode: json.bytecode,
        abi: AptosMoveModuleAbi.fromJSON(json.abi)
      };
      return AptosWriteModuleData2.create(input);
    };
    AptosWriteModuleData2.prototype.toJSON = function() {
      return {
        bytecode: this.bytecode,
        abi: this.abi.toJSON()
      };
    };
    return AptosWriteModuleData2;
  }()
);
var AptosWriteOrUpdateModuleChange = (
  /** @class */
  function() {
    function AptosWriteOrUpdateModuleChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.data = AptosWriteModuleData.create(input.data);
    }
    AptosWriteOrUpdateModuleChange2.create = function(input) {
      if (input instanceof AptosWriteOrUpdateModuleChange2) {
        return input;
      }
      return new AptosWriteOrUpdateModuleChange2(input);
    };
    AptosWriteOrUpdateModuleChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        data: AptosWriteModuleData.fromJSON(json.data)
      };
      return AptosWriteOrUpdateModuleChange2.create(input);
    };
    AptosWriteOrUpdateModuleChange2.isInput = function(input) {
      return input.type === "write_module";
    };
    AptosWriteOrUpdateModuleChange2.isJSON = function(json) {
      return json.type === "write_module";
    };
    AptosWriteOrUpdateModuleChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        data: this.data.toJSON()
      };
    };
    return AptosWriteOrUpdateModuleChange2;
  }()
);
var AptosWriteResourceDataData = (
  /** @class */
  function() {
    function AptosWriteResourceDataData2() {
    }
    AptosWriteResourceDataData2.create = function(input) {
      return input;
    };
    AptosWriteResourceDataData2.fromJSON = function(json) {
      return json;
    };
    return AptosWriteResourceDataData2;
  }()
);
var AptosWriteResourceData = (
  /** @class */
  function() {
    function AptosWriteResourceData2(input) {
      this.type = input.type;
      this.data = AptosWriteResourceDataData.create(input.data);
    }
    AptosWriteResourceData2.create = function(input) {
      if (input instanceof AptosWriteResourceData2) {
        return input;
      }
      return new AptosWriteResourceData2(input);
    };
    AptosWriteResourceData2.fromJSON = function(json) {
      var input = {
        type: json.type,
        data: AptosWriteResourceDataData.fromJSON(json.data)
      };
      return AptosWriteResourceData2.create(input);
    };
    AptosWriteResourceData2.prototype.toJSON = function() {
      return {
        type: this.type,
        data: this.data
      };
    };
    return AptosWriteResourceData2;
  }()
);
var AptosWriteResourceChange = (
  /** @class */
  function() {
    function AptosWriteResourceChange2(input) {
      this.type = input.type;
      this.address = AptosAddress.create(input.address);
      this.stateKeyHash = input.stateKeyHash;
      this.data = AptosWriteResourceData.create(input.data);
    }
    AptosWriteResourceChange2.create = function(input) {
      if (input instanceof AptosWriteResourceChange2) {
        return input;
      }
      return new AptosWriteResourceChange2(input);
    };
    AptosWriteResourceChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        address: AptosAddress.fromJSON(json.address),
        stateKeyHash: json.state_key_hash,
        data: AptosWriteResourceData.fromJSON(json.data)
      };
      return AptosWriteResourceChange2.create(input);
    };
    AptosWriteResourceChange2.isInput = function(input) {
      return input.type === "write_resource";
    };
    AptosWriteResourceChange2.isJSON = function(json) {
      return json.type === "write_resource";
    };
    AptosWriteResourceChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        address: this.address.toJSON(),
        state_key_hash: this.stateKeyHash,
        data: this.data.toJSON()
      };
    };
    return AptosWriteResourceChange2;
  }()
);
var AptosDecodedTableData = (
  /** @class */
  function() {
    function AptosDecodedTableData2(input) {
      this.key = input.key;
      this.keyType = input.keyType;
      this.value = input.value;
      this.valueType = input.valueType;
    }
    AptosDecodedTableData2.create = function(input) {
      if (input instanceof AptosDecodedTableData2) {
        return input;
      }
      return new AptosDecodedTableData2(input);
    };
    AptosDecodedTableData2.fromJSON = function(json) {
      var input = {
        key: json.key,
        keyType: json.key_type,
        value: json.value,
        valueType: json.value_type
      };
      return AptosDecodedTableData2.create(input);
    };
    AptosDecodedTableData2.prototype.toJSON = function() {
      return {
        key: this.key,
        key_type: this.keyType,
        value: this.value,
        value_type: this.valueType
      };
    };
    return AptosDecodedTableData2;
  }()
);
var AptosWriteTableChangeSetChange = (
  /** @class */
  function() {
    function AptosWriteTableChangeSetChange2(input) {
      this.type = input.type;
      this.stateKeyHash = input.stateKeyHash;
      this.handle = input.handle;
      this.key = input.key;
      this.value = input.value;
      this.data = AptosDecodedTableData.create(input.data);
    }
    AptosWriteTableChangeSetChange2.create = function(input) {
      if (input instanceof AptosWriteTableChangeSetChange2) {
        return input;
      }
      return new AptosWriteTableChangeSetChange2(input);
    };
    AptosWriteTableChangeSetChange2.fromJSON = function(json) {
      var input = {
        type: json.type,
        stateKeyHash: json.state_key_hash,
        handle: json.handle,
        key: json.key,
        value: json.value,
        data: AptosDecodedTableData.fromJSON(json.data)
      };
      return AptosWriteTableChangeSetChange2.create(input);
    };
    AptosWriteTableChangeSetChange2.isInput = function(input) {
      return input.type === "write_table_item";
    };
    AptosWriteTableChangeSetChange2.isJSON = function(json) {
      return json.type === "write_table_item";
    };
    AptosWriteTableChangeSetChange2.prototype.toJSON = function() {
      return {
        type: this.type,
        state_key_hash: this.stateKeyHash,
        handle: this.handle,
        key: this.key,
        value: this.value,
        data: this.data.toJSON()
      };
    };
    return AptosWriteTableChangeSetChange2;
  }()
);
var AptosUserTransactionChangesItem = (
  /** @class */
  function() {
    function AptosUserTransactionChangesItem2() {
    }
    AptosUserTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemInput");
    };
    AptosUserTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionChangesItemValue");
    };
    return AptosUserTransactionChangesItem2;
  }()
);
var AptosUserTransactionPayload = (
  /** @class */
  function() {
    function AptosUserTransactionPayload2() {
    }
    AptosUserTransactionPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadInput");
    };
    AptosUserTransactionPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionPayloadValue");
    };
    return AptosUserTransactionPayload2;
  }()
);
var AptosUserTransactionSignature = (
  /** @class */
  function() {
    function AptosUserTransactionSignature2() {
    }
    AptosUserTransactionSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureInput");
    };
    AptosUserTransactionSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosUserTransactionSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosUserTransactionSignatureValue");
    };
    return AptosUserTransactionSignature2;
  }()
);
var AptosTransactionEventData = (
  /** @class */
  function() {
    function AptosTransactionEventData2() {
    }
    AptosTransactionEventData2.create = function(input) {
      return input;
    };
    AptosTransactionEventData2.fromJSON = function(json) {
      return json;
    };
    return AptosTransactionEventData2;
  }()
);
var AptosTransactionEvent = (
  /** @class */
  function() {
    function AptosTransactionEvent2(input) {
      this.guid = AptosTransactionEventGuid.create(input.guid);
      this.sequenceNumber = input.sequenceNumber;
      this.type = input.type;
      this.data = AptosTransactionEventData.create(input.data);
    }
    AptosTransactionEvent2.create = function(input) {
      if (input instanceof AptosTransactionEvent2) {
        return input;
      }
      return new AptosTransactionEvent2(input);
    };
    AptosTransactionEvent2.fromJSON = function(json) {
      var input = {
        guid: AptosTransactionEventGuid.fromJSON(json.guid),
        sequenceNumber: json.sequence_number,
        type: json.type,
        data: AptosTransactionEventData.fromJSON(json.data)
      };
      return AptosTransactionEvent2.create(input);
    };
    AptosTransactionEvent2.prototype.toJSON = function() {
      return {
        guid: this.guid.toJSON(),
        sequence_number: this.sequenceNumber,
        type: this.type,
        data: this.data
      };
    };
    return AptosTransactionEvent2;
  }()
);
var AptosUserTransaction = (
  /** @class */
  function() {
    function AptosUserTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosUserTransactionChangesItem.create(item);
      });
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosUserTransactionPayload.create(input.payload);
      this.signature = AptosUserTransactionSignature.create(input.signature);
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
      this.timestamp = input.timestamp;
    }
    AptosUserTransaction2.create = function(input) {
      if (input instanceof AptosUserTransaction2) {
        return input;
      }
      return new AptosUserTransaction2(input);
    };
    AptosUserTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosUserTransactionChangesItem.fromJSON(item);
        }),
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosUserTransactionPayload.fromJSON(json.payload),
        signature: AptosUserTransactionSignature.fromJSON(json.signature),
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        }),
        timestamp: json.timestamp
      };
      return AptosUserTransaction2.create(input);
    };
    AptosUserTransaction2.isInput = function(input) {
      return input.type === "user_transaction";
    };
    AptosUserTransaction2.isJSON = function(json) {
      return json.type === "user_transaction";
    };
    AptosUserTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosUserTransactionChangesItem.toJSON(item);
        }),
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosUserTransactionPayload.toJSON(this.payload),
        signature: AptosUserTransactionSignature.toJSON(this.signature),
        events: this.events.map(function(item) {
          return item.toJSON();
        }),
        timestamp: this.timestamp
      };
    };
    return AptosUserTransaction2;
  }()
);
var AptosGenesisTransactionChangesItem = (
  /** @class */
  function() {
    function AptosGenesisTransactionChangesItem2() {
    }
    AptosGenesisTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemInput");
    };
    AptosGenesisTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGenesisTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGenesisTransactionChangesItemValue");
    };
    return AptosGenesisTransactionChangesItem2;
  }()
);
var AptosScriptWriteSet = (
  /** @class */
  function() {
    function AptosScriptWriteSet2(input) {
      this.type = input.type;
      this.executeAs = input.executeAs;
      this.script = AptosScriptPayloadRequest.create(input.script);
    }
    AptosScriptWriteSet2.create = function(input) {
      if (input instanceof AptosScriptWriteSet2) {
        return input;
      }
      return new AptosScriptWriteSet2(input);
    };
    AptosScriptWriteSet2.fromJSON = function(json) {
      var input = {
        type: json.type,
        executeAs: json.execute_as,
        script: AptosScriptPayloadRequest.fromJSON(json.script)
      };
      return AptosScriptWriteSet2.create(input);
    };
    AptosScriptWriteSet2.isInput = function(input) {
      return input.type === "script_write_set";
    };
    AptosScriptWriteSet2.isJSON = function(json) {
      return json.type === "script_write_set";
    };
    AptosScriptWriteSet2.prototype.toJSON = function() {
      return {
        type: this.type,
        execute_as: this.executeAs,
        script: this.script.toJSON()
      };
    };
    return AptosScriptWriteSet2;
  }()
);
var AptosDirectWriteSet = (
  /** @class */
  function() {
    function AptosDirectWriteSet2(input) {
      this.type = input.type;
      this.changes = input.changes;
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
    }
    AptosDirectWriteSet2.create = function(input) {
      if (input instanceof AptosDirectWriteSet2) {
        return input;
      }
      return new AptosDirectWriteSet2(input);
    };
    AptosDirectWriteSet2.fromJSON = function(json) {
      var input = {
        type: json.type,
        changes: json.changes,
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        })
      };
      return AptosDirectWriteSet2.create(input);
    };
    AptosDirectWriteSet2.isInput = function(input) {
      return input.type === "direct_write_set";
    };
    AptosDirectWriteSet2.isJSON = function(json) {
      return json.type === "direct_write_set";
    };
    AptosDirectWriteSet2.prototype.toJSON = function() {
      return {
        type: this.type,
        changes: this.changes,
        events: this.events.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosDirectWriteSet2;
  }()
);
var AptosWriteSetPayloadWriteSet = (
  /** @class */
  function() {
    function AptosWriteSetPayloadWriteSet2() {
    }
    AptosWriteSetPayloadWriteSet2.create = function(input) {
      if (AptosScriptWriteSet.isInput(input)) {
        return AptosScriptWriteSet.create(input);
      }
      if (AptosDirectWriteSet.isInput(input)) {
        return AptosDirectWriteSet.create(input);
      }
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetInput");
    };
    AptosWriteSetPayloadWriteSet2.fromJSON = function(json) {
      if (AptosScriptWriteSet.isJSON(json)) {
        return AptosScriptWriteSet.fromJSON(json);
      }
      if (AptosDirectWriteSet.isJSON(json)) {
        return AptosDirectWriteSet.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosWriteSetPayloadWriteSet2.toJSON = function(value) {
      if (value instanceof AptosScriptWriteSet) {
        return value.toJSON();
      }
      if (value instanceof AptosDirectWriteSet) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosWriteSetPayloadWriteSetValue");
    };
    return AptosWriteSetPayloadWriteSet2;
  }()
);
var AptosWriteSetPayload = (
  /** @class */
  function() {
    function AptosWriteSetPayload2(input) {
      this.type = input.type;
      this.writeSet = AptosWriteSetPayloadWriteSet.create(input.writeSet);
    }
    AptosWriteSetPayload2.create = function(input) {
      if (input instanceof AptosWriteSetPayload2) {
        return input;
      }
      return new AptosWriteSetPayload2(input);
    };
    AptosWriteSetPayload2.fromJSON = function(json) {
      var input = {
        type: json.type,
        writeSet: AptosWriteSetPayloadWriteSet.fromJSON(json.write_set)
      };
      return AptosWriteSetPayload2.create(input);
    };
    AptosWriteSetPayload2.prototype.toJSON = function() {
      return {
        type: this.type,
        write_set: AptosWriteSetPayloadWriteSet.toJSON(this.writeSet)
      };
    };
    return AptosWriteSetPayload2;
  }()
);
var AptosGenesisTransaction = (
  /** @class */
  function() {
    function AptosGenesisTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosGenesisTransactionChangesItem.create(item);
      });
      this.payload = AptosWriteSetPayload.create(input.payload);
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
    }
    AptosGenesisTransaction2.create = function(input) {
      if (input instanceof AptosGenesisTransaction2) {
        return input;
      }
      return new AptosGenesisTransaction2(input);
    };
    AptosGenesisTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosGenesisTransactionChangesItem.fromJSON(item);
        }),
        payload: AptosWriteSetPayload.fromJSON(json.payload),
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        })
      };
      return AptosGenesisTransaction2.create(input);
    };
    AptosGenesisTransaction2.isInput = function(input) {
      return input.type === "genesis_transaction";
    };
    AptosGenesisTransaction2.isJSON = function(json) {
      return json.type === "genesis_transaction";
    };
    AptosGenesisTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosGenesisTransactionChangesItem.toJSON(item);
        }),
        payload: this.payload.toJSON(),
        events: this.events.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return AptosGenesisTransaction2;
  }()
);
var AptosBlockMetadataTransactionChangesItem = (
  /** @class */
  function() {
    function AptosBlockMetadataTransactionChangesItem2() {
    }
    AptosBlockMetadataTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemInput");
    };
    AptosBlockMetadataTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosBlockMetadataTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosBlockMetadataTransactionChangesItemValue");
    };
    return AptosBlockMetadataTransactionChangesItem2;
  }()
);
var AptosBlockMetadataTransaction = (
  /** @class */
  function() {
    function AptosBlockMetadataTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosBlockMetadataTransactionChangesItem.create(item);
      });
      this.id = input.id;
      this.epoch = input.epoch;
      this.round = input.round;
      this.events = input.events.map(function(item) {
        return AptosTransactionEvent.create(item);
      });
      this.previousBlockVotesBitvec = input.previousBlockVotesBitvec;
      this.proposer = AptosAddress.create(input.proposer);
      this.failedProposerIndices = input.failedProposerIndices;
      this.timestamp = input.timestamp;
    }
    AptosBlockMetadataTransaction2.create = function(input) {
      if (input instanceof AptosBlockMetadataTransaction2) {
        return input;
      }
      return new AptosBlockMetadataTransaction2(input);
    };
    AptosBlockMetadataTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosBlockMetadataTransactionChangesItem.fromJSON(item);
        }),
        id: json.id,
        epoch: json.epoch,
        round: json.round,
        events: json.events.map(function(item) {
          return AptosTransactionEvent.fromJSON(item);
        }),
        previousBlockVotesBitvec: json.previous_block_votes_bitvec,
        proposer: AptosAddress.fromJSON(json.proposer),
        failedProposerIndices: json.failed_proposer_indices,
        timestamp: json.timestamp
      };
      return AptosBlockMetadataTransaction2.create(input);
    };
    AptosBlockMetadataTransaction2.isInput = function(input) {
      return input.type === "block_metadata_transaction";
    };
    AptosBlockMetadataTransaction2.isJSON = function(json) {
      return json.type === "block_metadata_transaction";
    };
    AptosBlockMetadataTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosBlockMetadataTransactionChangesItem.toJSON(item);
        }),
        id: this.id,
        epoch: this.epoch,
        round: this.round,
        events: this.events.map(function(item) {
          return item.toJSON();
        }),
        previous_block_votes_bitvec: this.previousBlockVotesBitvec,
        proposer: this.proposer.toJSON(),
        failed_proposer_indices: this.failedProposerIndices,
        timestamp: this.timestamp
      };
    };
    return AptosBlockMetadataTransaction2;
  }()
);
var AptosStateCheckpointTransactionChangesItem = (
  /** @class */
  function() {
    function AptosStateCheckpointTransactionChangesItem2() {
    }
    AptosStateCheckpointTransactionChangesItem2.create = function(input) {
      if (AptosDeleteModuleChange.isInput(input)) {
        return AptosDeleteModuleChange.create(input);
      }
      if (AptosDeleteResourceChange.isInput(input)) {
        return AptosDeleteResourceChange.create(input);
      }
      if (AptosDeleteTableItemChange.isInput(input)) {
        return AptosDeleteTableItemChange.create(input);
      }
      if (AptosWriteOrUpdateModuleChange.isInput(input)) {
        return AptosWriteOrUpdateModuleChange.create(input);
      }
      if (AptosWriteResourceChange.isInput(input)) {
        return AptosWriteResourceChange.create(input);
      }
      if (AptosWriteTableChangeSetChange.isInput(input)) {
        return AptosWriteTableChangeSetChange.create(input);
      }
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemInput");
    };
    AptosStateCheckpointTransactionChangesItem2.fromJSON = function(json) {
      if (AptosDeleteModuleChange.isJSON(json)) {
        return AptosDeleteModuleChange.fromJSON(json);
      }
      if (AptosDeleteResourceChange.isJSON(json)) {
        return AptosDeleteResourceChange.fromJSON(json);
      }
      if (AptosDeleteTableItemChange.isJSON(json)) {
        return AptosDeleteTableItemChange.fromJSON(json);
      }
      if (AptosWriteOrUpdateModuleChange.isJSON(json)) {
        return AptosWriteOrUpdateModuleChange.fromJSON(json);
      }
      if (AptosWriteResourceChange.isJSON(json)) {
        return AptosWriteResourceChange.fromJSON(json);
      }
      if (AptosWriteTableChangeSetChange.isJSON(json)) {
        return AptosWriteTableChangeSetChange.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosStateCheckpointTransactionChangesItem2.toJSON = function(value) {
      if (value instanceof AptosDeleteModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosDeleteTableItemChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteOrUpdateModuleChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteResourceChange) {
        return value.toJSON();
      }
      if (value instanceof AptosWriteTableChangeSetChange) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosStateCheckpointTransactionChangesItemValue");
    };
    return AptosStateCheckpointTransactionChangesItem2;
  }()
);
var AptosStateCheckpointTransaction = (
  /** @class */
  function() {
    function AptosStateCheckpointTransaction2(input) {
      this.type = input.type;
      this.version = input.version;
      this.hash = input.hash;
      this.stateChangeHash = input.stateChangeHash;
      this.eventRootHash = input.eventRootHash;
      this.stateCheckpointHash = input.stateCheckpointHash;
      this.gasUsed = input.gasUsed;
      this.success = input.success;
      this.vmStatus = input.vmStatus;
      this.accumulatorRootHash = input.accumulatorRootHash;
      this.changes = input.changes.map(function(item) {
        return AptosStateCheckpointTransactionChangesItem.create(item);
      });
      this.timestamp = input.timestamp;
    }
    AptosStateCheckpointTransaction2.create = function(input) {
      if (input instanceof AptosStateCheckpointTransaction2) {
        return input;
      }
      return new AptosStateCheckpointTransaction2(input);
    };
    AptosStateCheckpointTransaction2.fromJSON = function(json) {
      var input = {
        type: json.type,
        version: json.version,
        hash: json.hash,
        stateChangeHash: json.state_change_hash,
        eventRootHash: json.event_root_hash,
        stateCheckpointHash: json.state_checkpoint_hash,
        gasUsed: json.gas_used,
        success: json.success,
        vmStatus: json.vm_status,
        accumulatorRootHash: json.accumulator_root_hash,
        changes: json.changes.map(function(item) {
          return AptosStateCheckpointTransactionChangesItem.fromJSON(item);
        }),
        timestamp: json.timestamp
      };
      return AptosStateCheckpointTransaction2.create(input);
    };
    AptosStateCheckpointTransaction2.isInput = function(input) {
      return input.type === "state_checkpoint_transaction";
    };
    AptosStateCheckpointTransaction2.isJSON = function(json) {
      return json.type === "state_checkpoint_transaction";
    };
    AptosStateCheckpointTransaction2.prototype.toJSON = function() {
      return {
        type: this.type,
        version: this.version,
        hash: this.hash,
        state_change_hash: this.stateChangeHash,
        event_root_hash: this.eventRootHash,
        state_checkpoint_hash: this.stateCheckpointHash,
        gas_used: this.gasUsed,
        success: this.success,
        vm_status: this.vmStatus,
        accumulator_root_hash: this.accumulatorRootHash,
        changes: this.changes.map(function(item) {
          return AptosStateCheckpointTransactionChangesItem.toJSON(item);
        }),
        timestamp: this.timestamp
      };
    };
    return AptosStateCheckpointTransaction2;
  }()
);
var AptosGetTransactionsItem = (
  /** @class */
  function() {
    function AptosGetTransactionsItem2() {
    }
    AptosGetTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionsItemInput");
    };
    AptosGetTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionsItemValue");
    };
    return AptosGetTransactionsItem2;
  }()
);
var GetTransactionsOperation = {
  operationId: "getTransactions",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions",
  parameterNames: ["limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetTransactionsItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosSubmitTransactionRequestPayload = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequestPayload2() {
    }
    AptosSubmitTransactionRequestPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadInput");
    };
    AptosSubmitTransactionRequestPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSubmitTransactionRequestPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestPayloadValue");
    };
    return AptosSubmitTransactionRequestPayload2;
  }()
);
var AptosSubmitTransactionRequestSignature = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequestSignature2() {
    }
    AptosSubmitTransactionRequestSignature2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      if (AptosMultiAgentSignatureRequest.isInput(input)) {
        return AptosMultiAgentSignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureInput");
    };
    AptosSubmitTransactionRequestSignature2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiAgentSignatureRequest.isJSON(json)) {
        return AptosMultiAgentSignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSubmitTransactionRequestSignature2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiAgentSignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSubmitTransactionRequestSignatureValue");
    };
    return AptosSubmitTransactionRequestSignature2;
  }()
);
var AptosSubmitTransactionRequest = (
  /** @class */
  function() {
    function AptosSubmitTransactionRequest2(input) {
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosSubmitTransactionRequestPayload.create(input.payload);
      this.signature = AptosSubmitTransactionRequestSignature.create(input.signature);
    }
    AptosSubmitTransactionRequest2.create = function(input) {
      if (input instanceof AptosSubmitTransactionRequest2) {
        return input;
      }
      return new AptosSubmitTransactionRequest2(input);
    };
    AptosSubmitTransactionRequest2.fromJSON = function(json) {
      var input = {
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosSubmitTransactionRequestPayload.fromJSON(json.payload),
        signature: AptosSubmitTransactionRequestSignature.fromJSON(json.signature)
      };
      return AptosSubmitTransactionRequest2.create(input);
    };
    AptosSubmitTransactionRequest2.prototype.toJSON = function() {
      return {
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosSubmitTransactionRequestPayload.toJSON(this.payload),
        signature: AptosSubmitTransactionRequestSignature.toJSON(this.signature)
      };
    };
    return AptosSubmitTransactionRequest2;
  }()
);
var SubmitTransactionOperation = {
  operationId: "submitTransaction",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosPendingTransaction.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosSubmitTransactionRequest.create(body);
    return value.toJSON();
  }
};
var AptosGetTransactionByHash = (
  /** @class */
  function() {
    function AptosGetTransactionByHash2() {
    }
    AptosGetTransactionByHash2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByHashInput");
    };
    AptosGetTransactionByHash2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionByHashJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionByHash2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByHashValue");
    };
    return AptosGetTransactionByHash2;
  }()
);
var GetTransactionByHashOperation = {
  operationId: "getTransactionByHash",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/by_hash/{txn_hash}",
  parameterNames: ["txn_hash", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTransactionByHash.fromJSON(json);
  },
  serializeRequest: function(request) {
    var txnHash = request.txnHash;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      txn_hash: txnHash,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetTransactionByVersion = (
  /** @class */
  function() {
    function AptosGetTransactionByVersion2() {
    }
    AptosGetTransactionByVersion2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionInput");
    };
    AptosGetTransactionByVersion2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetTransactionByVersion2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetTransactionByVersionValue");
    };
    return AptosGetTransactionByVersion2;
  }()
);
var GetTransactionByVersionOperation = {
  operationId: "getTransactionByVersion",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/by_version/{txn_version}",
  parameterNames: ["txn_version", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosGetTransactionByVersion.fromJSON(json);
  },
  serializeRequest: function(request) {
    var txnVersion = request.txnVersion;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      txn_version: txnVersion,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosGetAccountTransactionsItem = (
  /** @class */
  function() {
    function AptosGetAccountTransactionsItem2() {
    }
    AptosGetAccountTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemInput");
    };
    AptosGetAccountTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosGetAccountTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosGetAccountTransactionsItemValue");
    };
    return AptosGetAccountTransactionsItem2;
  }()
);
var GetAccountTransactionsOperation = {
  operationId: "getAccountTransactions",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/accounts/{address}/transactions",
  parameterNames: ["address", "limit", "start", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return AptosGetAccountTransactionsItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var address = request.address;
    var limit = request.limit;
    var start = request.start;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      address,
      limit,
      start,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosSubmitBatchTransactionResult = (
  /** @class */
  function() {
    function AptosSubmitBatchTransactionResult2(input) {
      this.transactionFailures = input.transactionFailures;
    }
    AptosSubmitBatchTransactionResult2.create = function(input) {
      if (input instanceof AptosSubmitBatchTransactionResult2) {
        return input;
      }
      return new AptosSubmitBatchTransactionResult2(input);
    };
    AptosSubmitBatchTransactionResult2.fromJSON = function(json) {
      var input = {
        transactionFailures: json.transaction_failures
      };
      return AptosSubmitBatchTransactionResult2.create(input);
    };
    AptosSubmitBatchTransactionResult2.prototype.toJSON = function() {
      return {
        transaction_failures: this.transactionFailures
      };
    };
    return AptosSubmitBatchTransactionResult2;
  }()
);
var SubmitBatchTransactionsOperation = {
  operationId: "submitBatchTransactions",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/batch",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosSubmitBatchTransactionResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = body.map(function(item) {
      return AptosSubmitTransactionRequest.create(item);
    });
    return value.map(function(item) {
      return item.toJSON();
    });
  }
};
var AptosSimulateTransaction = (
  /** @class */
  function() {
    function AptosSimulateTransaction2() {
    }
    AptosSimulateTransaction2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosSimulateTransactionInput");
    };
    AptosSimulateTransaction2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosSimulateTransactionJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosSimulateTransaction2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosSimulateTransactionValue");
    };
    return AptosSimulateTransaction2;
  }()
);
var SimulateTransactionOperation = {
  operationId: "simulateTransaction",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/simulate",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return AptosSimulateTransaction.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosSubmitTransactionRequest.create(body);
    return value.toJSON();
  }
};
var AptosEncodeSubmissionRequestPayload = (
  /** @class */
  function() {
    function AptosEncodeSubmissionRequestPayload2() {
    }
    AptosEncodeSubmissionRequestPayload2.create = function(input) {
      if (AptosEntryFunctionPayloadRequest.isInput(input)) {
        return AptosEntryFunctionPayloadRequest.create(input);
      }
      if (AptosScriptPayloadRequest.isInput(input)) {
        return AptosScriptPayloadRequest.create(input);
      }
      if (AptosModuleBundlePayloadRequest.isInput(input)) {
        return AptosModuleBundlePayloadRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadInput");
    };
    AptosEncodeSubmissionRequestPayload2.fromJSON = function(json) {
      if (AptosEntryFunctionPayloadRequest.isJSON(json)) {
        return AptosEntryFunctionPayloadRequest.fromJSON(json);
      }
      if (AptosScriptPayloadRequest.isJSON(json)) {
        return AptosScriptPayloadRequest.fromJSON(json);
      }
      if (AptosModuleBundlePayloadRequest.isJSON(json)) {
        return AptosModuleBundlePayloadRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosEncodeSubmissionRequestPayload2.toJSON = function(value) {
      if (value instanceof AptosEntryFunctionPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosScriptPayloadRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosModuleBundlePayloadRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosEncodeSubmissionRequestPayloadValue");
    };
    return AptosEncodeSubmissionRequestPayload2;
  }()
);
var AptosEncodeSubmissionRequest = (
  /** @class */
  function() {
    function AptosEncodeSubmissionRequest2(input) {
      this.sender = AptosAddress.create(input.sender);
      this.sequenceNumber = input.sequenceNumber;
      this.maxGasAmount = input.maxGasAmount;
      this.gasUnitPrice = input.gasUnitPrice;
      this.expirationTimestampSecs = input.expirationTimestampSecs;
      this.payload = AptosEncodeSubmissionRequestPayload.create(input.payload);
      this.secondarySigners = input.secondarySigners;
    }
    AptosEncodeSubmissionRequest2.create = function(input) {
      if (input instanceof AptosEncodeSubmissionRequest2) {
        return input;
      }
      return new AptosEncodeSubmissionRequest2(input);
    };
    AptosEncodeSubmissionRequest2.fromJSON = function(json) {
      var input = {
        sender: AptosAddress.fromJSON(json.sender),
        sequenceNumber: json.sequence_number,
        maxGasAmount: json.max_gas_amount,
        gasUnitPrice: json.gas_unit_price,
        expirationTimestampSecs: json.expiration_timestamp_secs,
        payload: AptosEncodeSubmissionRequestPayload.fromJSON(json.payload),
        secondarySigners: json.secondary_signers
      };
      return AptosEncodeSubmissionRequest2.create(input);
    };
    AptosEncodeSubmissionRequest2.prototype.toJSON = function() {
      return {
        sender: this.sender.toJSON(),
        sequence_number: this.sequenceNumber,
        max_gas_amount: this.maxGasAmount,
        gas_unit_price: this.gasUnitPrice,
        expiration_timestamp_secs: this.expirationTimestampSecs,
        payload: AptosEncodeSubmissionRequestPayload.toJSON(this.payload),
        secondary_signers: this.secondarySigners
      };
    };
    return AptosEncodeSubmissionRequest2;
  }()
);
var EncodeSubmissionOperation = {
  operationId: "encodeSubmission",
  groupName: "transactions",
  httpMethod: "post",
  routePattern: "/transactions/encode_submission",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return json;
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = AptosEncodeSubmissionRequest.create(body);
    return value.toJSON();
  }
};
var AptosEstimateGasPriceResult = (
  /** @class */
  function() {
    function AptosEstimateGasPriceResult2(input) {
      this.deprioritizedGasEstimate = input.deprioritizedGasEstimate;
      this.gasEstimate = input.gasEstimate;
      this.prioritizedGasEstimate = input.prioritizedGasEstimate;
    }
    AptosEstimateGasPriceResult2.create = function(input) {
      if (input instanceof AptosEstimateGasPriceResult2) {
        return input;
      }
      return new AptosEstimateGasPriceResult2(input);
    };
    AptosEstimateGasPriceResult2.fromJSON = function(json) {
      var input = {
        deprioritizedGasEstimate: json.deprioritized_gas_estimate,
        gasEstimate: json.gas_estimate,
        prioritizedGasEstimate: json.prioritized_gas_estimate
      };
      return AptosEstimateGasPriceResult2.create(input);
    };
    AptosEstimateGasPriceResult2.prototype.toJSON = function() {
      return {
        deprioritized_gas_estimate: this.deprioritizedGasEstimate,
        gas_estimate: this.gasEstimate,
        prioritized_gas_estimate: this.prioritizedGasEstimate
      };
    };
    return AptosEstimateGasPriceResult2;
  }()
);
var EstimateGasPriceOperation = {
  operationId: "estimateGasPrice",
  groupName: "transactions",
  httpMethod: "get",
  routePattern: "/transactions/estimate_gas_price",
  parameterNames: ["network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosEstimateGasPriceResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      network: network ? network.toJSON() : void 0
    };
  }
};
var AptosBlockTransactionsItem = (
  /** @class */
  function() {
    function AptosBlockTransactionsItem2() {
    }
    AptosBlockTransactionsItem2.create = function(input) {
      if (AptosPendingTransaction.isInput(input)) {
        return AptosPendingTransaction.create(input);
      }
      if (AptosUserTransaction.isInput(input)) {
        return AptosUserTransaction.create(input);
      }
      if (AptosGenesisTransaction.isInput(input)) {
        return AptosGenesisTransaction.create(input);
      }
      if (AptosBlockMetadataTransaction.isInput(input)) {
        return AptosBlockMetadataTransaction.create(input);
      }
      if (AptosStateCheckpointTransaction.isInput(input)) {
        return AptosStateCheckpointTransaction.create(input);
      }
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemInput");
    };
    AptosBlockTransactionsItem2.fromJSON = function(json) {
      if (AptosPendingTransaction.isJSON(json)) {
        return AptosPendingTransaction.fromJSON(json);
      }
      if (AptosUserTransaction.isJSON(json)) {
        return AptosUserTransaction.fromJSON(json);
      }
      if (AptosGenesisTransaction.isJSON(json)) {
        return AptosGenesisTransaction.fromJSON(json);
      }
      if (AptosBlockMetadataTransaction.isJSON(json)) {
        return AptosBlockMetadataTransaction.fromJSON(json);
      }
      if (AptosStateCheckpointTransaction.isJSON(json)) {
        return AptosStateCheckpointTransaction.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosBlockTransactionsItem2.toJSON = function(value) {
      if (value instanceof AptosPendingTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosUserTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosGenesisTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosBlockMetadataTransaction) {
        return value.toJSON();
      }
      if (value instanceof AptosStateCheckpointTransaction) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosBlockTransactionsItemValue");
    };
    return AptosBlockTransactionsItem2;
  }()
);
var AptosBlock = (
  /** @class */
  function() {
    function AptosBlock2(input) {
      this.blockHeight = input.blockHeight;
      this.blockHash = input.blockHash;
      this.blockTimestamp = input.blockTimestamp;
      this.firstVersion = input.firstVersion;
      this.lastVersion = input.lastVersion;
      this.transactions = input.transactions ? input.transactions.map(function(item) {
        return AptosBlockTransactionsItem.create(item);
      }) : void 0;
    }
    AptosBlock2.create = function(input) {
      if (input instanceof AptosBlock2) {
        return input;
      }
      return new AptosBlock2(input);
    };
    AptosBlock2.fromJSON = function(json) {
      var input = {
        blockHeight: json.block_height,
        blockHash: json.block_hash,
        blockTimestamp: json.block_timestamp,
        firstVersion: json.first_version,
        lastVersion: json.last_version,
        transactions: json.transactions ? json.transactions.map(function(item) {
          return AptosBlockTransactionsItem.fromJSON(item);
        }) : void 0
      };
      return AptosBlock2.create(input);
    };
    AptosBlock2.prototype.toJSON = function() {
      return {
        block_height: this.blockHeight,
        block_hash: this.blockHash,
        block_timestamp: this.blockTimestamp,
        first_version: this.firstVersion,
        last_version: this.lastVersion,
        transactions: this.transactions ? this.transactions.map(function(item) {
          return AptosBlockTransactionsItem.toJSON(item);
        }) : void 0
      };
    };
    return AptosBlock2;
  }()
);
var GetBlockByHeightOperation = {
  operationId: "getBlockByHeight",
  groupName: "blocks",
  httpMethod: "get",
  routePattern: "/blocks/{block_height}",
  parameterNames: ["block_height", "with_transactions", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosBlock.fromJSON(json);
  },
  serializeRequest: function(request) {
    var blockHeight = request.blockHeight;
    var withTransactions = request.withTransactions;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      block_height: blockHeight,
      with_transactions: withTransactions,
      network: network ? network.toJSON() : void 0
    };
  }
};
var GetBlockByVersionOperation = {
  operationId: "getBlockByVersion",
  groupName: "blocks",
  httpMethod: "get",
  routePattern: "/blocks/by_version/{version}",
  parameterNames: ["version", "with_transactions", "network"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return AptosBlock.fromJSON(json);
  },
  serializeRequest: function(request) {
    var version11 = request.version;
    var withTransactions = request.withTransactions;
    var network = request.network ? AptosNetwork.create(request.network) : void 0;
    return {
      version: version11,
      with_transactions: withTransactions,
      network: network ? network.toJSON() : void 0
    };
  }
};
var AbstractClient = (
  /** @class */
  /* @__PURE__ */ function() {
    function AbstractClient2() {
      this.accounts = {
        /**
         * @description Get account
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccount: this.createEndpoint(GetAccountOperation),
        /**
         * @description Get account resources
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Cursor specifying where to start for pagination
         * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountResources: this.createEndpoint(GetAccountResourcesOperation),
        /**
         * @description Get account modules
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Cursor specifying where to start for pagination
         * This cursor cannot be derived manually client-side. Instead, you must call this endpoint once without this query parameter specified, and then use the cursor returned in the X-Aptos-Cursor header in the response. (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountModules: this.createEndpoint(GetAccountModulesOperation),
        /**
         * @description Get account resource
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.resourceType Name of struct to retrieve e.g. 0x1::account::Account
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccountResource: this.createEndpoint(GetAccountResourceOperation),
        /**
         * @description Get account module
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.moduleName Name of module to retrieve
         * @param {String} [request.ledgerVersion] Ledger version to get state of account.
         * If not provided, it will be the latest version (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getAccountModule: this.createEndpoint(GetAccountModuleOperation),
        /**
         * @description Get events by creation number
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {String} request.creationNumber Creation number corresponding to the event stream originating from the given account.
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Starting sequence number of events.
         * If unspecified, by default will retrieve the most recent events (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getEventsByCreationNumber: this.createEndpoint(GetEventsByCreationNumberOperation),
        /**
         * @description Get events by event handle
         * @param request Request with parameters.
         * @param {String} request.address Hex-encoded 32 byte Aptos account, with or without a 0x prefix, for which events are queried. This refers to the account that events were emitted to, not the account hosting the move module that emits that event type.
         * @param {String} request.eventHandle Name of struct to lookup event handle.
         * @param {String} request.fieldName Name of field to lookup event handle.
         * @param {Number} [request.limit] Max number of account resources to retrieve.
         * If not provided, defaults to default page size. (optional)
         * @param {String} [request.start] Starting sequence number of events.
         * If unspecified, by default will retrieve the most recent events (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getEventsByEventHandle: this.createEndpoint(GetEventsByEventHandleOperation)
      };
      this.blocks = {
        /**
         * @description Get block by height
         * @param request Request with parameters.
         * @param {Number} request.blockHeight Block height to lookup. Starts at 0
         * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getBlockByHeight: this.createEndpoint(GetBlockByHeightOperation),
        /**
         * @description Get block by version
         * @param request Request with parameters.
         * @param {Number} request.version Ledger version to lookup block information for.
         * @param {Boolean} [request.withTransactions] If set to true, include all transactions in the block (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getBlockByVersion: this.createEndpoint(GetBlockByVersionOperation)
      };
      this.coins = {
        /**
         * @description Get Coin Metadata by Coin Type Hashes
         * @param request Request with parameters.
         * @param {String[]} request.coinTypeHashes The coin type hashes to fetch info about
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getCoinInfoByCoinTypeHashes: this.createEndpoint(GetCoinInfoByCoinTypeHashesOperation),
        /**
         * @description Get latest deployed coins
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getLatestCoins: this.createEndpoint(GetLatestCoinsOperation),
        /**
         * @description Get Coin Metadata by name range
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromName] The name of the coin to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toName] The name of the coin to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsByNameRange: this.createEndpoint(GetCoinsByNameRangeOperation),
        /**
         * @description Get Coin Metadata by symbol range
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromSymbol] The name of the coin to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toSymbol] The name of the coin to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsBySymbolRange: this.createEndpoint(GetCoinsBySymbolRangeOperation),
        /**
         * @description Get Coin Metadata by creator addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinsByCreators: this.createEndpoint(GetCoinsByCreatorsOperation),
        /**
         * @description Get Coin Transfers by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByOwnerAddresses: this.createEndpoint(GetCoinTransfersByOwnerAddressesOperation),
        /**
         * @description Get Coin Transfers by block heights
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {String[]} request.blockHeights The coin types to fetch info about
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByBlockHeights: this.createEndpoint(GetCoinTransfersByBlockHeightsOperation),
        /**
         * @description Get Coin Transfers by Coin Type
         * @param request Request with parameters.
         * @param {String} request.coinType The coin type to fetch info about
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByCoinType: this.createEndpoint(GetCoinTransfersByCoinTypeOperation),
        /**
         * @description Get top Holders of Coin
         * @param request Request with parameters.
         * @param {String} request.coinTypeHash The coin type hash to fetch info about
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.minAmount] The minimum amount of coins required for a wallet to be included in the results (optional)
         * @param {Number} [request.minVersion] The minimum version on when the balance was last updated (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTopHoldersByCoin: this.createEndpoint(GetTopHoldersByCoinOperation)
      };
      this.collections = {
        /**
         * @description Get NFT Collections
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromName] The name of the collection to start from (inclusive and case sensitive) (optional)
         * @param {String} [request.toName] The name of the collection to end at (inclusive and case sensitive) (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTCollections: this.createEndpoint(GetNFTCollectionsOperation),
        /**
         * @description Get NFT Collections by ids
         * @param request Request with parameters.
         * @param {String[]} request.ids The identifiers of the collections to get
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getNFTCollectionsByIds: this.createEndpoint(GetNFTCollectionsByIdsOperation),
        /**
         * @description Get NFT Collections by creator
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object} request.creatorAddress The address of the creator
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTCollectionsByCreator: this.createEndpoint(GetNFTCollectionsByCreatorOperation)
      };
      this.nfts = {
        /**
         * @description Get NFTs by ids
         * @param request Request with parameters.
         * @param {String[]} request.tokenIds The identifiers of the tokens to get
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getNFTsByIds: this.createEndpoint(GetNFTsByIdsOperation),
        /**
         * @description Get NFTs by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The collection data id hash of the collection
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTsByCollection: this.createEndpoint(GetNFTsByCollectionOperation),
        /**
         * @description Get NFTs by creators
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTsByCreators: this.createEndpoint(GetNFTsByCreatorsOperation),
        /**
         * @description Get NFT Owners by tokens
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {String[]} request.tokenIds The identifiers of the tokens to get owners for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersByTokens: this.createEndpoint(GetNFTOwnersByTokensOperation),
        /**
         * @description Get NFT Owners by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The id of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersByCollection: this.createEndpoint(GetNFTOwnersByCollectionOperation),
        /**
         * @description Get NFT Owners of Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The id of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTOwnersOfCollection: this.createEndpoint(GetNFTOwnersOfCollectionOperation),
        /**
         * @description Get NFT Transfers by Token ids
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {String[]} request.tokenIds The identifiers of the tokens to get
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByIds: this.createEndpoint(GetNFTTransfersByIdsOperation),
        /**
         * @description Get NFT Transfers by Collection
         * @param request Request with parameters.
         * @param {String} request.collectionDataIdHash The collection data id hash of the token
         * @param {Number} request.limit The number of results to return
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.walletWhitelist] The addresses of the wallets to whitelist (optional)
         * @param {String[]} [request.walletBlacklist] The addresses of the wallets to blacklist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByCollection: this.createEndpoint(GetNFTTransfersByCollectionOperation),
        /**
         * @description Get NFT Transfers by creators
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.creatorAddresses The addresses of the creators
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByCreators: this.createEndpoint(GetNFTTransfersByCreatorsOperation),
        /**
         * @description Get NFT Transfers by wallets
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTTransfersByWallets: this.createEndpoint(GetNFTTransfersByWalletsOperation)
      };
      this.transactions = {
        /**
         * @description Get transactions
         * @param request Request with parameters.
         * @param {Number} [request.limit] Max number of transactions to retrieve.
         * If not provided, defaults to default page size (optional)
         * @param {String} [request.start] Account sequence number to start list of transactions.
         * If not provided, defaults to showing the latest transactions (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getTransactions: this.createEndpoint(GetTransactionsOperation),
        /**
         * @description Submit transaction
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        submitTransaction: this.createEndpointWithBody(SubmitTransactionOperation),
        /**
         * @description Get transaction by hash
         * @param request Request with parameters.
         * @param {String} request.txnHash Hash of transaction to retrieve
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTransactionByHash: this.createEndpoint(GetTransactionByHashOperation),
        /**
         * @description Get transaction by version
         * @param request Request with parameters.
         * @param {String} request.txnVersion Version of transaction to retrieve
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getTransactionByVersion: this.createEndpoint(GetTransactionByVersionOperation),
        /**
         * @description Get account transactions
         * @param request Request with parameters.
         * @param {String} request.address Address of account with or without a 0x prefix
         * @param {Number} [request.limit] Max number of transactions to retrieve.
         * If not provided, defaults to default page size (optional)
         * @param {String} [request.start] Account sequence number to start list of transactions.
         * If not provided, defaults to showing the latest transactions (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object[]} Response for the request.
         */
        getAccountTransactions: this.createEndpoint(GetAccountTransactionsOperation),
        /**
         * @description Submit batch transactions
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        submitBatchTransactions: this.createEndpointWithBody(SubmitBatchTransactionsOperation),
        /**
         * @description Simulate transaction
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {Object} body.signature
         * @returns {Object} Response for the request.
         */
        simulateTransaction: this.createEndpointWithBody(SimulateTransactionOperation),
        /**
         * @description Encode submission
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @param body Request body.
         * @param {Object} body.sender A hex encoded 32 byte Aptos account address.
         * @param {String} body.sequenceNumber A string containing a 64-bit unsigned integer.
         * @param {String} body.maxGasAmount A string containing a 64-bit unsigned integer.
         * @param {String} body.gasUnitPrice A string containing a 64-bit unsigned integer.
         * @param {String} body.expirationTimestampSecs A string containing a 64-bit unsigned integer.
         * @param {Object} body.payload An enum of the possible transaction payloads
         * @param {String[]} body.secondarySigners Secondary signer accounts of the request for Multi-agent
         * @returns {String} Response for the request.
         */
        encodeSubmission: this.createEndpointWithBody(EncodeSubmissionOperation),
        /**
         * @description Estimate gas price
         * @param request Request with parameters.
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        estimateGasPrice: this.createEndpoint(EstimateGasPriceOperation)
      };
      this.wallets = {
        /**
         * @description Get Coin Balances by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get coin balances for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.coinTypeHashBlacklist] The coin type hashes of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeHashWhitelist] The coin type hashes of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinBalancesByWallets: this.createEndpoint(GetCoinBalancesByWalletsOperation),
        /**
         * @description Get Historical Coin Balances by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owner addresses to get historical balances for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.coinTypeHashBlacklist] The coin type hash of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeHashWhitelist] The coin type hash of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getHistoricalCoinBalancesByWallets: this.createEndpoint(GetHistoricalCoinBalancesByWalletsOperation),
        /**
         * @description Get Coin Transfers by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String} [request.fromDate] The date from which to fetch coin transfers (optional)
         * @param {String} [request.toDate] The date to which to fetch coin transfers (optional)
         * @param {String[]} [request.coinTypeBlacklist] The coin types of the coins to whitelist (optional)
         * @param {String[]} [request.coinTypeWhitelist] The coin types of the coins to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getCoinTransfersByWalletAddresses: this.createEndpoint(GetCoinTransfersByWalletAddressesOperation),
        /**
         * @description Get NFTs by wallet addresses
         * @param request Request with parameters.
         * @param {Number} request.limit The number of results to return
         * @param {Object[]} request.ownerAddresses The addresses of the owners to get tokens for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The collection data id hashes of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The collection data id hashes of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getNFTByOwners: this.createEndpoint(GetNFTByOwnersOperation),
        /**
         * @description Get NFT Transfers by wallets
         * @param request Request with parameters.
         * @param {Number} request.limit The number of tokens to return
         * @param {Object[]} request.walletAddresses The addresses of the wallets to get transfers for
         * @param {Number} [request.offset] The number of results to skip (optional)
         * @param {String} [request.cursor] The cursor to use for getting the next page (optional)
         * @param {String[]} [request.collectionBlacklist] The ids of the collections to whitelist (optional)
         * @param {String[]} [request.collectionWhitelist] The ids of the collections to whitelist (optional)
         * @param {Object} [request.network] The network of query. Defaults to mainnet. (optional)
         * @returns {Object} Response for the request.
         */
        getWalletsNFTTransfers: this.createEndpoint(GetWalletsNFTTransfersOperation)
      };
    }
    return AbstractClient2;
  }()
);
var AptosMultiAgentSignatureRequestSender = (
  /** @class */
  function() {
    function AptosMultiAgentSignatureRequestSender2() {
    }
    AptosMultiAgentSignatureRequestSender2.create = function(input) {
      if (AptosEd25519SignatureRequest.isInput(input)) {
        return AptosEd25519SignatureRequest.create(input);
      }
      if (AptosMultiEd25519SignatureRequest.isInput(input)) {
        return AptosMultiEd25519SignatureRequest.create(input);
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderInput");
    };
    AptosMultiAgentSignatureRequestSender2.fromJSON = function(json) {
      if (AptosEd25519SignatureRequest.isJSON(json)) {
        return AptosEd25519SignatureRequest.fromJSON(json);
      }
      if (AptosMultiEd25519SignatureRequest.isJSON(json)) {
        return AptosMultiEd25519SignatureRequest.fromJSON(json);
      }
      var keys = Object.keys(json).join(", ");
      var type = json.type;
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderJSON (keys: ".concat(keys, ", type: ").concat(type, ")"));
    };
    AptosMultiAgentSignatureRequestSender2.toJSON = function(value) {
      if (value instanceof AptosEd25519SignatureRequest) {
        return value.toJSON();
      }
      if (value instanceof AptosMultiEd25519SignatureRequest) {
        return value.toJSON();
      }
      throw new Error("Cannot resolve union from AptosMultiAgentSignatureRequestSenderValue");
    };
    return AptosMultiAgentSignatureRequestSender2;
  }()
);

// node_modules/@ethersproject/logger/lib.esm/_version.js
var version = "logger/5.7.0";

// node_modules/@ethersproject/logger/lib.esm/index.js
var _permanentCensorErrors = false;
var _censorErrors = false;
var LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
var _logLevel = LogLevels["default"];
var _globalLogger = null;
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _normalizeError = _checkNormalize();
var LogLevel;
(function(LogLevel2) {
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARNING"] = "WARNING";
  LogLevel2["ERROR"] = "ERROR";
  LogLevel2["OFF"] = "OFF";
})(LogLevel || (LogLevel = {}));
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
  ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
  ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
  ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
  ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
  ErrorCode2["TIMEOUT"] = "TIMEOUT";
  ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
  ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
  ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
  ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
  ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
  ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
  ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
  ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
  ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
  ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
  ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
  ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
  ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
})(ErrorCode || (ErrorCode = {}));
var HEX = "0123456789abcdef";
var Logger = class _Logger {
  constructor(version11) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version11,
      writable: false
    });
  }
  _log(logLevel, args) {
    const level = logLevel.toLowerCase();
    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }
    if (_logLevel > LogLevels[level]) {
      return;
    }
    console.log.apply(console, args);
  }
  debug(...args) {
    this._log(_Logger.levels.DEBUG, args);
  }
  info(...args) {
    this._log(_Logger.levels.INFO, args);
  }
  warn(...args) {
    this._log(_Logger.levels.WARNING, args);
  }
  makeError(message, code, params) {
    if (_censorErrors) {
      return this.makeError("censored error", code, {});
    }
    if (!code) {
      code = _Logger.errors.UNKNOWN_ERROR;
    }
    if (!params) {
      params = {};
    }
    const messageDetails = [];
    Object.keys(params).forEach((key) => {
      const value = params[key];
      try {
        if (value instanceof Uint8Array) {
          let hex = "";
          for (let i = 0; i < value.length; i++) {
            hex += HEX[value[i] >> 4];
            hex += HEX[value[i] & 15];
          }
          messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key + "=" + JSON.stringify(value));
        }
      } catch (error2) {
        messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    let url = "";
    switch (code) {
      case ErrorCode.NUMERIC_FAULT: {
        url = "NUMERIC_FAULT";
        const fault = message;
        switch (fault) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            url += "-" + fault;
            break;
          case "negative-power":
          case "negative-width":
            url += "-unsupported";
            break;
          case "unbound-bitwise-result":
            url += "-unbound-result";
            break;
        }
        break;
      }
      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }
    if (url) {
      message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
    }
    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    }
    const error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function(key) {
      error[key] = params[key];
    });
    return error;
  }
  throwError(message, code, params) {
    throw this.makeError(message, code, params);
  }
  throwArgumentError(message, name, value) {
    return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
      argument: name,
      value
    });
  }
  assert(condition, message, code, params) {
    if (!!condition) {
      return;
    }
    this.throwError(message, code, params);
  }
  assertArgument(condition, message, name, value) {
    if (!!condition) {
      return;
    }
    this.throwArgumentError(message, name, value);
  }
  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }
    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }
  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }
    if (message == null) {
      message = "value not safe";
    }
    if (value < 0 || value >= 9007199254740991) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value
      });
    }
    if (value % 1) {
      this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value
      });
    }
  }
  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }
    if (count < expectedCount) {
      this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
        count,
        expectedCount
      });
    }
    if (count > expectedCount) {
      this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
        count,
        expectedCount
      });
    }
  }
  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
    } else if (target === Object || target == null) {
      this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
    }
  }
  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new _Logger(version);
    }
    return _globalLogger;
  }
  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }
      this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }
  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];
    if (level == null) {
      _Logger.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }
    _logLevel = level;
  }
  static from(version11) {
    return new _Logger(version11);
  }
};
Logger.errors = ErrorCode;
Logger.levels = LogLevel;

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var version2 = "bytes/5.7.0";

// node_modules/@ethersproject/bytes/lib.esm/index.js
var logger = new Logger(version2);
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
var HexCharacters = "0123456789abcdef";
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature)) {
    let bytes = arrayify(signature);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature.r;
    result.s = signature.s;
    result.v = signature.v;
    result.recoveryParam = signature.recoveryParam;
    result._vs = signature._vs;
    if (result._vs != null) {
      const vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
      }
      vs2[0] &= 127;
      const s = hexlify(vs2);
      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature) {
  signature = splitSignature(signature);
  return hexlify(concat([
    signature.r,
    signature.s,
    signature.recoveryParam ? "0x1c" : "0x1b"
  ]));
}

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var import_bn = __toESM(require_bn());

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version3 = "bignumber/5.7.0";

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
var BN = import_bn.default.BN;
var logger2 = new Logger(version3);
var _constructorGuard = {};
var MAX_SAFE = 9007199254740991;
function isBigNumberish(value) {
  return value != null && (BigNumber2.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
var _warnedToStringRadix = false;
var BigNumber2 = class _BigNumber {
  constructor(constructorGuard, hex) {
    if (constructorGuard !== _constructorGuard) {
      logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }
    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }
  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }
  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }
  abs() {
    if (this._hex[0] === "-") {
      return _BigNumber.from(this._hex.substring(1));
    }
    return this;
  }
  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }
  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }
  div(other) {
    const o = _BigNumber.from(other);
    if (o.isZero()) {
      throwFault("division-by-zero", "div");
    }
    return toBigNumber(toBN(this).div(toBN(other)));
  }
  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }
  mod(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("division-by-zero", "mod");
    }
    return toBigNumber(toBN(this).umod(value));
  }
  pow(other) {
    const value = toBN(other);
    if (value.isNeg()) {
      throwFault("negative-power", "pow");
    }
    return toBigNumber(toBN(this).pow(value));
  }
  and(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "and");
    }
    return toBigNumber(toBN(this).and(value));
  }
  or(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "or");
    }
    return toBigNumber(toBN(this).or(value));
  }
  xor(other) {
    const value = toBN(other);
    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "xor");
    }
    return toBigNumber(toBN(this).xor(value));
  }
  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "mask");
    }
    return toBigNumber(toBN(this).maskn(value));
  }
  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shl");
    }
    return toBigNumber(toBN(this).shln(value));
  }
  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shr");
    }
    return toBigNumber(toBN(this).shrn(value));
  }
  eq(other) {
    return toBN(this).eq(toBN(other));
  }
  lt(other) {
    return toBN(this).lt(toBN(other));
  }
  lte(other) {
    return toBN(this).lte(toBN(other));
  }
  gt(other) {
    return toBN(this).gt(toBN(other));
  }
  gte(other) {
    return toBN(this).gte(toBN(other));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return toBN(this).isZero();
  }
  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e) {
    }
    return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
      }
    }
    return toBN(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(key) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(value) {
    if (value instanceof _BigNumber) {
      return value;
    }
    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new _BigNumber(_constructorGuard, toHex(value));
      }
      if (value.match(/^-?[0-9]+$/)) {
        return new _BigNumber(_constructorGuard, toHex(new BN(value)));
      }
      return logger2.throwArgumentError("invalid BigNumber string", "value", value);
    }
    if (typeof value === "number") {
      if (value % 1) {
        throwFault("underflow", "BigNumber.from", value);
      }
      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault("overflow", "BigNumber.from", value);
      }
      return _BigNumber.from(String(value));
    }
    const anyValue = value;
    if (typeof anyValue === "bigint") {
      return _BigNumber.from(anyValue.toString());
    }
    if (isBytes(anyValue)) {
      return _BigNumber.from(hexlify(anyValue));
    }
    if (anyValue) {
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();
        if (typeof hex === "string") {
          return _BigNumber.from(hex);
        }
      } else {
        let hex = anyValue._hex;
        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }
        if (typeof hex === "string") {
          if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
            return _BigNumber.from(hex);
          }
        }
      }
    }
    return logger2.throwArgumentError("invalid BigNumber value", "value", value);
  }
  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }
};
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber2.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber2.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
var logger3 = new Logger(version3);
var _constructorGuard2 = {};
var Zero = BigNumber2.from(0);
var NegativeOne = BigNumber2.from(-1);
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
var zeros = "0";
while (zeros.length < 256) {
  zeros += zeros;
}
function getMultiplier2(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber2.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier2(decimals);
  value = BigNumber2.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier2(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber2.from(whole);
  const fractionValue = BigNumber2.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var FixedFormat = class _FixedFormat {
  constructor(constructorGuard, signed2, width, decimals) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.signed = signed2;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier2(decimals);
    Object.freeze(this);
  }
  static from(value) {
    if (value instanceof _FixedFormat) {
      return value;
    }
    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }
    let signed2 = true;
    let width = 128;
    let decimals = 18;
    if (typeof value === "string") {
      if (value === "fixed") {
      } else if (value === "ufixed") {
        signed2 = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
        if (!match) {
          logger3.throwArgumentError("invalid fixed format", "format", value);
        }
        signed2 = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key, type, defaultValue) => {
        if (value[key] == null) {
          return defaultValue;
        }
        if (typeof value[key] !== type) {
          logger3.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
        }
        return value[key];
      };
      signed2 = check("signed", "boolean", signed2);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }
    if (decimals > 80) {
      logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }
    return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
  }
};
var FixedNumber = class _FixedNumber {
  constructor(constructorGuard, hex, value, format) {
    if (constructorGuard !== _constructorGuard2) {
      logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }
    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }
  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }
  addUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
  }
  subUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
  }
  mulUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
  }
  divUnsafe(other) {
    this._checkFormat(other);
    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return _FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
  }
  floor() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  ceiling() {
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    let result = _FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);
    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }
    return result;
  }
  // @TODO: Support other rounding algorithms
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    const comps = this.toString().split(".");
    if (comps.length === 1) {
      comps.push("0");
    }
    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
    }
    if (comps[1].length <= decimals) {
      return this;
    }
    const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }
  isZero() {
    return this._value === "0.0" || this._value === "0";
  }
  isNegative() {
    return this._value[0] === "-";
  }
  toString() {
    return this._value;
  }
  toHexString(width) {
    if (width == null) {
      return this._hex;
    }
    if (width % 8) {
      logger3.throwArgumentError("invalid byte width", "width", width);
    }
    const hex = BigNumber2.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
    return hexZeroPad(hex, width / 8);
  }
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  toFormat(format) {
    return _FixedNumber.fromString(this._value, format);
  }
  static fromValue(value, decimals, format) {
    if (format == null && decimals != null && !isBigNumberish(decimals)) {
      format = decimals;
      decimals = null;
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (format == null) {
      format = "fixed";
    }
    return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
  }
  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    const numeric = parseFixed(value, fixedFormat.decimals);
    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault2("unsigned value cannot be negative", "overflow", "value", value);
    }
    let hex = null;
    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = hexZeroPad(hex, fixedFormat.width / 8);
    }
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }
    const fixedFormat = FixedFormat.from(format);
    if (arrayify(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }
    let numeric = BigNumber2.from(value);
    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }
    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
  }
  static from(value, format) {
    if (typeof value === "string") {
      return _FixedNumber.fromString(value, format);
    }
    if (isBytes(value)) {
      return _FixedNumber.fromBytes(value, format);
    }
    try {
      return _FixedNumber.fromValue(value, 0, format);
    } catch (error) {
      if (error.code !== Logger.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }
    return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
  }
  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }
};
var ONE = FixedNumber.from(1);
var BUMP = FixedNumber.from("0.5");

// node_modules/@ethersproject/keccak256/lib.esm/index.js
var import_js_sha3 = __toESM(require_sha3());
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var version4 = "rlp/5.7.0";

// node_modules/@ethersproject/rlp/lib.esm/index.js
var logger4 = new Logger(version4);

// node_modules/@ethersproject/address/lib.esm/_version.js
var version5 = "address/5.7.0";

// node_modules/@ethersproject/address/lib.esm/index.js
var logger5 = new Logger(version5);
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger5.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var MAX_SAFE_INTEGER = 9007199254740991;
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
var ibanLookup = {};
for (let i = 0; i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}
for (let i = 0; i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger5.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger5.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger5.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger5.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {
  }
  return false;
}

// node_modules/@moralisweb3/common-evm-utils/lib/esm/index.js
var EvmNftTradesChainList = (
  /** @class */
  function() {
    function EvmNftTradesChainList2() {
    }
    EvmNftTradesChainList2.create = function(input) {
      return input;
    };
    EvmNftTradesChainList2.fromJSON = function(json) {
      return json;
    };
    return EvmNftTradesChainList2;
  }()
);
var EvmGetNFTTradesMarketplaceEnum = (
  /** @class */
  function() {
    function EvmGetNFTTradesMarketplaceEnum2() {
    }
    EvmGetNFTTradesMarketplaceEnum2.create = function(input) {
      return input;
    };
    EvmGetNFTTradesMarketplaceEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmGetNFTTradesMarketplaceEnum2;
  }()
);
var EvmChainList = (
  /** @class */
  function() {
    function EvmChainList2() {
    }
    EvmChainList2.create = function(input) {
      return input;
    };
    EvmChainList2.fromJSON = function(json) {
      return json;
    };
    return EvmChainList2;
  }()
);
var EvmGetMultipleTokenPricesIncludeEnum = (
  /** @class */
  function() {
    function EvmGetMultipleTokenPricesIncludeEnum2() {
    }
    EvmGetMultipleTokenPricesIncludeEnum2.create = function(input) {
      return input;
    };
    EvmGetMultipleTokenPricesIncludeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmGetMultipleTokenPricesIncludeEnum2;
  }()
);
var EvmOrderList = (
  /** @class */
  function() {
    function EvmOrderList2() {
    }
    EvmOrderList2.create = function(input) {
      return input;
    };
    EvmOrderList2.fromJSON = function(json) {
      return json;
    };
    return EvmOrderList2;
  }()
);
var EvmResolveAddressToDomainCurrencyEnum = (
  /** @class */
  function() {
    function EvmResolveAddressToDomainCurrencyEnum2() {
    }
    EvmResolveAddressToDomainCurrencyEnum2.create = function(input) {
      return input;
    };
    EvmResolveAddressToDomainCurrencyEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmResolveAddressToDomainCurrencyEnum2;
  }()
);
var EvmDefiProtocolList = (
  /** @class */
  function() {
    function EvmDefiProtocolList2() {
    }
    EvmDefiProtocolList2.create = function(input) {
      return input;
    };
    EvmDefiProtocolList2.fromJSON = function(json) {
      return json;
    };
    return EvmDefiProtocolList2;
  }()
);
var EvmDiscoveryApiChainsList = (
  /** @class */
  function() {
    function EvmDiscoveryApiChainsList2() {
    }
    EvmDiscoveryApiChainsList2.create = function(input) {
      return input;
    };
    EvmDiscoveryApiChainsList2.fromJSON = function(json) {
      return json;
    };
    return EvmDiscoveryApiChainsList2;
  }()
);
var EvmETransactionCategory = (
  /** @class */
  function() {
    function EvmETransactionCategory2() {
    }
    EvmETransactionCategory2.create = function(input) {
      return input;
    };
    EvmETransactionCategory2.fromJSON = function(json) {
      return json;
    };
    return EvmETransactionCategory2;
  }()
);
var EvmErc20MetadataLinks = (
  /** @class */
  function() {
    function EvmErc20MetadataLinks2() {
    }
    EvmErc20MetadataLinks2.create = function(input) {
      return input;
    };
    EvmErc20MetadataLinks2.fromJSON = function(json) {
      return json;
    };
    return EvmErc20MetadataLinks2;
  }()
);
var EvmContractsReviewItemReportTypeEnum = (
  /** @class */
  function() {
    function EvmContractsReviewItemReportTypeEnum2() {
    }
    EvmContractsReviewItemReportTypeEnum2.create = function(input) {
      return input;
    };
    EvmContractsReviewItemReportTypeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmContractsReviewItemReportTypeEnum2;
  }()
);
var EvmContractsReviewItemContractTypeEnum = (
  /** @class */
  function() {
    function EvmContractsReviewItemContractTypeEnum2() {
    }
    EvmContractsReviewItemContractTypeEnum2.create = function(input) {
      return input;
    };
    EvmContractsReviewItemContractTypeEnum2.fromJSON = function(json) {
      return json;
    };
    return EvmContractsReviewItemContractTypeEnum2;
  }()
);
var EvmDefiPositionDetailsNftMetadata = (
  /** @class */
  function() {
    function EvmDefiPositionDetailsNftMetadata2() {
    }
    EvmDefiPositionDetailsNftMetadata2.create = function(input) {
      return input;
    };
    EvmDefiPositionDetailsNftMetadata2.fromJSON = function(json) {
      return json;
    };
    return EvmDefiPositionDetailsNftMetadata2;
  }()
);
var EvmNormalizedMetadataAttributeValue = (
  /** @class */
  function() {
    function EvmNormalizedMetadataAttributeValue2() {
    }
    EvmNormalizedMetadataAttributeValue2.create = function(input) {
      return input;
    };
    EvmNormalizedMetadataAttributeValue2.fromJSON = function(json) {
      return json;
    };
    return EvmNormalizedMetadataAttributeValue2;
  }()
);
var extendStatics4 = function(d, b) {
  extendStatics4 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics4(d, b);
};
function __extends4(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics4(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign3 = function() {
  __assign3 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function __spreadArray2(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var EvmAddress = (
  /** @class */
  function() {
    function EvmAddress2(address) {
      this._value = EvmAddress2.parse(address);
    }
    Object.defineProperty(EvmAddress2, "ZERO_ADDRESS", {
      /**
       * @returns EvmAddress instance of the zero address: "0x0000000000000000000000000000000000000000"
       * @example `EvmAddress.ZERO_ADDRESS`
       */
      get: function() {
        return EvmAddress2.create("0x0000000000000000000000000000000000000000");
      },
      enumerable: false,
      configurable: true
    });
    EvmAddress2.create = function(address) {
      if (address instanceof EvmAddress2) {
        return address;
      }
      return new EvmAddress2(address);
    };
    EvmAddress2.fromJSON = function(address) {
      return new EvmAddress2(address);
    };
    EvmAddress2.parse = function(address) {
      if (!isAddress(address)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid address provided: ".concat(address)
        });
      }
      return getAddress(address);
    };
    EvmAddress2.equals = function(addressA, addressB) {
      return EvmAddress2.create(addressA)._value === EvmAddress2.create(addressB)._value;
    };
    EvmAddress2.prototype.equals = function(address) {
      return EvmAddress2.equals(this, address);
    };
    Object.defineProperty(EvmAddress2.prototype, "checksum", {
      /**
       * @returns the address value in checksum (EIP-55) format (see https://eips.ethereum.org/EIPS/eip-55)
       * @example `address.checksum // "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359"`
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmAddress2.prototype, "lowercase", {
      /**
       * @returns the address value in lowercase format
       * @example `address.lowercase // "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359"`
       */
      get: function() {
        return this._value.toLowerCase();
      },
      enumerable: false,
      configurable: true
    });
    EvmAddress2.prototype.toJSON = function() {
      return this.lowercase;
    };
    return EvmAddress2;
  }()
);
var chainList = [
  {
    name: "Ethereum Mainnet",
    chain: "ETH",
    icon: "ethereum",
    rpc: [
      "https://mainnet.infura.io/v3/${INFURA_API_KEY}",
      "wss://mainnet.infura.io/ws/v3/${INFURA_API_KEY}",
      "https://api.mycryptoapi.com/eth",
      "https://cloudflare-eth.com",
      "https://ethereum-rpc.publicnode.com",
      "wss://ethereum-rpc.publicnode.com",
      "https://mainnet.gateway.tenderly.co",
      "wss://mainnet.gateway.tenderly.co",
      "https://rpc.blocknative.com/boost",
      "https://rpc.flashbots.net",
      "https://rpc.flashbots.net/fast",
      "https://rpc.mevblocker.io",
      "https://rpc.mevblocker.io/fast",
      "https://rpc.mevblocker.io/noreverts",
      "https://rpc.mevblocker.io/fullprivacy",
      "https://eth.drpc.org",
      "wss://eth.drpc.org"
    ],
    features: [
      {
        name: "EIP155"
      },
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://ethereum.org",
    shortName: "eth",
    chainId: 1,
    networkId: 1,
    slip44: 60,
    ens: {
      registry: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
    },
    explorers: [
      {
        name: "etherscan",
        url: "https://etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://eth.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://ethereum.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Goerli",
    title: "Ethereum Testnet Goerli",
    chain: "ETH",
    rpc: [
      "https://goerli.infura.io/v3/${INFURA_API_KEY}",
      "wss://goerli.infura.io/v3/${INFURA_API_KEY}",
      "https://rpc.goerli.mudit.blog/",
      "https://ethereum-goerli-rpc.publicnode.com",
      "wss://ethereum-goerli-rpc.publicnode.com",
      "https://goerli.gateway.tenderly.co",
      "wss://goerli.gateway.tenderly.co"
    ],
    faucets: [
      "http://fauceth.komputing.org?chain=5&address=${ADDRESS}",
      "https://goerli-faucet.slock.it?address=${ADDRESS}",
      "https://faucet.goerli.mudit.blog"
    ],
    nativeCurrency: {
      name: "Goerli Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://goerli.net/#about",
    shortName: "gor",
    chainId: 5,
    networkId: 5,
    slip44: 1,
    ens: {
      registry: "0x112234455c3a32fd11230c42e7bccd4a84e02010"
    },
    explorers: [
      {
        name: "etherscan-goerli",
        url: "https://goerli.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout-goerli",
        url: "https://eth-goerli.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "OP Mainnet",
    chain: "ETH",
    rpc: [
      "https://mainnet.optimism.io",
      "https://optimism-rpc.publicnode.com",
      "wss://optimism-rpc.publicnode.com",
      "https://optimism.gateway.tenderly.co",
      "wss://optimism.gateway.tenderly.co",
      "https://optimism.drpc.org",
      "wss://optimism.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://optimism.io",
    shortName: "oeth",
    chainId: 10,
    networkId: 10,
    explorers: [
      {
        name: "etherscan",
        url: "https://optimistic.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://optimism.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://optimism.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Cronos Mainnet",
    chain: "CRO",
    rpc: [
      "https://evm.cronos.org",
      "https://cronos-evm-rpc.publicnode.com",
      "wss://cronos-evm-rpc.publicnode.com",
      "https://cronos.drpc.org",
      "wss://cronos.drpc.org"
    ],
    features: [
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Cronos",
      symbol: "CRO",
      decimals: 18
    },
    infoURL: "https://cronos.org/",
    shortName: "cro",
    chainId: 25,
    networkId: 25,
    explorers: [
      {
        name: "Cronos Explorer",
        url: "https://explorer.cronos.org",
        standard: "none"
      }
    ]
  },
  {
    name: "BNB Smart Chain Mainnet",
    chain: "BSC",
    rpc: [
      "https://bsc-dataseed1.bnbchain.org",
      "https://bsc-dataseed2.bnbchain.org",
      "https://bsc-dataseed3.bnbchain.org",
      "https://bsc-dataseed4.bnbchain.org",
      "https://bsc-dataseed1.defibit.io",
      "https://bsc-dataseed2.defibit.io",
      "https://bsc-dataseed3.defibit.io",
      "https://bsc-dataseed4.defibit.io",
      "https://bsc-dataseed1.ninicoin.io",
      "https://bsc-dataseed2.ninicoin.io",
      "https://bsc-dataseed3.ninicoin.io",
      "https://bsc-dataseed4.ninicoin.io",
      "https://bsc-rpc.publicnode.com",
      "wss://bsc-rpc.publicnode.com",
      "wss://bsc-ws-node.nariox.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "BNB Chain Native Token",
      symbol: "BNB",
      decimals: 18
    },
    infoURL: "https://www.bnbchain.org/en",
    shortName: "bnb",
    chainId: 56,
    networkId: 56,
    slip44: 714,
    explorers: [
      {
        name: "bscscan",
        url: "https://bscscan.com",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://bnb.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "BNB Smart Chain Testnet",
    chain: "BSC",
    rpc: [
      "https://data-seed-prebsc-1-s1.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s1.bnbchain.org:8545",
      "https://data-seed-prebsc-1-s2.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s2.bnbchain.org:8545",
      "https://data-seed-prebsc-1-s3.bnbchain.org:8545",
      "https://data-seed-prebsc-2-s3.bnbchain.org:8545",
      "https://bsc-testnet-rpc.publicnode.com",
      "wss://bsc-testnet-rpc.publicnode.com"
    ],
    faucets: ["https://testnet.bnbchain.org/faucet-smart"],
    nativeCurrency: {
      name: "BNB Chain Native Token",
      symbol: "tBNB",
      decimals: 18
    },
    infoURL: "https://www.bnbchain.org/en",
    shortName: "bnbt",
    chainId: 97,
    networkId: 97,
    slip44: 1,
    explorers: [
      {
        name: "bscscan-testnet",
        url: "https://testnet.bscscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Gnosis",
    chain: "GNO",
    icon: "gnosis",
    rpc: [
      "https://rpc.gnosischain.com",
      "https://rpc.gnosis.gateway.fm",
      "https://rpc.ankr.com/gnosis",
      "https://gnosischain-rpc.gateway.pokt.network",
      "https://gnosis-mainnet.public.blastapi.io",
      "https://gnosis.api.onfinality.io/public",
      "https://gnosis.blockpi.network/v1/rpc/public",
      "https://web3endpoints.com/gnosischain-mainnet",
      "https://gnosis.oat.farm",
      "wss://rpc.gnosischain.com/wss",
      "https://gnosis-rpc.publicnode.com",
      "wss://gnosis-rpc.publicnode.com"
    ],
    faucets: [
      "https://gnosisfaucet.com",
      "https://stakely.io/faucet/gnosis-chain-xdai",
      "https://faucet.prussia.dev/xdai"
    ],
    nativeCurrency: {
      name: "xDAI",
      symbol: "XDAI",
      decimals: 18
    },
    infoURL: "https://docs.gnosischain.com",
    shortName: "gno",
    chainId: 100,
    networkId: 100,
    slip44: 700,
    explorers: [
      {
        name: "gnosisscan",
        url: "https://gnosisscan.io",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://gnosis.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://gnosis.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Polygon Mainnet",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://polygon-rpc.com/",
      "https://rpc-mainnet.matic.network",
      "https://matic-mainnet.chainstacklabs.com",
      "https://rpc-mainnet.maticvigil.com",
      "https://rpc-mainnet.matic.quiknode.pro",
      "https://matic-mainnet-full-rpc.bwarelabs.com",
      "https://polygon-bor-rpc.publicnode.com",
      "wss://polygon-bor-rpc.publicnode.com",
      "https://polygon.gateway.tenderly.co",
      "wss://polygon.gateway.tenderly.co",
      "https://polygon.drpc.org",
      "wss://polygon.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "matic",
    chainId: 137,
    networkId: 137,
    slip44: 966,
    explorers: [
      {
        name: "polygonscan",
        url: "https://polygonscan.com",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://polygon.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Fantom Opera",
    chain: "FTM",
    rpc: [
      "https://rpc.ftm.tools",
      "https://fantom-rpc.publicnode.com",
      "wss://fantom-rpc.publicnode.com",
      "https://fantom.drpc.org",
      "wss://fantom.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Fantom",
      symbol: "FTM",
      decimals: 18
    },
    infoURL: "https://fantom.foundation",
    shortName: "ftm",
    chainId: 250,
    networkId: 250,
    icon: "fantom",
    explorers: [
      {
        name: "ftmscan",
        url: "https://ftmscan.com",
        icon: "ftmscan",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://fantom.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Moonbeam",
    chain: "MOON",
    rpc: [
      "https://rpc.api.moonbeam.network",
      "wss://wss.api.moonbeam.network",
      "https://moonbeam-rpc.publicnode.com",
      "wss://moonbeam-rpc.publicnode.com",
      "https://moonbeam.drpc.org",
      "wss://moonbeam.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Glimmer",
      symbol: "GLMR",
      decimals: 18
    },
    infoURL: "https://moonbeam.network/networks/moonbeam/",
    shortName: "mbeam",
    chainId: 1284,
    networkId: 1284,
    explorers: [
      {
        name: "moonscan",
        url: "https://moonbeam.moonscan.io",
        standard: "none"
      }
    ]
  },
  {
    name: "Moonriver",
    chain: "MOON",
    rpc: [
      "https://rpc.api.moonriver.moonbeam.network",
      "wss://wss.api.moonriver.moonbeam.network",
      "https://moonriver-rpc.publicnode.com",
      "wss://moonriver-rpc.publicnode.com",
      "https://moonriver.drpc.org",
      "wss://moonriver.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Moonriver",
      symbol: "MOVR",
      decimals: 18
    },
    infoURL: "https://moonbeam.network/networks/moonriver/",
    shortName: "mriver",
    chainId: 1285,
    networkId: 1285,
    explorers: [
      {
        name: "moonscan",
        url: "https://moonriver.moonscan.io",
        standard: "none"
      }
    ]
  },
  {
    name: "Moonbase Alpha",
    chain: "MOON",
    rpc: [
      "https://rpc.api.moonbase.moonbeam.network",
      "wss://wss.api.moonbase.moonbeam.network",
      "https://moonbase-alpha.drpc.org",
      "wss://moonbase-alpha.drpc.org"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Dev",
      symbol: "DEV",
      decimals: 18
    },
    infoURL: "https://docs.moonbeam.network/networks/testnet/",
    shortName: "mbase",
    chainId: 1287,
    networkId: 1287,
    slip44: 1,
    explorers: [
      {
        name: "moonscan",
        url: "https://moonbase.moonscan.io",
        standard: "none"
      }
    ]
  },
  {
    name: "Fantom Testnet",
    chain: "FTM",
    rpc: [
      "https://rpc.testnet.fantom.network",
      "https://fantom-testnet-rpc.publicnode.com",
      "wss://fantom-testnet-rpc.publicnode.com",
      "https://fantom-testnet.drpc.org",
      "wss://fantom-testnet.drpc.org"
    ],
    faucets: ["https://faucet.fantom.network"],
    nativeCurrency: {
      name: "Fantom",
      symbol: "FTM",
      decimals: 18
    },
    infoURL: "https://docs.fantom.foundation/quick-start/short-guide#fantom-testnet",
    shortName: "tftm",
    chainId: 4002,
    networkId: 4002,
    slip44: 1,
    icon: "fantom",
    explorers: [
      {
        name: "ftmscan",
        url: "https://testnet.ftmscan.com",
        icon: "ftmscan",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base",
    chain: "ETH",
    rpc: [
      "https://mainnet.base.org/",
      "https://developer-access-mainnet.base.org/",
      "https://base.gateway.tenderly.co",
      "wss://base.gateway.tenderly.co",
      "https://base-rpc.publicnode.com",
      "wss://base-rpc.publicnode.com"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "base",
    chainId: 8453,
    networkId: 8453,
    icon: "base",
    explorers: [
      {
        name: "basescan",
        url: "https://basescan.org",
        standard: "none"
      },
      {
        name: "basescout",
        url: "https://base.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://base.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ],
    status: "active"
  },
  {
    name: "Gnosis Chiado Testnet",
    chain: "GNO",
    icon: "gnosis",
    rpc: [
      "https://rpc.chiadochain.net",
      "https://rpc.chiado.gnosis.gateway.fm",
      "wss://rpc.chiadochain.net/wss",
      "https://gnosis-chiado-rpc.publicnode.com",
      "wss://gnosis-chiado-rpc.publicnode.com",
      "https://gnosis-chiado.drpc.org",
      "wss://gnosis-chiado.drpc.org"
    ],
    faucets: ["https://gnosisfaucet.com"],
    nativeCurrency: {
      name: "Chiado xDAI",
      symbol: "XDAI",
      decimals: 18
    },
    infoURL: "https://docs.gnosischain.com",
    shortName: "chi",
    chainId: 10200,
    networkId: 10200,
    slip44: 1,
    explorers: [
      {
        name: "blockscout-chiadochain",
        url: "https://blockscout.chiadochain.net",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "blockscout",
        url: "https://gnosis-chiado.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Holesky",
    title: "Ethereum Testnet Holesky",
    chain: "ETH",
    rpc: [
      "https://rpc.holesky.ethpandaops.io",
      "https://ethereum-holesky-rpc.publicnode.com",
      "wss://ethereum-holesky-rpc.publicnode.com",
      "https://holesky.drpc.org",
      "wss://holesky.drpc.org"
    ],
    faucets: ["https://faucet.holesky.ethpandaops.io", "https://holesky-faucet.pk910.de"],
    nativeCurrency: {
      name: "Testnet ETH",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://holesky.ethpandaops.io",
    shortName: "holesky",
    chainId: 17e3,
    networkId: 17e3,
    slip44: 1,
    icon: "ethereum",
    status: "incubating",
    explorers: [
      {
        name: "Holesky Explorer",
        url: "https://holesky.beaconcha.in",
        icon: "ethereum",
        standard: "EIP3091"
      },
      {
        name: "otterscan-holesky",
        url: "https://holesky.otterscan.io",
        icon: "ethereum",
        standard: "EIP3091"
      },
      {
        name: "Holesky Etherscan",
        url: "https://holesky.etherscan.io",
        icon: "ethereum",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Arbitrum One",
    chainId: 42161,
    shortName: "arb1",
    chain: "ETH",
    networkId: 42161,
    nativeCurrency: {
      name: "Ether",
      symbol: "ETH",
      decimals: 18
    },
    rpc: [
      "https://arbitrum-mainnet.infura.io/v3/${INFURA_API_KEY}",
      "https://arb-mainnet.g.alchemy.com/v2/${ALCHEMY_API_KEY}",
      "https://arb1.arbitrum.io/rpc",
      "https://arbitrum-one.publicnode.com",
      "wss://arbitrum-one.publicnode.com"
    ],
    faucets: [],
    explorers: [
      {
        name: "Arbiscan",
        url: "https://arbiscan.io",
        standard: "EIP3091"
      },
      {
        name: "Arbitrum Explorer",
        url: "https://explorer.arbitrum.io",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://arbitrum.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ],
    infoURL: "https://arbitrum.io",
    parent: {
      type: "L2",
      chain: "eip155-1",
      bridges: [
        {
          url: "https://bridge.arbitrum.io"
        }
      ]
    }
  },
  {
    name: "Avalanche Fuji Testnet",
    chain: "AVAX",
    icon: "avax",
    rpc: [
      "https://api.avax-test.network/ext/bc/C/rpc",
      "https://avalanche-fuji-c-chain-rpc.publicnode.com",
      "wss://avalanche-fuji-c-chain-rpc.publicnode.com"
    ],
    faucets: ["https://faucet.avax-test.network/"],
    nativeCurrency: {
      name: "Avalanche",
      symbol: "AVAX",
      decimals: 18
    },
    infoURL: "https://cchain.explorer.avax-test.network",
    shortName: "Fuji",
    chainId: 43113,
    networkId: 1,
    slip44: 1,
    explorers: [
      {
        name: "snowtrace",
        url: "https://testnet.snowtrace.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Avalanche C-Chain",
    chain: "AVAX",
    icon: "avax",
    rpc: [
      "https://api.avax.network/ext/bc/C/rpc",
      "https://avalanche-c-chain-rpc.publicnode.com",
      "wss://avalanche-c-chain-rpc.publicnode.com"
    ],
    features: [
      {
        name: "EIP1559"
      }
    ],
    faucets: [],
    nativeCurrency: {
      name: "Avalanche",
      symbol: "AVAX",
      decimals: 18
    },
    infoURL: "https://www.avax.network/",
    shortName: "avax",
    chainId: 43114,
    networkId: 43114,
    slip44: 9005,
    explorers: [
      {
        name: "snowtrace",
        url: "https://snowtrace.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Linea Sepolia",
    title: "Linea Sepolia Testnet",
    chain: "ETH",
    rpc: [
      "https://rpc.sepolia.linea.build",
      "wss://rpc.sepolia.linea.build",
      "https://linea-sepolia.infura.io/v3/${INFURA_API_KEY}",
      "wss://linea-sepolia.infura.io/ws/v3/${INFURA_API_KEY}"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Linea Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://linea.build",
    shortName: "linea-sepolia",
    chainId: 59141,
    networkId: 59141,
    slip44: 1,
    icon: "linea",
    parent: {
      type: "L2",
      chain: "eip155-5",
      bridges: [
        {
          url: "https://bridge.linea.build/"
        }
      ]
    },
    explorers: [
      {
        name: "Etherscan",
        url: "https://sepolia.lineascan.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "Blockscout",
        url: "https://explorer.sepolia.linea.build",
        standard: "EIP3091",
        icon: "linea"
      }
    ],
    status: "active"
  },
  {
    name: "Linea",
    title: "Linea Mainnet",
    chain: "ETH",
    rpc: [
      "https://rpc.linea.build",
      "wss://rpc.linea.build",
      "https://linea-mainnet.infura.io/v3/${INFURA_API_KEY}",
      "wss://linea-mainnet.infura.io/ws/v3/${INFURA_API_KEY}"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Linea Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://linea.build",
    shortName: "linea",
    chainId: 59144,
    networkId: 59144,
    icon: "linea",
    parent: {
      type: "L2",
      chain: "eip155-1",
      bridges: [
        {
          url: "https://bridge.linea.build"
        }
      ]
    },
    explorers: [
      {
        name: "Etherscan",
        url: "https://lineascan.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "Blockscout",
        url: "https://explorer.linea.build",
        standard: "EIP3091",
        icon: "linea"
      },
      {
        name: "L2scan",
        url: "https://linea.l2scan.co",
        standard: "EIP3091",
        icon: "linea"
      }
    ],
    status: "active"
  },
  {
    name: "Mumbai",
    title: "Polygon Testnet Mumbai",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://rpc-mumbai.maticvigil.com",
      "https://polygon-mumbai-bor-rpc.publicnode.com",
      "wss://polygon-mumbai-bor-rpc.publicnode.com",
      "https://polygon-mumbai.gateway.tenderly.co",
      "wss://polygon-mumbai.gateway.tenderly.co"
    ],
    faucets: ["https://faucet.polygon.technology/"],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "maticmum",
    chainId: 80001,
    networkId: 80001,
    slip44: 1,
    explorers: [
      {
        name: "polygonscan",
        url: "https://mumbai.polygonscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Amoy",
    title: "Polygon Amoy Testnet",
    chain: "Polygon",
    icon: "polygon",
    rpc: [
      "https://rpc-amoy.polygon.technology",
      "https://polygon-amoy-bor-rpc.publicnode.com",
      "wss://polygon-amoy-bor-rpc.publicnode.com"
    ],
    faucets: ["https://faucet.polygon.technology/"],
    nativeCurrency: {
      name: "MATIC",
      symbol: "MATIC",
      decimals: 18
    },
    infoURL: "https://polygon.technology/",
    shortName: "polygonamoy",
    chainId: 80002,
    networkId: 80002,
    slip44: 1,
    explorers: [
      {
        name: "polygonamoy",
        url: "https://www.oklink.com/amoy",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base Goerli Testnet",
    chain: "ETH",
    rpc: [
      "https://goerli.base.org",
      "https://base-goerli.gateway.tenderly.co",
      "wss://base-goerli.gateway.tenderly.co",
      "https://base-goerli-rpc.publicnode.com",
      "wss://base-goerli-rpc.publicnode.com"
    ],
    faucets: ["https://www.coinbase.com/faucets/base-ethereum-goerli-faucet"],
    nativeCurrency: {
      name: "Goerli Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "basegor",
    chainId: 84531,
    networkId: 84531,
    slip44: 1,
    icon: "baseTestnet",
    explorers: [
      {
        name: "basescan",
        url: "https://goerli.basescan.org",
        standard: "none"
      },
      {
        name: "basescout",
        url: "https://base-goerli.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      },
      {
        name: "dexguru",
        url: "https://base-goerli.dex.guru",
        icon: "dexguru",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Base Sepolia Testnet",
    chain: "ETH",
    rpc: [
      "https://sepolia.base.org",
      "https://base-sepolia-rpc.publicnode.com",
      "wss://base-sepolia-rpc.publicnode.com"
    ],
    faucets: [],
    nativeCurrency: {
      name: "Sepolia Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://base.org",
    shortName: "basesep",
    chainId: 84532,
    networkId: 84532,
    slip44: 1,
    icon: "baseTestnet",
    explorers: [
      {
        name: "basescout",
        url: "https://base-sepolia.blockscout.com",
        icon: "blockscout",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "IVAR Chain Mainnet",
    chain: "IVAR",
    icon: "ivar",
    rpc: ["https://mainnet-rpc.ivarex.com"],
    faucets: ["https://faucet.ivarex.com/"],
    nativeCurrency: {
      name: "Ivar",
      symbol: "IVAR",
      decimals: 18
    },
    infoURL: "https://ivarex.com",
    shortName: "ivar",
    chainId: 88888,
    networkId: 88888,
    explorers: [
      {
        name: "ivarscan",
        url: "https://ivarscan.com",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Arbitrum Goerli",
    title: "Arbitrum Goerli Rollup Testnet",
    chainId: 421613,
    shortName: "arb-goerli",
    chain: "ETH",
    networkId: 421613,
    slip44: 1,
    nativeCurrency: {
      name: "Arbitrum Goerli Ether",
      symbol: "AGOR",
      decimals: 18
    },
    rpc: [
      "https://goerli-rollup.arbitrum.io/rpc",
      "https://arbitrum-goerli.publicnode.com",
      "wss://arbitrum-goerli.publicnode.com"
    ],
    faucets: [],
    infoURL: "https://arbitrum.io/",
    explorers: [
      {
        name: "Arbitrum Goerli Arbiscan",
        url: "https://goerli.arbiscan.io",
        standard: "EIP3091"
      }
    ],
    parent: {
      type: "L2",
      chain: "eip155-5",
      bridges: [
        {
          url: "https://bridge.arbitrum.io/"
        }
      ]
    }
  },
  {
    name: "Sepolia",
    title: "Ethereum Testnet Sepolia",
    chain: "ETH",
    rpc: [
      "https://rpc.sepolia.org",
      "https://rpc2.sepolia.org",
      "https://rpc-sepolia.rockx.com",
      "https://rpc.sepolia.ethpandaops.io",
      "https://sepolia.infura.io/v3/${INFURA_API_KEY}",
      "wss://sepolia.infura.io/v3/${INFURA_API_KEY}",
      "https://sepolia.gateway.tenderly.co",
      "wss://sepolia.gateway.tenderly.co",
      "https://ethereum-sepolia-rpc.publicnode.com",
      "wss://ethereum-sepolia-rpc.publicnode.com",
      "https://sepolia.drpc.org",
      "wss://sepolia.drpc.org"
    ],
    faucets: ["http://fauceth.komputing.org?chain=11155111&address=${ADDRESS}"],
    nativeCurrency: {
      name: "Sepolia Ether",
      symbol: "ETH",
      decimals: 18
    },
    infoURL: "https://sepolia.otterscan.io",
    shortName: "sep",
    chainId: 11155111,
    networkId: 11155111,
    slip44: 1,
    explorers: [
      {
        name: "etherscan-sepolia",
        url: "https://sepolia.etherscan.io",
        standard: "EIP3091"
      },
      {
        name: "otterscan-sepolia",
        url: "https://sepolia.otterscan.io",
        standard: "EIP3091"
      }
    ]
  },
  {
    name: "Palm",
    chain: "Palm",
    icon: "palm",
    rpc: ["https://palm-mainnet.infura.io/v3/${INFURA_API_KEY}", "https://palm-mainnet.public.blastapi.io"],
    faucets: [],
    nativeCurrency: {
      name: "PALM",
      symbol: "PALM",
      decimals: 18
    },
    infoURL: "https://palm.network",
    shortName: "palm",
    chainId: 11297108109,
    networkId: 11297108109,
    explorers: [
      {
        name: "Chainlens",
        url: "https://palm.chainlens.com",
        standard: "EIP3091"
      },
      {
        name: "Dora",
        url: "https://www.ondora.xyz/network/palm",
        standard: "none"
      }
    ]
  }
];
var INVALID_VALUES = ["0x", "0x0", "0", 0];
var EvmChainParser = (
  /** @class */
  function() {
    function EvmChainParser2() {
    }
    EvmChainParser2.parse = function(chain) {
      if (INVALID_VALUES.includes(chain)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
        });
      }
      if (typeof chain === "string") {
        if (chain.startsWith("0x")) {
          return chain;
        }
        try {
          var parsed = parseInt(chain, 10);
          if (Number.isNaN(parsed)) {
            throw new Error("Cannot parse the provided string value to a valid chain number");
          }
          return "0x".concat(parsed.toString(16));
        } catch (error) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
          });
        }
      }
      if (chain <= 0) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid provided chain, value must be a positive number, or a hex-string starting with '0x'"
        });
      }
      return "0x".concat(chain.toString(16));
    };
    return EvmChainParser2;
  }()
);
var EvmChain = (
  /** @class */
  function() {
    function EvmChain2(value) {
      var _this = this;
      var _a2;
      this._value = EvmChainParser.parse(value);
      this._chainlistData = (_a2 = chainList.find(function(chainData) {
        return chainData.chainId === _this.decimal;
      })) !== null && _a2 !== void 0 ? _a2 : null;
    }
    Object.defineProperty(EvmChain2, "ETHEREUM", {
      /**
       * Returns ETHEREUM chain
       *
       * @example EvmChain.ETHEREUM
       */
      get: function() {
        return EvmChain2.create(1);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GOERLI", {
      /**
       * Returns GOERLI chain
       *
       * @example EvmChain.GOERLI
       */
      get: function() {
        return EvmChain2.create(5);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "SEPOLIA", {
      /**
       * Returns SEPOLIA chain
       *
       * @example EvmChain.SEPOLIA
       */
      get: function() {
        return EvmChain2.create(11155111);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "POLYGON", {
      /**
       * Returns POLYGON chain
       *
       * @example EvmChain.POLYGON
       */
      get: function() {
        return EvmChain2.create(137);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MUMBAI", {
      /**
       * Returns MUMBAI chain
       *
       * @example EvmChain.MUMBAI
       */
      get: function() {
        return EvmChain2.create(80001);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BSC", {
      /**
       * Returns BSC chain
       *
       * @example EvmChain.BSC
       */
      get: function() {
        return EvmChain2.create(56);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BSC_TESTNET", {
      /**
       * Returns BSC_TESTNET chain
       *
       * @example EvmChain.BSC_TESTNET
       */
      get: function() {
        return EvmChain2.create(97);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "AVALANCHE", {
      /**
       * Returns AVALANCHE chain
       *
       * @example EvmChain.AVALANCHE
       */
      get: function() {
        return EvmChain2.create(43114);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "AVALANCHE_TESTNET", {
      /**
       * Returns AVALANCHE_TESTNET chain
       *
       * @example EvmChain.AVALANCHE_TESTNET
       */
      get: function() {
        return EvmChain2.create(43113);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "FANTOM", {
      /**
       * Returns FANTOM chain
       *
       * @example EvmChain.FANTOM
       */
      get: function() {
        return EvmChain2.create(250);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "FANTOM_TESTNET", {
      /**
       * Returns FANTOM_TESTNET chain
       *
       * @example EvmChain.FANTOM_TESTNET
       */
      get: function() {
        return EvmChain2.create(4002);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CRONOS", {
      /**
       * Returns CRONOS chain
       *
       * @example EvmChain.CRONOS
       */
      get: function() {
        return EvmChain2.create(25);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "PALM", {
      /**
       * Returns PALM chain
       *
       * @example EvmChain.PALM
       */
      get: function() {
        return EvmChain2.create(11297108109);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "ARBITRUM", {
      /**
       * Returns ARBITRUM chain
       *
       * @example EvmChain.ARBITRUM
       */
      get: function() {
        return EvmChain2.create(42161);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "ARBITRUM_TESTNET", {
      /**
       * Returns ARBITRUM_TESTNET chain
       *
       * @example EvmChain.ARBITRUM_TESTNET
       */
      get: function() {
        return EvmChain2.create(421613);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "RONIN", {
      /**
       * Returns RONIN chain
       *
       * @example EvmChain.RONIN
       */
      get: function() {
        return EvmChain2.create(2020);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "OPTIMISM", {
      /**
       * Returns OPTIMISM chain
       *
       * @example EvmChain.OPTIMISM
       */
      get: function() {
        return EvmChain2.create(10);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CHILIZ", {
      /**
       * Returns CHILIZ chain
       *
       * @example EvmChain.CHILIZ
       */
      get: function() {
        return EvmChain2.create(88888);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "CHILIZ_TESTNET", {
      /**
       * Returns CHILIZ_TESTNET chain
       *
       * @example EvmChain.CHILIZ_TESTNET
       */
      get: function() {
        return EvmChain2.create(88882);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GNOSIS", {
      /**
       * Returns GNOSIS chain
       *
       * @example EvmChain.GNOSIS
       */
      get: function() {
        return EvmChain2.create(100);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "GNOSIS_TESTNET", {
      /**
       * Returns GNOSIS_TESTNET chain
       *
       * @example EvmChain.GNOSIS_TESTNET
       */
      get: function() {
        return EvmChain2.create(10200);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE", {
      /**
       * Returns BASE chain
       *
       * @example EvmChain.BASE
       */
      get: function() {
        return EvmChain2.create(8453);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE_TESTNET", {
      /**
       * Returns BASE_TESTNET chain
       *
       * @example EvmChain.BASE_TESTNET
       */
      get: function() {
        return EvmChain2.create(84531);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "BASE_SEPOLIA", {
      /**
       * Returns BASE_SEPOLIA chain
       *
       * @example EvmChain.BASE_SEPOLIA
       */
      get: function() {
        return EvmChain2.create(84532);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "HOLESKY", {
      /**
       * Returns HOLESKY chain
       *
       * @example EvmChain.HOLESKY
       */
      get: function() {
        return EvmChain2.create(17e3);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "POLYGON_AMOY", {
      /**
       * Returns POLYGON_AMOY chain
       *
       * @example EvmChain.POLYGON_AMOY
       */
      get: function() {
        return EvmChain2.create(80002);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "LINEA", {
      /**
       * Returns LINEA chain
       *
       * @example EvmChain.LINEA
       */
      get: function() {
        return EvmChain2.create(59144);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MOONRIVER", {
      /**
       * Returns MOONRIVER chain
       *
       * @example EvmChain.MOONRIVER
       */
      get: function() {
        return EvmChain2.create(1285);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MOONBEAM", {
      /**
       * Returns MOONBEAM chain
       *
       * @example EvmChain.MOONBEAM
       */
      get: function() {
        return EvmChain2.create(1284);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "MOONBASE", {
      /**
       * Returns MOONBASE chain
       *
       * @example EvmChain.MOONBASE
       */
      get: function() {
        return EvmChain2.create(1287);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2, "LINEA_SEPOLIA", {
      /**
       * Returns LINEA SEPOLIA chain
       *
       * @example EvmChain.LINEA_SEPOLIA
       */
      get: function() {
        return EvmChain2.create(59141);
      },
      enumerable: false,
      configurable: true
    });
    EvmChain2.create = function(chain) {
      if (chain instanceof EvmChain2) {
        return chain;
      }
      return new EvmChain2(chain);
    };
    EvmChain2.prototype._getChainlistData = function() {
      if (!this._chainlistData) {
        return null;
      }
      return this._chainlistData;
    };
    EvmChain2.equals = function(chainA, chainB) {
      return EvmChain2.create(chainA)._value === EvmChain2.create(chainB)._value;
    };
    EvmChain2.values = function() {
      return [
        EvmChain2.ETHEREUM,
        EvmChain2.GOERLI,
        EvmChain2.SEPOLIA,
        EvmChain2.POLYGON,
        EvmChain2.MUMBAI,
        EvmChain2.BSC,
        EvmChain2.BSC_TESTNET,
        EvmChain2.AVALANCHE,
        EvmChain2.AVALANCHE_TESTNET,
        EvmChain2.FANTOM,
        EvmChain2.FANTOM_TESTNET,
        EvmChain2.CRONOS,
        EvmChain2.PALM,
        EvmChain2.ARBITRUM,
        EvmChain2.ARBITRUM_TESTNET,
        EvmChain2.RONIN,
        EvmChain2.OPTIMISM,
        EvmChain2.CHILIZ,
        EvmChain2.CHILIZ_TESTNET,
        EvmChain2.GNOSIS,
        EvmChain2.GNOSIS_TESTNET,
        EvmChain2.BASE,
        EvmChain2.BASE_TESTNET,
        EvmChain2.BASE_SEPOLIA,
        EvmChain2.HOLESKY,
        EvmChain2.POLYGON_AMOY,
        EvmChain2.LINEA,
        EvmChain2.MOONBEAM,
        EvmChain2.MOONRIVER,
        EvmChain2.MOONBASE,
        EvmChain2.LINEA_SEPOLIA
      ];
    };
    EvmChain2.prototype.equals = function(chain) {
      return EvmChain2.equals(this, chain);
    };
    EvmChain2.prototype.display = function() {
      return this.name ? "".concat(this.name, " (").concat(this.hex, ")") : this.hex;
    };
    EvmChain2.prototype.getExplorerPath = function(value) {
      var explorer = this.explorer;
      if (!explorer || explorer.standard !== "EIP3091") {
        return null;
      }
      var url = explorer.url;
      if ("block" in value) {
        return "".concat(url, "/block/").concat(value.block);
      }
      if ("transaction" in value) {
        return "".concat(url, "/tx/").concat(value.transaction);
      }
      if ("account" in value) {
        return "".concat(url, "/address/").concat(value.account);
      }
      if ("erc20" in value) {
        return "".concat(url, "/token/").concat(value.erc20);
      }
      return null;
    };
    Object.defineProperty(EvmChain2.prototype, "decimal", {
      /**
       * Returns the decimal representation of the chain
       * @example chain.decimal // 1
       */
      get: function() {
        return parseInt(this._value, 16);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "hex", {
      /**
       * Returns the hex-string representation of the chain
       * @example chain.hex // "0x1"
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "apiHex", {
      /**
       * Validate and cast to api compatible hex
       *
       * @example chain.apiHex // "0x1"
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "name", {
      /**
       * Returns the name of the chain
       * @example chain.name // "Ethereum"
       */
      get: function() {
        var _a2;
        return (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "currency", {
      /**
       * Returns the currency of the chain
       * @returns The cuurrency of the chain or undefined if not found
       *
       * @example chain.currency // EvmNativeCurrency
       */
      get: function() {
        var _a2;
        return (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.nativeCurrency;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "rpcUrls", {
      /**
       * Returns the rpc Urls of the chain
       *
       * @example chain.rpcUrls // ["https://mainnet.infura.io/v3/<infura-key>"]
       */
      get: function() {
        var _a2;
        return (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.rpc;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmChain2.prototype, "explorer", {
      /**
       * Returns the explorer Urls of the chain
       *
       * @example chain.explorerUrls // ["https://etherscan.io/"]
       */
      get: function() {
        var _a2;
        var explorers = (_a2 = this._getChainlistData()) === null || _a2 === void 0 ? void 0 : _a2.explorers;
        if (!explorers || explorers.length === 0) {
          return null;
        }
        return explorers[0];
      },
      enumerable: false,
      configurable: true
    });
    EvmChain2.prototype.toJSON = function() {
      return this.hex;
    };
    return EvmChain2;
  }()
);
var Erc20Token = (
  /** @class */
  function() {
    function Erc20Token2(value) {
      this._value = Erc20Token2.parse(value);
    }
    Erc20Token2.create = function(value) {
      if (value instanceof Erc20Token2) {
        return value;
      }
      return new Erc20Token2(value);
    };
    Erc20Token2.equals = function(valueA, valueB) {
      var erc20A = Erc20Token2.create(valueA);
      var erc20B = Erc20Token2.create(valueB);
      if (!erc20A._value.chain.equals(erc20B._value.chain)) {
        return false;
      }
      if (!erc20A._value.contractAddress.equals(erc20B._value.contractAddress)) {
        return false;
      }
      return true;
    };
    Erc20Token2.prototype.equals = function(value) {
      return Erc20Token2.equals(this, value);
    };
    Erc20Token2.prototype.toJSON = function() {
      var value = this._value;
      return __assign3(__assign3({}, value), { contractAddress: value.contractAddress.toJSON(), chain: value.chain.toJSON() });
    };
    Erc20Token2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Token2.prototype, "result", {
      /**
       * Returns the processed Erc20Token.
       *
       * @returns the Erc20Token value
       * @example
       * ```ts
       * token.result;
       *  ```
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "decimals", {
      /**
       * @returns the decimals of the token.
       *
       * @example
       * ```ts
       * token.decimals;
       * ```
       */
      get: function() {
        return this._value.decimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "name", {
      /**
       * @returns The name of the token.
       *
       * @example
       * ```ts
       * token.name;
       * ```
       */
      get: function() {
        return this._value.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "symbol", {
      /**
       * @returns The symbol of the token.
       *
       * @example
       * ```ts
       * token.symbol;
       * ```
       */
      get: function() {
        return this._value.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "contractAddress", {
      /**
       * @returns The contract address of the token.
       *
       * @example
       * ```ts
       * token.contractAddress;
       * ```
       */
      get: function() {
        return this._value.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "chain", {
      /**
       * @returns The chain of the token.
       *
       * @example
       * ```ts
       * token.chain;
       * ```
       */
      get: function() {
        return this._value.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "logo", {
      /**
       * @returns The logo of the token.
       *
       * @example
       * ```ts
       * token.logo;
       * ```
       */
      get: function() {
        return this._value.logo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "logoHash", {
      /**
       * @returns The logo hash of the token.
       *
       * @example
       * ```ts
       * token.logoHash;
       * ```
       */
      get: function() {
        return this._value.logoHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "thumbnail", {
      /**
       * @returns The thumbnail of the token.
       *
       * @example
       * ```ts
       * token.thumbnail;
       * ```
       */
      get: function() {
        return this._value.thumbnail;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Token2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._value.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Token2.parse = function(value) {
      return {
        decimals: +value.decimals,
        name: value.name,
        symbol: value.symbol,
        contractAddress: EvmAddress.create(value.contractAddress),
        logo: maybe(value.logo),
        logoHash: maybe(value.logoHash),
        thumbnail: maybe(value.thumbnail),
        chain: EvmChain.create(value.chain),
        possibleSpam: value.possibleSpam
      };
    };
    return Erc20Token2;
  }()
);
var Erc20Approval = (
  /** @class */
  function() {
    function Erc20Approval2(data) {
      this._data = Erc20Approval2.parse(data);
    }
    Erc20Approval2.create = function(data) {
      if (data instanceof Erc20Approval2) {
        return data;
      }
      return new Erc20Approval2(data);
    };
    Erc20Approval2.equals = function(dataA, dataB) {
      var approvalA = Erc20Approval2.create(dataA);
      var approvalB = Erc20Approval2.create(dataB);
      return JSON.stringify(approvalA.toJSON()) === JSON.stringify(approvalB.toJSON());
    };
    Erc20Approval2.prototype.equals = function(data) {
      return Erc20Approval2.equals(this, data);
    };
    Erc20Approval2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Approval2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example approval.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "toWallet", {
      /**
       * @returns the toWallet of the approval
       * @example approval.toWallet // EvmAddress
       */
      get: function() {
        return this._data.toWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "fromWallet", {
      /**
       * @returns the fromWallet of the approval
       * @example approval.fromWallet // EvmAddress
       */
      get: function() {
        return this._data.fromWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the approval
       * @example approval.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockHash", {
      /**
       * @returns the block hash of the approval
       * @example approval.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockNumber", {
      /**
       * @returns the block number of the approval
       * @example approval.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the approval
       * @example approval.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "chain", {
      /**
       * @returns the chain of the approval
       * @example approval.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the approval
       * @example approval.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "value", {
      /**
       * @returns the value of the approval
       * @example approval.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the approval
       * @example approval.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the approval
       * @example approval.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Approval2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Approval2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Approval2;
  }()
);
var Erc20Burn = (
  /** @class */
  function() {
    function Erc20Burn2(data) {
      this._data = Erc20Burn2.parse(data);
    }
    Erc20Burn2.create = function(data) {
      if (data instanceof Erc20Burn2) {
        return data;
      }
      return new Erc20Burn2(data);
    };
    Erc20Burn2.equals = function(dataA, dataB) {
      var burnA = Erc20Burn2.create(dataA);
      var burnB = Erc20Burn2.create(dataB);
      return JSON.stringify(burnA.toJSON()) === JSON.stringify(burnB.toJSON());
    };
    Erc20Burn2.prototype.equals = function(data) {
      return Erc20Burn2.equals(this, data);
    };
    Erc20Burn2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), fromWallet: data.fromWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Burn2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Burn2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example burn.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "fromWallet", {
      /**
       * @returns the fromWallet of the burn
       * @example burn.fromWallet // EvmAddress
       */
      get: function() {
        return this._data.fromWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the burn
       * @example burn.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockHash", {
      /**
       * @returns the block hash of the burn
       * @example burn.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockNumber", {
      /**
       * @returns the block number of the burn
       * @example burn.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the burn
       * @example burn.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "chain", {
      /**
       * @returns the chain of the burn
       * @example burn.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the burn
       * @example burn.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "value", {
      /**
       * @returns the value of the burn
       * @example burn.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the burn
       * @example burn.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the burn
       * @example burn.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Burn2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Burn2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), fromWallet: EvmAddress.create(data.fromWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Burn2;
  }()
);
var Erc20Mint = (
  /** @class */
  function() {
    function Erc20Mint2(data) {
      this._data = Erc20Mint2.parse(data);
    }
    Erc20Mint2.create = function(data) {
      if (data instanceof Erc20Mint2) {
        return data;
      }
      return new Erc20Mint2(data);
    };
    Erc20Mint2.equals = function(dataA, dataB) {
      var mintA = Erc20Mint2.create(dataA);
      var mintB = Erc20Mint2.create(dataB);
      return JSON.stringify(mintA.toJSON()) === JSON.stringify(mintB.toJSON());
    };
    Erc20Mint2.prototype.equals = function(data) {
      return Erc20Mint2.equals(this, data);
    };
    Erc20Mint2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), contractAddress: data.contractAddress.toJSON(), blockNumber: data.blockNumber.toString(), toWallet: data.toWallet.toJSON(), value: data.value.toString() });
    };
    Erc20Mint2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Mint2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example mint.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "toWallet", {
      /**
       * @returns the toWallet of the mint
       * @example mint.toWallet // EvmAddress
       */
      get: function() {
        return this._data.toWallet;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "contractAddress", {
      /**
       * @returns the contractAddress of the mint
       * @example mint.contractAddress // EvmAddress
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockHash", {
      /**
       * @returns the block hash of the mint
       * @example mint.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockNumber", {
      /**
       * @returns the block number of the mint
       * @example mint.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the mint
       * @example mint.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "chain", {
      /**
       * @returns the chain of the mint
       * @example mint.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the mint
       * @example mint.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "value", {
      /**
       * @returns the value of the mint
       * @example mint.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the mint
       * @example mint.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the mint
       * @example mint.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenName", {
      /**
       * @returns The name of the token.
       * @example burn.tokenName // "Kylin Network"
       */
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenLogo", {
      /**
       * @returns The logo of the token
       * @example burn.tokenLogo // "https://cdn.moralis.io/eth/0x67b6d479c7bb412c54e03dca8e1bc6740ce6b99c.png"
       */
      get: function() {
        return this._data.tokenLogo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenSymbol", {
      /**
       * @returns The symbol of the token.
       * @example burn.tokenSymbol // "KYL"
       */
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Mint2.prototype, "tokenDecimals", {
      /**
       * @returns The decimals of the token.
       * @example burn.tokenDecimals // 18
       */
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Mint2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractAddress: EvmAddress.create(data.contractAddress), toWallet: EvmAddress.create(data.toWallet), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex), tokenDecimals: Number(data.tokenDecimals) });
    };
    return Erc20Mint2;
  }()
);
var Erc20Transaction = (
  /** @class */
  function() {
    function Erc20Transaction2(data) {
      this._data = Erc20Transaction2.parse(data);
    }
    Erc20Transaction2.create = function(data) {
      if (data instanceof Erc20Transaction2) {
        return data;
      }
      return new Erc20Transaction2(data);
    };
    Erc20Transaction2.equals = function(dataA, dataB) {
      var tokenA = Erc20Transaction2.create(dataA);
      var tokenB = Erc20Transaction2.create(dataB);
      return JSON.stringify(tokenA.toJSON()) === JSON.stringify(tokenB.toJSON());
    };
    Erc20Transaction2.prototype.equals = function(data) {
      return Erc20Transaction2.equals(this, data);
    };
    Erc20Transaction2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), toAddress: data.toAddress.toJSON(), fromAddress: data.fromAddress.toJSON(), value: data.value.toString() });
    };
    Erc20Transaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(Erc20Transaction2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example transfer.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "address", {
      /**
       * @returns the contract address of the transfer
       * @example transfer.address // EvmAddress
       */
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "contractAddress", {
      /**
       * @returns the contract address of the transfer
       * @example transfer.contractAddress // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockHash", {
      /**
       * @returns the block hash of the transfer
       * @example transfer.blockHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockNumber", {
      /**
       * @returns the block number of the transfer
       * @example transfer.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the transfer
       * @example transfer.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "chain", {
      /**
       * @returns the chain of the transfer
       * @example transfer.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "fromAddress", {
      /**
       * @returns the from address of the transfer
       * @example transfer.fromAddress // EvmAddress
       */
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "fromWallet", {
      /**
       * @returns the from address of the transfer
       * @example transfer.fromWallet // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "toAddress", {
      /**
       * @returns the to address of the transfer
       * @example transfer.toAddress // EvmAddress
       */
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "toWallet", {
      /**
       * @returns the to address of the transfer
       * @example transfer.toWallet // EvmAddress
       */
      // Used since /erc20/transfers endpoints that return toAddress under a different name
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the transfer
       * @example transfer.transactionHash // "0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "value", {
      /**
       * @returns the value of the transfer
       * @example transfer.value // BigNumber
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "transactionIndex", {
      /**
       * @returns the transactionIndex of the transfer
       * @example transfer.transactionIndex // 3
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "logIndex", {
      /**
       * @returns the logIndex of the transfer
       * @example transfer.logIndex // 2
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Transaction2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Transaction2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockTimestamp: dateInputToDate(data.blockTimestamp), blockNumber: BigNumber.create(data.blockNumber), toAddress: EvmAddress.create(data.toAddress), fromAddress: EvmAddress.create(data.fromAddress), value: BigNumber.create(data.value), transactionIndex: Number(data.transactionIndex), logIndex: Number(data.logIndex) });
    };
    return Erc20Transaction2;
  }()
);
var EVM_ERC20_DEFAULT_DECIMALS = 18;
var Erc20Value = (
  /** @class */
  function() {
    function Erc20Value2(amount, options) {
      var _this = this;
      var _a2, _b, _c;
      this.display = function() {
        if (!_this._token) {
          return "".concat(_this.value);
        }
        return "".concat(_this.value, " ").concat(_this._token.symbol);
      };
      this._value = Erc20Value2.parse({
        amount,
        decimals: (_c = (_a2 = options === null || options === void 0 ? void 0 : options.decimals) !== null && _a2 !== void 0 ? _a2 : (_b = options === null || options === void 0 ? void 0 : options.token) === null || _b === void 0 ? void 0 : _b.decimals) !== null && _c !== void 0 ? _c : EVM_ERC20_DEFAULT_DECIMALS,
        token: options === null || options === void 0 ? void 0 : options.token
      });
      if (options === null || options === void 0 ? void 0 : options.token) {
        this._token = Erc20Token.create(options.token);
      }
    }
    Erc20Value2.create = function(value, options) {
      if (value instanceof Erc20Value2) {
        return value;
      }
      return new Erc20Value2(value, options);
    };
    Erc20Value2.equals = function(valueA, valueB) {
      var erc20ValueA = Erc20Value2.create(valueA);
      var erc20ValueB = Erc20Value2.create(valueB);
      return erc20ValueA.value === erc20ValueB.value;
    };
    Erc20Value2.prototype.equals = function(value) {
      return Erc20Value2.equals(this, value);
    };
    Erc20Value2.prototype.toNumber = function() {
      return +this.value;
    };
    Erc20Value2.prototype.toString = function() {
      return this.value;
    };
    Erc20Value2.prototype.format = function() {
      return this.toString();
    };
    Erc20Value2.prototype.toJSON = function() {
      if (this.token) {
        return { value: this.value, token: this.token.toJSON() };
      }
      return { value: this.value };
    };
    Object.defineProperty(Erc20Value2.prototype, "decimals", {
      /**
       * @returns the token decimals
       * @example value.decimals; // 15
       */
      get: function() {
        return this._value.decimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "amount", {
      /**
       * @returns the token amount
       * @example value.amount; // BigNumber
       */
      get: function() {
        return this._value.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "value", {
      /**
       * @returns the token value
       * @example value.value; // "1000"
       */
      get: function() {
        return this._value.amount.toDecimal(this.decimals);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Erc20Value2.prototype, "token", {
      /**
       * @returns the token
       * @example value.token; // Erc20Token
       */
      get: function() {
        var _a2;
        return (_a2 = this._token) !== null && _a2 !== void 0 ? _a2 : null;
      },
      enumerable: false,
      configurable: true
    });
    Erc20Value2.parse = function(_a2) {
      var amount = _a2.amount, decimals = _a2.decimals, token = _a2.token;
      if (token && token.decimals && +token.decimals !== +decimals) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_DATA,
          message: "Decimals do not match"
        });
      }
      return {
        amount: BigNumber.create(amount),
        decimals: +decimals
      };
    };
    return Erc20Value2;
  }()
);
var unitToDecimals2 = {
  ether: 18,
  finney: 15,
  szabo: 12,
  gwei: 9,
  mwei: 6,
  kwei: 3,
  wei: 0
};
var EvmNative = (
  /** @class */
  function() {
    function EvmNative2(native, unit) {
      if (unit === void 0) {
        unit = "ether";
      }
      this.rawValue = EvmNative2.parse(native, unit);
    }
    Object.defineProperty(EvmNative2, "ONE_ETH", {
      /**
       * Returns value of one ether.
       *
       * @example EvmNative.ONE_ETH
       */
      get: function() {
        return EvmNative2.create(1, "ether");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2, "ONE_GWEI", {
      /**
       * Returns value of one gwei.
       *
       * @example EvmNative.ONE_GWEI
       */
      get: function() {
        return EvmNative2.create(1, "gwei");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2, "ONE_WEI", {
      /**
       * Returns value of one wei.
       *
       * @example EvmNative.ONE_WEI
       */
      get: function() {
        return EvmNative2.create(1, "wei");
      },
      enumerable: false,
      configurable: true
    });
    EvmNative2.create = function(native, unit) {
      if (native instanceof EvmNative2) {
        return native;
      }
      return new EvmNative2(native, unit);
    };
    EvmNative2.fromJSON = function(json) {
      return EvmNative2.create(json, "wei");
    };
    EvmNative2.parse = function(native, unit) {
      var decimals;
      if (typeof unit === "number") {
        decimals = unit;
      } else {
        if (unitToDecimals2[unit] == null) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Unit should be a decimal number or valid EvmNativeUnit string"
          });
        }
        decimals = unitToDecimals2[unit];
      }
      return BigNumber.fromDecimal(native.toString(), decimals);
    };
    EvmNative2.equals = function(valueA, valueB) {
      var evmNativeA = EvmNative2.create(valueA);
      var evmNativeB = EvmNative2.create(valueB);
      return evmNativeA.rawValue.equals(evmNativeB.rawValue);
    };
    EvmNative2.prototype.equals = function(value) {
      return EvmNative2.equals(this, value);
    };
    EvmNative2.prototype.toString = function() {
      return this.wei;
    };
    EvmNative2.prototype.format = function() {
      return this.toString();
    };
    Object.defineProperty(EvmNative2.prototype, "value", {
      /**
       * @returns the value of the EvmNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "wei", {
      /**
       * Converts the EvmNative to a string representation of the value in wei.
       * @returns the value of the EvmNative as a string
       * @example `native.wei`
       */
      get: function() {
        return this.value.toString();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "gwei", {
      /**
       * Converts the EvmNative to a string representation of the value in gwei.
       * @returns the value of the EvmNative as a string
       * @example `native.gwei`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals2["gwei"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNative2.prototype, "ether", {
      /**
       * Converts the EvmNative to a string representation of the value in ether.
       * @returns the value of the EvmNative as a string
       * @example `native.ether`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals2["ether"]);
      },
      enumerable: false,
      configurable: true
    });
    EvmNative2.prototype.toJSON = function() {
      return this.toString();
    };
    return EvmNative2;
  }()
);
var EvmTransactionLog = (
  /** @class */
  function() {
    function EvmTransactionLog2(value) {
      this._value = EvmTransactionLog2.parse(value);
    }
    EvmTransactionLog2.create = function(value) {
      if (value instanceof EvmTransactionLog2) {
        return value;
      }
      return new EvmTransactionLog2(value);
    };
    EvmTransactionLog2.parse = function(value) {
      return {
        chain: EvmChain.create(value.chain),
        logIndex: maybe(value.logIndex, function(index) {
          return +index;
        }),
        transactionHash: value.transactionHash,
        transactionIndex: maybe(value.transactionIndex),
        data: value.data,
        topics: value.topics,
        blockHash: value.blockHash,
        blockNumber: value.blockNumber,
        blockTimestamp: value.blockTimestamp,
        address: EvmAddress.create(value.address)
      };
    };
    EvmTransactionLog2.prototype.equals = function(value) {
      return value._value.transactionHash === this._value.transactionHash && value._value.address.equals(this._value.address) && value._value.logIndex === this._value.logIndex && value._value.chain.equals(this._value.chain);
    };
    EvmTransactionLog2.prototype.toJSON = function() {
      var value = this._value;
      return __assign3(__assign3({}, value), { address: value.address.toJSON(), chain: value.chain.toJSON() });
    };
    EvmTransactionLog2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmTransactionLog2.prototype, "result", {
      /**
       * Returns the processed Erc20Token.
       *
       * @returns the EvmTransactionLog value
       * @example
       * ```ts
       * log.result;
       *  ```
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the log.
       *
       * @example
       * ```ts
       * log.transactionHash; // "0xdd9006489e46670e0e85d1fb88823099e7f596b08aeaac023e9da0851f26fdd5"
       * ```
       */
      get: function() {
        return this._value.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "address", {
      /**
       * Returns the address of the log.
       *
       * @example
       * ```ts
       * log.address; // EvmAddress
       * ```
       */
      get: function() {
        return this._value.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "chain", {
      /**
       * Returns the chain of the log.
       *
       * @example
       * ```ts
       * log.chain; // EvmChain
       * ```
       */
      get: function() {
        return this._value.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "logIndex", {
      /**
       * @returns the log index of the log.
       *
       * @example
       * ```ts
       * log.logIndex; // 273
       * ```
       */
      get: function() {
        return this._value.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "data", {
      /**
       * @returns the data of the log.
       *
       * @example
       * ```ts
       * log.data; // "0x00000000000000000000000000000000000000000000000de05239bccd4d537400000000000000000000000000024dbc80a9f80e3d5fc0a0ee30e2693781a443"
       * ```
       */
      get: function() {
        return this._value.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "topics", {
      /**
       * @returns the topics of the log.
       *
       * @example
       * ```ts
       * log.topic0; // ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000002"]
       * ```
       */
      get: function() {
        return this._value.topics;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockHash", {
      /**
       * @returns the block hash of the log.
       *
       * @example
       * ```ts
       * log.blockHash; // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       * ```
       */
      get: function() {
        return this._value.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockNumber", {
      /**
       * @returns the block number of the log.
       *
       * @example
       * ```ts
       * log.blockNumber; // 12386788
       * ```
       */
      get: function() {
        return this._value.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionLog2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the log.
       *
       * @example
       * ```ts
       * log.blockTimestamp; // "2021-05-07T11:08:35.000Z"
       * ```
       */
      get: function() {
        return this._value.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransactionLog2;
  }()
);
var EvmSignature = (
  /** @class */
  function() {
    function EvmSignature2(data) {
      this._data = EvmSignature2.parse(data);
    }
    EvmSignature2.create = function(data) {
      if (data instanceof EvmSignature2) {
        return data;
      }
      return new EvmSignature2(data);
    };
    EvmSignature2.equals = function(dataA, dataB) {
      var signatureA = EvmSignature2.create(dataA);
      var signatureB = EvmSignature2.create(dataB);
      return signatureA.serialized === signatureB.serialized;
    };
    EvmSignature2.prototype.equals = function(data) {
      return EvmSignature2.equals(this, data);
    };
    Object.defineProperty(EvmSignature2.prototype, "r", {
      get: function() {
        return this._data.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "s", {
      get: function() {
        return this._data.s;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "v", {
      get: function() {
        return this._data.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSignature2.prototype, "serialized", {
      get: function() {
        return joinSignature(this._data);
      },
      enumerable: false,
      configurable: true
    });
    EvmSignature2.prototype.toJSON = function() {
      return {
        r: this.r,
        s: this.s,
        v: this.v.toString()
      };
    };
    EvmSignature2.prototype.format = function() {
      return this.serialized;
    };
    EvmSignature2.parse = function(data) {
      if (typeof data === "string") {
        return splitSignature(data);
      }
      return splitSignature({
        r: hexlify(BigNumber.create(data.r).toBigInt()),
        s: hexlify(BigNumber.create(data.s).toBigInt()),
        v: +data.v
      });
    };
    return EvmSignature2;
  }()
);
var EvmInternalTransaction = (
  /** @class */
  function() {
    function EvmInternalTransaction2(data) {
      this._data = EvmInternalTransaction2.parse(data);
    }
    EvmInternalTransaction2.create = function(data) {
      if (data instanceof EvmInternalTransaction2) {
        return data;
      }
      return new EvmInternalTransaction2(data);
    };
    EvmInternalTransaction2.fromJSON = function(json) {
      return new EvmInternalTransaction2({
        blockHash: json.block_hash,
        blockNumber: json.block_number,
        from: json.from,
        gas: json.gas,
        gasUsed: json.gas_used,
        input: json.input,
        output: json.output,
        to: json.to,
        transactionHash: json.transaction_hash,
        type: json.type,
        value: json.value
      });
    };
    EvmInternalTransaction2.equals = function(dataA, dataB) {
      var transactionA = EvmInternalTransaction2.create(dataA);
      var transactionB = EvmInternalTransaction2.create(dataB);
      if (transactionA._data.transactionHash !== transactionB._data.transactionHash) {
        return false;
      }
      return true;
    };
    EvmInternalTransaction2.prototype.equals = function(data) {
      return EvmInternalTransaction2.equals(this, data);
    };
    EvmInternalTransaction2.prototype.toJSON = function() {
      var data = this._data;
      return {
        block_hash: data.blockHash,
        input: data.input,
        output: data.output,
        transaction_hash: data.transactionHash,
        type: data.type,
        to: data.to.toJSON(),
        from: data.from.toJSON(),
        gas: data.gas.toString(),
        gas_used: data.gasUsed.toString(),
        value: data.value.toString(),
        block_number: data.blockNumber.toString()
      };
    };
    EvmInternalTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmInternalTransaction2.prototype, "result", {
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "blockNumber", {
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "blockHash", {
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "gasUsed", {
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "input", {
      get: function() {
        return this._data.input;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmInternalTransaction2.prototype, "output", {
      get: function() {
        return this._data.output;
      },
      enumerable: false,
      configurable: true
    });
    EvmInternalTransaction2.parse = function(data) {
      return {
        from: EvmAddress.create(data.from),
        to: EvmAddress.create(data.to),
        transactionHash: data.transactionHash,
        gas: BigNumber.create(data.gas),
        gasUsed: BigNumber.create(data.gasUsed),
        blockNumber: BigNumber.create(data.blockNumber),
        blockHash: data.blockHash,
        input: data.input,
        output: data.output,
        value: BigNumber.create(data.value),
        type: data.type
      };
    };
    return EvmInternalTransaction2;
  }()
);
var EvmTransaction = (
  /** @class */
  function() {
    function EvmTransaction2(data) {
      this._data = EvmTransaction2.parse(data);
    }
    EvmTransaction2.create = function(data) {
      if (data instanceof EvmTransaction2) {
        return data;
      }
      return new EvmTransaction2(data);
    };
    EvmTransaction2.parse = function(data) {
      var _a2, _b;
      return {
        from: EvmAddress.create(data.from),
        to: maybe(data.to, function(to) {
          return EvmAddress.create(to);
        }),
        nonce: maybe(data.nonce, BigNumber.create),
        data: maybe(data.data),
        value: maybe(data.value, function(val) {
          return EvmNative.create(val, "wei");
        }),
        hash: data.hash,
        chain: EvmChain.create(data.chain),
        gas: maybe(data.gas, BigNumber.create),
        gasPrice: BigNumber.create(data.gasPrice),
        index: +data.index,
        blockNumber: BigNumber.create(data.blockNumber),
        blockHash: data.blockHash,
        blockTimestamp: dateInputToDate(data.blockTimestamp),
        cumulativeGasUsed: BigNumber.create(data.cumulativeGasUsed),
        gasUsed: BigNumber.create(data.gasUsed),
        contractAddress: maybe(data.contractAddress, function(address) {
          return EvmAddress.create(address);
        }),
        receiptRoot: maybe(data.receiptRoot),
        receiptStatus: maybe(data.receiptStatus, function(status) {
          return +status;
        }),
        logs: ((_a2 = data.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(log) {
          return EvmTransactionLog.create(log);
        }),
        internalTransactions: ((_b = data.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function(transaction) {
          return EvmInternalTransaction.create(transaction);
        }),
        signature: maybe(data.signature, EvmSignature.create)
      };
    };
    EvmTransaction2.equals = function(dataA, dataB) {
      var transactionA = EvmTransaction2.create(dataA);
      var transactionB = EvmTransaction2.create(dataB);
      if (!transactionA._data.chain.equals(transactionB._data.chain)) {
        return false;
      }
      if (transactionA._data.hash !== transactionB._data.hash) {
        return false;
      }
      return true;
    };
    EvmTransaction2.prototype.equals = function(data) {
      return EvmTransaction2.equals(this, data);
    };
    EvmTransaction2.prototype.toJSON = function() {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
      var data = this._data;
      return __assign3(__assign3({}, data), { to: (_a2 = data.to) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), from: (_b = data.from) === null || _b === void 0 ? void 0 : _b.toJSON(), nonce: (_c = data.nonce) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), gasPrice: (_e = data.gasPrice) === null || _e === void 0 ? void 0 : _e.toString(), gasUsed: (_f = data.gasUsed) === null || _f === void 0 ? void 0 : _f.toString(), cumulativeGasUsed: (_g = data.cumulativeGasUsed) === null || _g === void 0 ? void 0 : _g.toString(), value: (_h = data.value) === null || _h === void 0 ? void 0 : _h.toString(), chain: (_j = data.chain) === null || _j === void 0 ? void 0 : _j.toJSON(), contractAddress: (_k = data.contractAddress) === null || _k === void 0 ? void 0 : _k.toJSON(), logs: data.logs.map(function(log) {
        return log.toJSON();
      }), internalTransactions: data.internalTransactions.map(function(transaction) {
        return transaction.toJSON();
      }), signature: (_l = data.signature) === null || _l === void 0 ? void 0 : _l.toJSON(), blockNumber: (_m = data.blockNumber) === null || _m === void 0 ? void 0 : _m.toString(), blockTimestamp: data.blockTimestamp.toString() });
    };
    EvmTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmTransaction2.prototype, "result", {
      /**
       * @returns the transaction
       * @example
       * ```
       * transaction.result
       * ```
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "to", {
      /**
       * @returns the transaction to address
       * @example
       * ```
       * transaction.to // EvmAddress
       * ```
       */
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "from", {
      /**
       * @returns the transaction from address
       * @example
       * ```
       * transaction.address // EvmAddress
       * ```
       */
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "nonce", {
      /**
       * @returns the transaction nonce
       * @example
       * ```
       * transaction.nonce // 326595425
       * ```
       */
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gas", {
      /**
       * @returns the transaction gas
       * @example
       * ```
       * transaction.gas // 6721975
       * ```
       */
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gasPrice", {
      /**
       * @returns the transaction gas price
       * @example
       * ```
       * transaction.gasPrice // 20000000000
       * ```
       */
      get: function() {
        return this._data.gasPrice;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "gasUsed", {
      /**
       * @returns the transaction gas used
       * @example
       * ```
       * transaction.gasUsed // 1340925
       * ```
       */
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "cumulativeGasUsed", {
      /**
       * @returns the transaction cumulative gas used
       * @example
       * ```
       * transaction.cumulativeGasUsed // 1340925
       * ```
       */
      get: function() {
        return this._data.cumulativeGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockNumber", {
      /**
       * @returns the transaction block number
       * @example
       * ```
       * transaction.blockNumber // 12526958
       * ```
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "value", {
      /**
       * @returns the transaction value
       * @example
       * ```
       * transaction.value // EvmNative
       * ```
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "chain", {
      /**
       * @returns the transaction chain
       * @example
       * ```
       * transaction.chain // EvmChain
       * ```
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "contractAddress", {
      /**
       * @returns the transaction contract address
       * @example
       * ```
       * transaction.contractAddress // EvmAddress
       * ```
       */
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "internalTransactions", {
      /**
       * @returns the internal transactions
       * @example
       * ```
       * transaction.logs // EvmInternalTransaction[]
       * ```
       */
      get: function() {
        return this._data.internalTransactions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "logs", {
      /**
       * @returns the transaction logs
       * @example
       * ```
       * transaction.logs // EvmTransactionLog[]
       * ```
       */
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "receiptRoot", {
      /**
       * @returns the transaction receipt root
       * @example
       * ```
       * transaction.receiptRoot // string
       * ```
       */
      get: function() {
        return this._data.receiptRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "receiptStatus", {
      /**
       * @returns the transaction receipt status
       * @example
       * ```
       * transaction.receiptStatus // 1
       * ```
       */
      get: function() {
        return this._data.receiptStatus;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "data", {
      /**
       * @returns the transaction data
       * @example
       * ```
       * transaction.data // 0x000000000000000000000000000000000000000000000000000000000000002
       * ```
       */
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "hash", {
      /**
       * @returns the transaction hash
       * @example
       * ```
       * transaction.hash // 0x057Ec652A4F150f7FF94f089A38008f49a0DF88e
       * ```
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockHash", {
      /**
       * @returns the transaction black hash
       * @example
       * ```
       * transaction.blockHash // 0x0372c302e3c52e8f2e15d155e2c545e6d802e479236564af052759253b20fd86
       * ```
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "blockTimestamp", {
      /**
       * @returns the transaction block timestamp
       * @example
       * ```
       * transaction.blockTimestamp // Date
       * ```
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "signature", {
      /**
       * @returns the signature (if available)
       * @example
       * ```
       * transaction.signature // EvmSignature
       * ```
       */
      get: function() {
        return this._data.signature;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "index", {
      /**
       * @returns the index
       * @example
       * ```
       * transaction.index // 1
       * ```
       */
      get: function() {
        return this._data.index;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "v", {
      get: function() {
        var _a2;
        return (_a2 = this._data.signature) === null || _a2 === void 0 ? void 0 : _a2.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "r", {
      get: function() {
        var _a2;
        return (_a2 = this._data.signature) === null || _a2 === void 0 ? void 0 : _a2.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransaction2.prototype, "s", {
      get: function() {
        var _a2;
        return (_a2 = this._data.signature) === null || _a2 === void 0 ? void 0 : _a2.s;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransaction2;
  }()
);
var EvmSimpleBlock = (
  /** @class */
  function() {
    function EvmSimpleBlock2(data) {
      this._data = EvmSimpleBlock2.parse(data);
    }
    EvmSimpleBlock2.create = function(data) {
      if (data instanceof EvmSimpleBlock2) {
        return data;
      }
      return new EvmSimpleBlock2(data);
    };
    EvmSimpleBlock2.equals = function(dataA, dataB) {
      var blockA = EvmSimpleBlock2.create(dataA);
      var blockB = EvmSimpleBlock2.create(dataB);
      if (!blockA.chain.equals(blockB.chain)) {
        return false;
      }
      if (blockA.hash !== blockB.hash) {
        return false;
      }
      if (!blockA.number.equals(blockB.number)) {
        return false;
      }
      return true;
    };
    EvmSimpleBlock2.prototype.equals = function(data) {
      return EvmSimpleBlock2.equals(this, data);
    };
    EvmSimpleBlock2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { number: data.number.toString(), chain: data.chain.toJSON() });
    };
    EvmSimpleBlock2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmSimpleBlock2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example block.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "number", {
      /**
       * @returns the block number.
       * @example block.number // BigNumber
       */
      get: function() {
        return this._data.number;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "hash", {
      /**
       * @returns the block hash.
       * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "timestamp", {
      /**
       * @returns the block timestamp.
       * @example block.timestamp // Date
       */
      get: function() {
        return this._data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmSimpleBlock2.prototype, "chain", {
      /**
       * @returns the block chain.
       * @example block.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    EvmSimpleBlock2.parse = function(data) {
      return {
        timestamp: dateInputToDate(data.timestamp),
        number: BigNumber.create(data.number),
        chain: EvmChain.create(data.chain),
        hash: data.hash
      };
    };
    return EvmSimpleBlock2;
  }()
);
var EvmBlock = (
  /** @class */
  function() {
    function EvmBlock2(data) {
      this._data = EvmBlock2.parse(data);
    }
    EvmBlock2.create = function(data) {
      if (data instanceof EvmBlock2) {
        return data;
      }
      return new EvmBlock2(data);
    };
    EvmBlock2.equals = function(dataA, dataB) {
      var blockA = EvmSimpleBlock.create(dataA);
      var blockB = EvmSimpleBlock.create(dataB);
      if (!blockA.chain.equals(blockB.chain)) {
        return false;
      }
      if (blockA.hash !== blockB.hash) {
        return false;
      }
      return true;
    };
    EvmBlock2.prototype.equals = function(data) {
      return EvmBlock2.equals(this, data);
    };
    EvmBlock2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { number: data.number.toString(), difficulty: data.difficulty.toString(), totalDifficulty: data.totalDifficulty.toString(), size: data.size.toString(), gasLimit: data.gasLimit.toString(), gasUsed: data.gasUsed.toString(), chain: data.chain.toJSON(), miner: data.miner.toJSON(), transactions: data.transactions.map(function(transaction) {
        return transaction.toJSON();
      }) });
    };
    EvmBlock2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmBlock2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example block.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "number", {
      /**
       * @returns the block number.
       * @example block.number // BigNumber
       */
      get: function() {
        return this._data.number;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "hash", {
      /**
       * @returns the block hash.
       * @example block.hash // "0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171"
       */
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "timestamp", {
      /**
       * @returns the block timestamp.
       * @example block.timestamp // Date
       */
      get: function() {
        return this._data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "miner", {
      /**
       * @returns the block miner.
       * @example block.miner // EvmAddress
       */
      get: function() {
        return this._data.miner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "difficulty", {
      /**
       * @returns the block difficulty.
       * @example block.difficulty // BigNumber
       */
      get: function() {
        return this._data.difficulty;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "totalDifficulty", {
      /**
       * @returns the block total difficulty.
       * @example block.totalDifficulty // BigNumber
       */
      get: function() {
        return this._data.totalDifficulty;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "size", {
      /**
       * @returns the block size.
       * @example block.size // BigNumber
       */
      get: function() {
        return this._data.size;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "gasLimit", {
      /**
       * @returns the block gas limit.
       * @example block.gasLimit // BigNumber
       */
      get: function() {
        return this._data.gasLimit;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "gasUsed", {
      /**
       * @returns the block gas used.
       * @example block.gasUsed // BigNumber
       */
      get: function() {
        return this._data.gasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactions", {
      /**
       * @returns the block transactions.
       * @example block.transactions // EvmTransaction[]
       */
      get: function() {
        return this._data.transactions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "chain", {
      /**
       * @returns the block chain.
       * @example block.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactionCount", {
      /**
       * @returns the block transaction count.
       * @example block.transactionCount // 252
       */
      get: function() {
        return this._data.transactionCount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "transactionsRoot", {
      /**
       * @returns the block transactions root.
       * @example block.transactionsRoot // "0xe4c7bf3aff7ad07f9e80d57f7189f0252592fee6321c2a9bd9b09b6ce0690d27"
       */
      get: function() {
        return this._data.transactionsRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "stateRoot", {
      /**
       * @returns the block state root.
       * @example block.stateRoot // "0x49e3bfe7b618e27fde8fa08884803a8458b502c6534af69873a3cc926a7c724b"
       */
      get: function() {
        return this._data.stateRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "receiptsRoot", {
      /**
       * @returns the block receipts root.
       * @example block.receiptsRoot // "0x7cf43d7e837284f036cf92c56973f5e27bdd253ca46168fa195a6b07fa719f23"
       */
      get: function() {
        return this._data.receiptsRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "logsBloom", {
      /**
       * @returns the block logs bloom.
       * @example block.logsBloom // "0xdde5fc46c5d8bcbd58207bc9f267bf43298e23791a326ff02661e99790da9996b3e0dd912c0b8202d389d282c56e4d11eb2dec4898a32b6b165f1f4cae6aa0079498eab50293f3b8defbf6af11bb75f0408a563ddfc26a3323d1ff5f9849e95d5f034d88a757ddea032c75c00708c9ff34d2207f997cc7d93fd1fa160a6bfaf62a54e31f9fe67ab95752106ba9d185bfdc9b6dc3e17427f844ee74e5c09b17b83ad6e8fc7360f5c7c3e4e1939e77a6374bee57d1fa6b2322b11ad56ad0398302de9b26d6fbfe414aa416bff141fad9d4af6aea19322e47595e342cd377403f417dfd396ab5f151095a5535f51cbc34a40ce9648927b7d1d72ab9daf253e31daf"
       */
      get: function() {
        return this._data.logsBloom;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "extraData", {
      /**
       * @returns the block extra data.
       * @example block.extraData // "0x65746865726d696e652d6575726f70652d7765737433"
       */
      get: function() {
        return this._data.extraData;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "parentHash", {
      /**
       * @returns the block parent hash.
       * @example block.parentHash // "0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045"
       */
      get: function() {
        return this._data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "sha3Uncles", {
      /**
       * @returns the block sha3Uncles.
       * @example block.sha3Uncles // "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
       */
      get: function() {
        return this._data.sha3Uncles;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlock2.prototype, "nonce", {
      /**
       * @returns the block nonce.
       * @example block.nonce // "0xedeb2d8fd2b2bdec"
       */
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    EvmBlock2.parse = function(data) {
      return __assign3(__assign3({}, data), { miner: EvmAddress.create(data.miner), timestamp: dateInputToDate(data.timestamp), number: BigNumber.create(data.number), difficulty: BigNumber.create(data.difficulty), totalDifficulty: BigNumber.create(data.totalDifficulty), size: BigNumber.create(data.size), gasLimit: BigNumber.create(data.gasLimit), gasUsed: BigNumber.create(data.gasUsed), transactions: data.transactions.map(function(transaction) {
        return EvmTransaction.create(transaction);
      }), chain: EvmChain.create(data.chain), transactionCount: +data.transactionCount });
    };
    return EvmBlock2;
  }()
);
var EvmBlockDate = (
  /** @class */
  function() {
    function EvmBlockDate2(data) {
      this.data = data;
    }
    EvmBlockDate2.create = function(data) {
      if (data instanceof EvmBlockDate2) {
        return data;
      }
      return new EvmBlockDate2(EvmBlockDate2.parse(data));
    };
    EvmBlockDate2.parse = function(input) {
      return {
        block: input.block,
        date: new Date(input.date),
        timestamp: input.timestamp,
        // TODO: the swagger currently has wrong type for `block_timestamp`, should be `string`.
        blockTimestamp: String(input.block_timestamp),
        hash: input.hash,
        parentHash: input.parent_hash
      };
    };
    Object.defineProperty(EvmBlockDate2.prototype, "block", {
      /**
       * @description The block number.
       * @example `9193266`
       */
      get: function() {
        return this.data.block;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "date", {
      /**
       * @description The date of the block.
       * @example `2020-01-01T00:00:00+00:00`
       */
      get: function() {
        return this.data.date;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "timestamp", {
      /**
       * @description The timestamp of the block
       * @example `1577836811`
       */
      get: function() {
        return this.data.timestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "blockTimestamp", {
      /**
       * @description The timestamp of the block
       * @example `2022-01-03T22:59:39.000Z`
       */
      get: function() {
        return this.data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "block_timestamp", {
      /**
       * @deprecated Use `blockTimestamp` instead.
       */
      get: function() {
        return this.data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "hash", {
      /**
       * @description The block hash.
       * @example `0x9b559aef7ea858608c2e554246fe4a24287e7aeeb976848df2b9a2531f4b9171`
       */
      get: function() {
        return this.data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "block_hash", {
      /**
       * @deprecated Use `hash` instead.
       */
      get: function() {
        return this.data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "parentHash", {
      /**
       * @description The block hash of the parent block.
       * @example `0x011d1fc45839de975cc55d758943f9f1d204f80a90eb631f3bf064b80d53e045`
       */
      get: function() {
        return this.data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmBlockDate2.prototype, "parent_hash", {
      /**
       * @deprecated Use `parentHash` instead.
       */
      get: function() {
        return this.data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    return EvmBlockDate2;
  }()
);
var EvmEvent = (
  /** @class */
  function() {
    function EvmEvent2(_data) {
      this._data = _data;
    }
    EvmEvent2.create = function(data) {
      if (data instanceof EvmEvent2) {
        return data;
      }
      return new EvmEvent2(EvmEvent2.parse(data));
    };
    EvmEvent2.equals = function(dataA, dataB) {
      var eventA = EvmEvent2.create(dataA);
      var eventB = EvmEvent2.create(dataB);
      if (!eventA._data.chain.equals(eventB._data.chain)) {
        return false;
      }
      if (!eventA._data.blockNumber.equals(eventB._data.blockNumber)) {
        return false;
      }
      if (!eventA._data.address.equals(eventB._data.address)) {
        return false;
      }
      if (eventA._data.data !== eventB._data.data) {
        return false;
      }
      return true;
    };
    EvmEvent2.prototype.equals = function(data) {
      return EvmEvent2.equals(this, data);
    };
    EvmEvent2.prototype.toJSON = function() {
      var _a2, _b, _c;
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), address: data.address.toJSON(), blockNumber: data.blockNumber.toString(), data: {
        from: (_a2 = data.data.from) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
        to: (_b = data.data.to) === null || _b === void 0 ? void 0 : _b.toJSON(),
        value: (_c = data.data.value) === null || _c === void 0 ? void 0 : _c.format()
      } });
    };
    EvmEvent2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmEvent2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example event.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "chain", {
      /**
       * @returns the event chain
       * @example event.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "address", {
      /**
       * @returns the event address
       * @example event.address // EvmAddress
       */
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockNumber", {
      /**
       * @returns the event block number
       * @example event.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockTimestamp", {
      /**
       * @returns the event block timestamp
       * @example event.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "data", {
      /**
       * @returns the event data with from address, to address and value
       * @example event.data
       */
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "transactionHash", {
      /**
       * @returns the event block trannsaciton hash
       * @example event.transactionHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmEvent2.prototype, "blockHash", {
      /**
       * @returns the event block hash
       * @example event.blockHash // "0xc9f62f4f6ab505a96c1a84ec2899c6bfd86245ef1effaa689fc997798be763d5"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    EvmEvent2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), address: EvmAddress.create(data.address), blockNumber: BigNumber.create(data.blockNumber), blockTimestamp: dateInputToDate(data.blockTimestamp), data: {
        from: maybe(data.data.from, function(from) {
          return EvmAddress.create(from);
        }),
        to: maybe(data.data.to, function(to) {
          return EvmAddress.create(to);
        }),
        value: maybe(data.data.value, EvmNative.create)
      } });
    };
    return EvmEvent2;
  }()
);
var EvmNftMedia = (
  /** @class */
  function() {
    function EvmNftMedia2(data) {
      this._data = EvmNftMedia2.parse(data);
    }
    EvmNftMedia2.create = function(data) {
      if (data instanceof EvmNftMedia2) {
        return data;
      }
      return new EvmNftMedia2(data);
    };
    EvmNftMedia2.equals = function(dataA, dataB) {
      var mediaA = EvmNftMedia2.create(dataA);
      var mediaB = EvmNftMedia2.create(dataB);
      if (!mediaA.chain.equals(mediaB.chain)) {
        return false;
      }
      if (mediaA.originalMediaUrl !== mediaB.originalMediaUrl) {
        return false;
      }
      return true;
    };
    EvmNftMedia2.prototype.equals = function(data) {
      return EvmNftMedia2.equals(this, data);
    };
    EvmNftMedia2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON() });
    };
    EvmNftMedia2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftMedia2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example media.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "updatedAt", {
      get: function() {
        return this._data.updatedAt;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "originalMediaUrl", {
      get: function() {
        return this._data.originalMediaUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "category", {
      get: function() {
        return this._data.category;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "mimetype", {
      get: function() {
        return this._data.mimetype;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "parentHash", {
      get: function() {
        return this._data.parentHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMedia2.prototype, "mediaCollection", {
      get: function() {
        return this._data.mediaCollection;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftMedia2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), updatedAt: maybe(data.updatedAt, function(date) {
        return dateInputToDate(date);
      }) });
    };
    return EvmNftMedia2;
  }()
);
var EvmNft = (
  /** @class */
  function() {
    function EvmNft2(data) {
      this._data = EvmNft2.parse(data);
    }
    EvmNft2.create = function(data) {
      if (data instanceof EvmNft2) {
        return data;
      }
      return new EvmNft2(data);
    };
    EvmNft2.equals = function(valueA, valueB) {
      var nftA = EvmNft2.create(valueA);
      var nftB = EvmNft2.create(valueB);
      if (!nftA._data.chain.equals(nftB._data.chain)) {
        return false;
      }
      if (!nftA._data.tokenAddress.equals(nftB._data.tokenAddress)) {
        return false;
      }
      if (nftA._data.ownerOf && nftB._data.ownerOf && !nftA._data.ownerOf.equals(nftB._data.ownerOf)) {
        return false;
      }
      if (nftA._data.ownerOf && !nftB._data.ownerOf || !nftA._data.ownerOf && nftB._data.ownerOf) {
        return false;
      }
      return true;
    };
    EvmNft2.prototype.equals = function(value) {
      return EvmNft2.equals(this, value);
    };
    EvmNft2.prototype.toJSON = function() {
      var _b, _c, _d, _e;
      var data = this._data;
      return __assign3(__assign3({}, data), { tokenAddress: data.tokenAddress.toJSON(), chain: data.chain.toJSON(), ownerOf: (_b = data.ownerOf) === null || _b === void 0 ? void 0 : _b.toJSON(), blockNumberMinted: (_c = data.blockNumberMinted) === null || _c === void 0 ? void 0 : _c.toString(), blockNumber: (_d = data.blockNumber) === null || _d === void 0 ? void 0 : _d.toString(), media: (_e = data.media) === null || _e === void 0 ? void 0 : _e.format() });
    };
    EvmNft2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNft2.prototype, "result", {
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "chain", {
      /**
       * @returns the NFT chain
       * @example
       * ```
       * nft.chain // EvmChain
       * ```
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "contractType", {
      /**
       * @returns the NFT contract type
       * @example
       * ```
       * nft.contractType // "ERC721" | "ERC1155"
       * ```
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenAddress", {
      /**
       * @returns the NFT token address
       * @example
       * ```
       * nft.tokenAddress // EvmAddress
       * ```
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "metadata", {
      /**
       * @returns the NFT metadata
       * @example
       * ```ts
       * nft.metadata
       * // {
       * // name: 'Pancake',
       * // description: 'The dessert series 1',
       * // image: 'ipfs://QmNQFXCZ6LGzvpMW9Q5PWbCrEnLknQrPwr2r8pbQAgzQ9A/4863BD6B-6C92-4B96-BF80-8020B2F7C3A5.jpeg',
       * // }
       * ```
       */
      get: function() {
        return this._data.metadata;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenUri", {
      /**
       * @returns the NFT token URI
       * @example
       * ```
       * nft.tokenUri // "https://gateway.moralisipfs.com/ipfs/QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC/728.json"
       * ```
       */
      get: function() {
        return this._data.tokenUri;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenHash", {
      /**
       * @returns the NFT token hash
       * @example
       * ```
       * nft.tokenHash // "QmajSqgxY3cWBgBeRm38vasJAcTit1kp5EwqVHxszJYgUC"
       * ```
       */
      get: function() {
        return this._data.tokenHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "name", {
      /**
       * @returns the NFT name
       * @example
       * ```
       * nft.name // "Tether USD"
       * ```
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "symbol", {
      /**
       * @returns the NFT symbol
       * @example
       * ```
       * nft.symbol // "USDT"
       * ```
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "ownerOf", {
      /**
       * @returns the NFT owner of address
       * @example
       * ```
       * nft.ownerOf // EvmAddress
       * ```
       */
      get: function() {
        return this._data.ownerOf;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "blockNumberMinted", {
      /**
       * @returns the NFT block number minted from
       * @example
       * ```
       * nft.blockNumberMinted // BigNumber
       * ```
       */
      get: function() {
        return this._data.blockNumberMinted;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "blockNumber", {
      /**
       * @returns the NFT block number
       * @example
       * ```
       * nft.blockNumber // BigNumber
       * ```
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "lastMetadataSync", {
      /**
       * @returns the NFT latest metadata sync date
       * @example
       * ```
       * nft.latestMetadataSync // Date
       * ```
       */
      get: function() {
        return this._data.lastMetadataSync;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "lastTokenUriSync", {
      /**
       * @returns the NFT latest token URI sync date
       * @example
       * ```
       * nft.latestTokenUriSync // Date
       * ```
       */
      get: function() {
        return this._data.lastTokenUriSync;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "amount", {
      /**
       * @returns the NFT amount
       * @example
       * ```
       * nft.amount // 2
       * ```
       */
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "tokenId", {
      /**
       * @returns the token id
       * @example
       * ```
       * nft.tokenId // '1234'
       * ```
       */
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "media", {
      /**
       * @returns the processed media of the NFT
       * @example
       * ```
       * nft.media // EvmNftMedia
       * ```
       */
      get: function() {
        return this._data.media;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNft2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    var _a2;
    _a2 = EvmNft2;
    EvmNft2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), contractType: maybe(data.contractType), tokenAddress: EvmAddress.create(data.tokenAddress), metadata: maybe(data.metadata, _a2.validateMetadata), tokenUri: maybe(data.tokenUri), tokenHash: maybe(data.tokenHash), name: maybe(data.name), symbol: maybe(data.symbol), ownerOf: maybe(data.ownerOf, function(ownerOf) {
        return EvmAddress.create(ownerOf);
      }), blockNumberMinted: maybe(data.blockNumberMinted, BigNumber.create), blockNumber: maybe(data.blockNumber, BigNumber.create), lastMetadataSync: maybe(data.lastMetadataSync, dateInputToDate), lastTokenUriSync: maybe(data.lastTokenUriSync, dateInputToDate), amount: maybe(data.amount, function(value) {
        return +value;
      }), media: maybe(data.media, function(value) {
        return EvmNftMedia.create(value);
      }) });
    };
    EvmNft2.validateMetadata = function(value) {
      try {
        return JSON.parse(value);
      } catch (error) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid metadata provided, cannot parse the value to JSON"
        });
      }
    };
    return EvmNft2;
  }()
);
var EvmNftCollection = (
  /** @class */
  function() {
    function EvmNftCollection2(data) {
      this._data = EvmNftCollection2.parse(data);
    }
    EvmNftCollection2.create = function(data) {
      if (data instanceof EvmNftCollection2) {
        return data;
      }
      return new EvmNftCollection2(data);
    };
    EvmNftCollection2.equals = function(dataA, dataB) {
      var collectionA = EvmNftCollection2.create(dataA);
      var collectionB = EvmNftCollection2.create(dataB);
      if (!collectionA.chain.equals(collectionB.chain)) {
        return false;
      }
      if (!collectionA.tokenAddress.equals(collectionB.tokenAddress)) {
        return false;
      }
      return true;
    };
    EvmNftCollection2.prototype.equals = function(data) {
      return EvmNftCollection2.equals(this, data);
    };
    EvmNftCollection2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });
    };
    EvmNftCollection2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftCollection2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example collection.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "chain", {
      /**
       * @returns the chain where the collection is deployed.
       * @example collection.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "tokenAddress", {
      /**
       * @returns the token address of collection.
       * @example collection.tokenAddress // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "contractType", {
      /**
       * @returns the token type of collection.
       * @example collection.tokenAddress // 'ERC721'
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "name", {
      /**
       * @returns the token name of collection.
       * @example collection.tokenAddress // 'Test NFT'
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftCollection2.prototype, "symbol", {
      /**
       * @returns the token symbol of collection.
       * @example collection.symbol // 'TEST'
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftCollection2.parse = function(data) {
      return __assign3(__assign3({}, data), { tokenAddress: EvmAddress.create(data.tokenAddress), chain: EvmChain.create(data.chain), contractType: maybe(data.contractType) });
    };
    return EvmNftCollection2;
  }()
);
var EvmNftMetadata = (
  /** @class */
  function() {
    function EvmNftMetadata2(data) {
      this._data = EvmNftMetadata2.parse(data);
    }
    EvmNftMetadata2.create = function(data) {
      if (data instanceof EvmNftMetadata2) {
        return data;
      }
      return new EvmNftMetadata2(data);
    };
    EvmNftMetadata2.equals = function(dataA, dataB) {
      var metadataA = EvmNftMetadata2.create(dataA);
      var metadataB = EvmNftMetadata2.create(dataB);
      if (!metadataA._data.chain.equals(metadataB._data.chain)) {
        return false;
      }
      if (!metadataA._data.tokenAddress.equals(metadataB._data.tokenAddress)) {
        return false;
      }
      return true;
    };
    EvmNftMetadata2.prototype.equals = function(data) {
      return EvmNftMetadata2.equals(this, data);
    };
    EvmNftMetadata2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), tokenAddress: data.tokenAddress.toJSON() });
    };
    EvmNftMetadata2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftMetadata2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example metadata.result;
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "name", {
      /**
       * @returns the name in the metadata.
       * @example metadata.name; // "Baby Ape Mutant Club"
       */
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "symbol", {
      /**
       * @returns the symbol in the metadata.
       * @example metadata.symbol; // "BAMC"
       */
      get: function() {
        return this._data.symbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "contractType", {
      /**
       * @returns the contract type of the NFT.
       * @example metadata.contractType; // "ERC721"
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "chain", {
      /**
       * @returns the chain in the metadata.
       * @example metadata.chain; // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "tokenAddress", {
      /**
       * @returns the token address in the metadata.
       * @example metadata.tokenAddress; // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftMetadata2.prototype, "syncedAt", {
      /**
       * @returns the date the metadata was synced.
       * @example metadata.syncedAt; // Date
       */
      get: function() {
        return this._data.syncedAt;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftMetadata2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), tokenAddress: EvmAddress.create(data.tokenAddress), syncedAt: maybe(data.syncedAt, dateInputToDate) });
    };
    return EvmNftMetadata2;
  }()
);
var EvmNftTransfer = (
  /** @class */
  function() {
    function EvmNftTransfer2(data) {
      this._data = EvmNftTransfer2.parse(data);
    }
    EvmNftTransfer2.create = function(data) {
      if (data instanceof EvmNftTransfer2) {
        return data;
      }
      return new EvmNftTransfer2(data);
    };
    EvmNftTransfer2.equals = function(dataA, dataB) {
      var transferA = EvmNftTransfer2.create(dataA);
      var transferB = EvmNftTransfer2.create(dataB);
      if (!transferA.chain.equals(transferB.chain)) {
        return false;
      }
      if (transferA.blockHash !== transferB.blockHash) {
        return false;
      }
      if (transferA.tokenId !== transferB.tokenId) {
        return false;
      }
      if (transferA.logIndex !== transferB.logIndex) {
        return false;
      }
      return true;
    };
    EvmNftTransfer2.prototype.equals = function(data) {
      return EvmNftTransfer2.equals(this, data);
    };
    EvmNftTransfer2.prototype.toJSON = function() {
      var data = this._data;
      return __assign3(__assign3({}, data), { chain: data.chain.toJSON(), fromAddress: data.fromAddress ? data.fromAddress.toJSON() : void 0, toAddress: data.toAddress.toJSON(), tokenAddress: data.tokenAddress.toJSON(), value: data.value ? data.value.format() : void 0, operator: data.operator ? data.operator.toJSON() : void 0, blockNumber: data.blockNumber.toString() });
    };
    EvmNftTransfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmNftTransfer2.prototype, "result", {
      /**
       * @returns all the data without casting it to JSON.
       * @example transfer.result
       */
      get: function() {
        return this._data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "chain", {
      /**
       * @returns the chain of the transfer.
       * @example transfer.chain // EvmChain
       */
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockHash", {
      /**
       * @returns the block hash of the transfer.
       * @example transfer.blockHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
       */
      get: function() {
        return this._data.blockHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockNumber", {
      /**
       * @returns the block number of the transfer.
       * @example transfer.blockNumber // BigNumber
       */
      get: function() {
        return this._data.blockNumber;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "blockTimestamp", {
      /**
       * @returns the block timestamp of the transfer.
       * @example transfer.blockTimestamp // Date
       */
      get: function() {
        return this._data.blockTimestamp;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "fromAddress", {
      /**
       * @returns the from address of the transfer.
       * @example transfer.fromAddress // EvmAddress
       */
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "toAddress", {
      /**
       * @returns the to address of the transfer.
       * @example transfer.toAddress // EvmAddress
       */
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "tokenAddress", {
      /**
       * @returns the token address of the transfer.
       * @example transfer.tokenAddress // EvmAddress
       */
      get: function() {
        return this._data.tokenAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "tokenId", {
      /**
       * @returns the token id of the transfer.
       * @example transfer.tokenId // "15"
       */
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "amount", {
      /**
       * @returns the amount of the transfer.
       * @example transfer.amount // 1
       */
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "value", {
      /**
       * @returns the value of the transfer.
       * @example transfer.value // EvmNative
       */
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "logIndex", {
      /**
       * @returns the log index of the transfer.
       * @example transfer.logIndex // 0
       */
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionHash", {
      /**
       * @returns the transaction hash of the transfer.
       * @example transfer.transactionHash // "0x057Ec652A4F150f7FF94f089A38008f49a0DF88e"
       */
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionIndex", {
      /**
       * @returns the transaction index of the transfer.
       * @example transfer.transactionIndex // 123
       */
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "transactionType", {
      /**
       * @returns the transaction type of the transfer.
       * @example transfer.transactionType // "1"
       */
      get: function() {
        return this._data.transactionType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "operator", {
      /**
       * @returns the operator of the transfer.
       * @example transfer.operator // EvmAddress
       */
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "contractType", {
      /**
       * @returns the contract type of the transfer.
       * @example transfer.contractType // "ERC721"
       */
      get: function() {
        return this._data.contractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmNftTransfer2.prototype, "possibleSpam", {
      /**
       * @returns possibility of the token being a spam token
       * @example transfer.possibleSpam // true
       */
      get: function() {
        return this._data.possibleSpam;
      },
      enumerable: false,
      configurable: true
    });
    EvmNftTransfer2.parse = function(data) {
      return __assign3(__assign3({}, data), { chain: EvmChain.create(data.chain), amount: maybe(data.amount, function(amount) {
        return +amount;
      }), blockNumber: BigNumber.create(data.blockNumber), blockTimestamp: dateInputToDate(data.blockTimestamp), transactionIndex: maybe(data.transactionIndex, function(index) {
        return +index;
      }), transactionType: maybe(data.transactionType), fromAddress: maybe(data.fromAddress, function(address) {
        return EvmAddress.create(address);
      }), toAddress: EvmAddress.create(data.toAddress), tokenAddress: EvmAddress.create(data.tokenAddress), value: maybe(data.value, EvmNative.create), operator: maybe(data.operator, function(operator) {
        return EvmAddress.create(operator);
      }), logIndex: +data.logIndex });
    };
    return EvmNftTransfer2;
  }()
);
var EvmTransactionLogDecoded = (
  /** @class */
  function(_super) {
    __extends4(EvmTransactionLogDecoded2, _super);
    function EvmTransactionLogDecoded2(value) {
      var _this = _super.call(this, value) || this;
      _this._value = EvmTransactionLogDecoded2.parse(value);
      return _this;
    }
    EvmTransactionLogDecoded2.create = function(value) {
      if (value instanceof EvmTransactionLogDecoded2) {
        return value;
      }
      return new EvmTransactionLogDecoded2(value);
    };
    EvmTransactionLogDecoded2.parse = function(value) {
      var data = _super.parse.call(this, value);
      return __assign3(__assign3({}, data), { decodedEvent: value.decodedEvent });
    };
    Object.defineProperty(EvmTransactionLogDecoded2.prototype, "decodedEvent", {
      get: function() {
        return this._value.decodedEvent;
      },
      enumerable: false,
      configurable: true
    });
    return EvmTransactionLogDecoded2;
  }(EvmTransactionLog)
);
var EvmTransactionVerbose = (
  /** @class */
  function(_super) {
    __extends4(EvmTransactionVerbose2, _super);
    function EvmTransactionVerbose2(data) {
      var _this = _super.call(this, data) || this;
      _this._data = EvmTransactionVerbose2.parse(data);
      return _this;
    }
    EvmTransactionVerbose2.create = function(data) {
      if (data instanceof EvmTransactionVerbose2) {
        return data;
      }
      return new EvmTransactionVerbose2(data);
    };
    Object.defineProperty(EvmTransactionVerbose2.prototype, "decodedCall", {
      get: function() {
        return this._data.decodedCall;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmTransactionVerbose2.prototype, "logs", {
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    var _a2;
    _a2 = EvmTransactionVerbose2;
    EvmTransactionVerbose2.parse = function(data) {
      var parsed = _super.parse.call(_a2, data);
      return __assign3(__assign3({}, parsed), { logs: data.logs.map(function(log) {
        return EvmTransactionLogDecoded.create(log);
      }), decodedCall: data.decodedCall });
    };
    return EvmTransactionVerbose2;
  }(EvmTransaction)
);
var EvmTrade = (
  /** @class */
  function() {
    function EvmTrade2(input) {
      this.transactionHash = input.transactionHash;
      this.transactionIndex = input.transactionIndex;
      this.tokenIds = input.tokenIds;
      this.sellerAddress = EvmAddress.create(input.sellerAddress);
      this.buyerAddress = EvmAddress.create(input.buyerAddress);
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.marketplaceAddress = EvmAddress.create(input.marketplaceAddress);
      this.priceTokenAddress = input.priceTokenAddress ? EvmAddress.create(input.priceTokenAddress) : void 0;
      this.price = EvmNative.create(input.price);
      this.blockTimestamp = input.blockTimestamp;
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockHash = input.blockHash;
    }
    EvmTrade2.create = function(input) {
      if (input instanceof EvmTrade2) {
        return input;
      }
      return new EvmTrade2(input);
    };
    EvmTrade2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        transactionIndex: Number(json.transaction_index),
        tokenIds: json.token_ids,
        sellerAddress: EvmAddress.fromJSON(json.seller_address),
        buyerAddress: EvmAddress.fromJSON(json.buyer_address),
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        marketplaceAddress: EvmAddress.fromJSON(json.marketplace_address),
        priceTokenAddress: json.price_token_address ? EvmAddress.fromJSON(json.price_token_address) : void 0,
        price: EvmNative.fromJSON(json.price),
        blockTimestamp: new Date(json.block_timestamp),
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockHash: json.block_hash
      };
      return EvmTrade2.create(input);
    };
    EvmTrade2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        transaction_index: String(this.transactionIndex),
        token_ids: this.tokenIds,
        seller_address: this.sellerAddress.toJSON(),
        buyer_address: this.buyerAddress.toJSON(),
        token_address: this.tokenAddress.toJSON(),
        marketplace_address: this.marketplaceAddress.toJSON(),
        price_token_address: this.priceTokenAddress ? this.priceTokenAddress.toJSON() : void 0,
        price: this.price.toJSON(),
        block_timestamp: this.blockTimestamp.toISOString(),
        block_number: this.blockNumber.toJSON(),
        block_hash: this.blockHash
      };
    };
    return EvmTrade2;
  }()
);
var EvmTradeCollection = (
  /** @class */
  function() {
    function EvmTradeCollection2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmTrade.create(item);
      });
    }
    EvmTradeCollection2.create = function(input) {
      if (input instanceof EvmTradeCollection2) {
        return input;
      }
      return new EvmTradeCollection2(input);
    };
    EvmTradeCollection2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmTrade.fromJSON(item);
        })
      };
      return EvmTradeCollection2.create(input);
    };
    EvmTradeCollection2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmTradeCollection2;
  }()
);
var EvmSoldPriceLastSalePaymentToken = (
  /** @class */
  function() {
    function EvmSoldPriceLastSalePaymentToken2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
    }
    EvmSoldPriceLastSalePaymentToken2.create = function(input) {
      if (input instanceof EvmSoldPriceLastSalePaymentToken2) {
        return input;
      }
      return new EvmSoldPriceLastSalePaymentToken2(input);
    };
    EvmSoldPriceLastSalePaymentToken2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        tokenAddress: EvmAddress.fromJSON(json.token_address)
      };
      return EvmSoldPriceLastSalePaymentToken2.create(input);
    };
    EvmSoldPriceLastSalePaymentToken2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        token_address: this.tokenAddress.toJSON()
      };
    };
    return EvmSoldPriceLastSalePaymentToken2;
  }()
);
var EvmSoldPriceLastSale = (
  /** @class */
  function() {
    function EvmSoldPriceLastSale2(input) {
      this.transactionHash = input.transactionHash;
      this.blockTimestamp = input.blockTimestamp;
      this.buyerAddress = EvmAddress.create(input.buyerAddress);
      this.sellerAddress = EvmAddress.create(input.sellerAddress);
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.usdPriceAtSale = input.usdPriceAtSale;
      this.currentUsdValue = input.currentUsdValue;
      this.tokenId = input.tokenId;
      this.paymentToken = EvmSoldPriceLastSalePaymentToken.create(input.paymentToken);
    }
    EvmSoldPriceLastSale2.create = function(input) {
      if (input instanceof EvmSoldPriceLastSale2) {
        return input;
      }
      return new EvmSoldPriceLastSale2(input);
    };
    EvmSoldPriceLastSale2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        blockTimestamp: json.block_timestamp,
        buyerAddress: EvmAddress.fromJSON(json.buyer_address),
        sellerAddress: EvmAddress.fromJSON(json.seller_address),
        price: json.price,
        priceFormatted: json.price_formatted,
        usdPriceAtSale: json.usd_price_at_sale,
        currentUsdValue: json.current_usd_value,
        tokenId: json.token_id,
        paymentToken: EvmSoldPriceLastSalePaymentToken.fromJSON(json.payment_token)
      };
      return EvmSoldPriceLastSale2.create(input);
    };
    EvmSoldPriceLastSale2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        block_timestamp: this.blockTimestamp,
        buyer_address: this.buyerAddress.toJSON(),
        seller_address: this.sellerAddress.toJSON(),
        price: this.price,
        price_formatted: this.priceFormatted,
        usd_price_at_sale: this.usdPriceAtSale,
        current_usd_value: this.currentUsdValue,
        token_id: this.tokenId,
        payment_token: this.paymentToken.toJSON()
      };
    };
    return EvmSoldPriceLastSale2;
  }()
);
var EvmSoldPriceLowestSalePaymentToken = (
  /** @class */
  function() {
    function EvmSoldPriceLowestSalePaymentToken2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
    }
    EvmSoldPriceLowestSalePaymentToken2.create = function(input) {
      if (input instanceof EvmSoldPriceLowestSalePaymentToken2) {
        return input;
      }
      return new EvmSoldPriceLowestSalePaymentToken2(input);
    };
    EvmSoldPriceLowestSalePaymentToken2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        tokenAddress: EvmAddress.fromJSON(json.token_address)
      };
      return EvmSoldPriceLowestSalePaymentToken2.create(input);
    };
    EvmSoldPriceLowestSalePaymentToken2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        token_address: this.tokenAddress.toJSON()
      };
    };
    return EvmSoldPriceLowestSalePaymentToken2;
  }()
);
var EvmSoldPriceLowestSale = (
  /** @class */
  function() {
    function EvmSoldPriceLowestSale2(input) {
      this.transactionHash = input.transactionHash;
      this.blockTimestamp = input.blockTimestamp;
      this.buyerAddress = input.buyerAddress ? EvmAddress.create(input.buyerAddress) : void 0;
      this.sellerAddress = input.sellerAddress ? EvmAddress.create(input.sellerAddress) : void 0;
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.usdPriceAtSale = input.usdPriceAtSale;
      this.currentUsdValue = input.currentUsdValue;
      this.tokenId = input.tokenId;
      this.paymentToken = EvmSoldPriceLowestSalePaymentToken.create(input.paymentToken);
    }
    EvmSoldPriceLowestSale2.create = function(input) {
      if (input instanceof EvmSoldPriceLowestSale2) {
        return input;
      }
      return new EvmSoldPriceLowestSale2(input);
    };
    EvmSoldPriceLowestSale2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        blockTimestamp: json.block_timestamp,
        buyerAddress: json.buyer_address ? EvmAddress.fromJSON(json.buyer_address) : void 0,
        sellerAddress: json.seller_address ? EvmAddress.fromJSON(json.seller_address) : void 0,
        price: json.price,
        priceFormatted: json.price_formatted,
        usdPriceAtSale: json.usd_price_at_sale,
        currentUsdValue: json.current_usd_value,
        tokenId: json.token_id,
        paymentToken: EvmSoldPriceLowestSalePaymentToken.fromJSON(json.payment_token)
      };
      return EvmSoldPriceLowestSale2.create(input);
    };
    EvmSoldPriceLowestSale2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        block_timestamp: this.blockTimestamp,
        buyer_address: this.buyerAddress ? this.buyerAddress.toJSON() : void 0,
        seller_address: this.sellerAddress ? this.sellerAddress.toJSON() : void 0,
        price: this.price,
        price_formatted: this.priceFormatted,
        usd_price_at_sale: this.usdPriceAtSale,
        current_usd_value: this.currentUsdValue,
        token_id: this.tokenId,
        payment_token: this.paymentToken.toJSON()
      };
    };
    return EvmSoldPriceLowestSale2;
  }()
);
var EvmSoldPriceHighestSalePaymentToken = (
  /** @class */
  function() {
    function EvmSoldPriceHighestSalePaymentToken2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
    }
    EvmSoldPriceHighestSalePaymentToken2.create = function(input) {
      if (input instanceof EvmSoldPriceHighestSalePaymentToken2) {
        return input;
      }
      return new EvmSoldPriceHighestSalePaymentToken2(input);
    };
    EvmSoldPriceHighestSalePaymentToken2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        tokenAddress: EvmAddress.fromJSON(json.token_address)
      };
      return EvmSoldPriceHighestSalePaymentToken2.create(input);
    };
    EvmSoldPriceHighestSalePaymentToken2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        token_address: this.tokenAddress.toJSON()
      };
    };
    return EvmSoldPriceHighestSalePaymentToken2;
  }()
);
var EvmSoldPriceHighestSale = (
  /** @class */
  function() {
    function EvmSoldPriceHighestSale2(input) {
      this.transactionHash = input.transactionHash;
      this.blockTimestamp = input.blockTimestamp;
      this.buyerAddress = input.buyerAddress ? EvmAddress.create(input.buyerAddress) : void 0;
      this.sellerAddress = input.sellerAddress ? EvmAddress.create(input.sellerAddress) : void 0;
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.usdPriceAtSale = input.usdPriceAtSale;
      this.currentUsdValue = input.currentUsdValue;
      this.tokenId = input.tokenId;
      this.paymentToken = EvmSoldPriceHighestSalePaymentToken.create(input.paymentToken);
    }
    EvmSoldPriceHighestSale2.create = function(input) {
      if (input instanceof EvmSoldPriceHighestSale2) {
        return input;
      }
      return new EvmSoldPriceHighestSale2(input);
    };
    EvmSoldPriceHighestSale2.fromJSON = function(json) {
      var input = {
        transactionHash: json.transaction_hash,
        blockTimestamp: json.block_timestamp,
        buyerAddress: json.buyer_address ? EvmAddress.fromJSON(json.buyer_address) : void 0,
        sellerAddress: json.seller_address ? EvmAddress.fromJSON(json.seller_address) : void 0,
        price: json.price,
        priceFormatted: json.price_formatted,
        usdPriceAtSale: json.usd_price_at_sale,
        currentUsdValue: json.current_usd_value,
        tokenId: json.token_id,
        paymentToken: EvmSoldPriceHighestSalePaymentToken.fromJSON(json.payment_token)
      };
      return EvmSoldPriceHighestSale2.create(input);
    };
    EvmSoldPriceHighestSale2.prototype.toJSON = function() {
      return {
        transaction_hash: this.transactionHash,
        block_timestamp: this.blockTimestamp,
        buyer_address: this.buyerAddress ? this.buyerAddress.toJSON() : void 0,
        seller_address: this.sellerAddress ? this.sellerAddress.toJSON() : void 0,
        price: this.price,
        price_formatted: this.priceFormatted,
        usd_price_at_sale: this.usdPriceAtSale,
        current_usd_value: this.currentUsdValue,
        token_id: this.tokenId,
        payment_token: this.paymentToken.toJSON()
      };
    };
    return EvmSoldPriceHighestSale2;
  }()
);
var EvmSoldPriceAverageSale = (
  /** @class */
  function() {
    function EvmSoldPriceAverageSale2(input) {
      this.price = input.price;
      this.priceFormatted = input.priceFormatted;
      this.currentUsdValue = input.currentUsdValue;
    }
    EvmSoldPriceAverageSale2.create = function(input) {
      if (input instanceof EvmSoldPriceAverageSale2) {
        return input;
      }
      return new EvmSoldPriceAverageSale2(input);
    };
    EvmSoldPriceAverageSale2.fromJSON = function(json) {
      var input = {
        price: json.price,
        priceFormatted: json.price_formatted,
        currentUsdValue: json.current_usd_value
      };
      return EvmSoldPriceAverageSale2.create(input);
    };
    EvmSoldPriceAverageSale2.prototype.toJSON = function() {
      return {
        price: this.price,
        price_formatted: this.priceFormatted,
        current_usd_value: this.currentUsdValue
      };
    };
    return EvmSoldPriceAverageSale2;
  }()
);
var EvmSoldPrice = (
  /** @class */
  function() {
    function EvmSoldPrice2(input) {
      this.lastSale = EvmSoldPriceLastSale.create(input.lastSale);
      this.lowestSale = EvmSoldPriceLowestSale.create(input.lowestSale);
      this.highestSale = EvmSoldPriceHighestSale.create(input.highestSale);
      this.averageSale = EvmSoldPriceAverageSale.create(input.averageSale);
      this.totalTrades = input.totalTrades;
      this.message = input.message;
    }
    EvmSoldPrice2.create = function(input) {
      if (input instanceof EvmSoldPrice2) {
        return input;
      }
      return new EvmSoldPrice2(input);
    };
    EvmSoldPrice2.fromJSON = function(json) {
      var input = {
        lastSale: EvmSoldPriceLastSale.fromJSON(json.last_sale),
        lowestSale: EvmSoldPriceLowestSale.fromJSON(json.lowest_sale),
        highestSale: EvmSoldPriceHighestSale.fromJSON(json.highest_sale),
        averageSale: EvmSoldPriceAverageSale.fromJSON(json.average_sale),
        totalTrades: json.total_trades,
        message: json.message
      };
      return EvmSoldPrice2.create(input);
    };
    EvmSoldPrice2.prototype.toJSON = function() {
      return {
        last_sale: this.lastSale.toJSON(),
        lowest_sale: this.lowestSale.toJSON(),
        highest_sale: this.highestSale.toJSON(),
        average_sale: this.averageSale.toJSON(),
        total_trades: this.totalTrades,
        message: this.message
      };
    };
    return EvmSoldPrice2;
  }()
);
var EvmNativeErc20Price = (
  /** @class */
  function() {
    function EvmNativeErc20Price2(input) {
      this.value = input.value;
      this.decimals = input.decimals;
      this.name = input.name;
      this.symbol = input.symbol;
      this.address = EvmAddress.create(input.address);
    }
    EvmNativeErc20Price2.create = function(input) {
      if (input instanceof EvmNativeErc20Price2) {
        return input;
      }
      return new EvmNativeErc20Price2(input);
    };
    EvmNativeErc20Price2.fromJSON = function(json) {
      var input = {
        value: json.value,
        decimals: json.decimals,
        name: json.name,
        symbol: json.symbol,
        address: EvmAddress.fromJSON(json.address)
      };
      return EvmNativeErc20Price2.create(input);
    };
    EvmNativeErc20Price2.prototype.toJSON = function() {
      return {
        value: this.value,
        decimals: this.decimals,
        name: this.name,
        symbol: this.symbol,
        address: this.address.toJSON()
      };
    };
    return EvmNativeErc20Price2;
  }()
);
var EvmErc20Price = (
  /** @class */
  function() {
    function EvmErc20Price2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.nativePrice = input.nativePrice ? EvmNativeErc20Price.create(input.nativePrice) : void 0;
      this.usdPrice = input.usdPrice;
      this.usdPriceFormatted = input.usdPriceFormatted;
      this["24hrPercentChange"] = input["24hrPercentChange"];
      this.exchangeAddress = input.exchangeAddress;
      this.exchangeName = input.exchangeName;
      this.tokenAddress = input.tokenAddress;
      this.toBlock = input.toBlock;
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
      this.pairAddress = input.pairAddress;
      this.pairTotalLiquidityUsd = input.pairTotalLiquidityUsd;
    }
    EvmErc20Price2.create = function(input) {
      if (input instanceof EvmErc20Price2) {
        return input;
      }
      return new EvmErc20Price2(input);
    };
    EvmErc20Price2.fromJSON = function(json) {
      var input = {
        tokenName: json.tokenName,
        tokenSymbol: json.tokenSymbol,
        tokenLogo: json.tokenLogo,
        tokenDecimals: json.tokenDecimals,
        nativePrice: json.nativePrice ? EvmNativeErc20Price.fromJSON(json.nativePrice) : void 0,
        usdPrice: json.usdPrice,
        usdPriceFormatted: json.usdPriceFormatted,
        "24hrPercentChange": json["24hrPercentChange"],
        exchangeAddress: json.exchangeAddress,
        exchangeName: json.exchangeName,
        tokenAddress: json.tokenAddress,
        toBlock: json.toBlock,
        possibleSpam: json.possibleSpam,
        verifiedContract: json.verifiedContract,
        pairAddress: json.pairAddress,
        pairTotalLiquidityUsd: json.pairTotalLiquidityUsd
      };
      return EvmErc20Price2.create(input);
    };
    EvmErc20Price2.prototype.toJSON = function() {
      return {
        tokenName: this.tokenName,
        tokenSymbol: this.tokenSymbol,
        tokenLogo: this.tokenLogo,
        tokenDecimals: this.tokenDecimals,
        nativePrice: this.nativePrice ? this.nativePrice.toJSON() : void 0,
        usdPrice: this.usdPrice,
        usdPriceFormatted: this.usdPriceFormatted,
        "24hrPercentChange": this["24hrPercentChange"],
        exchangeAddress: this.exchangeAddress,
        exchangeName: this.exchangeName,
        tokenAddress: this.tokenAddress,
        toBlock: this.toBlock,
        possibleSpam: this.possibleSpam,
        verifiedContract: this.verifiedContract,
        pairAddress: this.pairAddress,
        pairTotalLiquidityUsd: this.pairTotalLiquidityUsd
      };
    };
    return EvmErc20Price2;
  }()
);
var EvmTokenPriceItem = (
  /** @class */
  function() {
    function EvmTokenPriceItem2(input) {
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.exchange = input.exchange;
      this.toBlock = input.toBlock;
    }
    EvmTokenPriceItem2.create = function(input) {
      if (input instanceof EvmTokenPriceItem2) {
        return input;
      }
      return new EvmTokenPriceItem2(input);
    };
    EvmTokenPriceItem2.fromJSON = function(json) {
      var input = {
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        exchange: json.exchange,
        toBlock: json.to_block
      };
      return EvmTokenPriceItem2.create(input);
    };
    EvmTokenPriceItem2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress.toJSON(),
        exchange: this.exchange,
        to_block: this.toBlock
      };
    };
    return EvmTokenPriceItem2;
  }()
);
var EvmGetMultipleTokenPricesDto = (
  /** @class */
  function() {
    function EvmGetMultipleTokenPricesDto2(input) {
      this.tokens = input.tokens.map(function(item) {
        return EvmTokenPriceItem.create(item);
      });
    }
    EvmGetMultipleTokenPricesDto2.create = function(input) {
      if (input instanceof EvmGetMultipleTokenPricesDto2) {
        return input;
      }
      return new EvmGetMultipleTokenPricesDto2(input);
    };
    EvmGetMultipleTokenPricesDto2.fromJSON = function(json) {
      var input = {
        tokens: json.tokens.map(function(item) {
          return EvmTokenPriceItem.fromJSON(item);
        })
      };
      return EvmGetMultipleTokenPricesDto2.create(input);
    };
    EvmGetMultipleTokenPricesDto2.prototype.toJSON = function() {
      return {
        tokens: this.tokens.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmGetMultipleTokenPricesDto2;
  }()
);
var EvmErc20TokenOwner = (
  /** @class */
  function() {
    function EvmErc20TokenOwner2(input) {
      this.ownerAddress = input.ownerAddress;
      this.ownerAddressLabel = input.ownerAddressLabel;
      this.balance = input.balance;
      this.balanceFormatted = input.balanceFormatted;
      this.usdValue = input.usdValue;
      this.isContract = input.isContract;
      this.percentageRelativeToTotalSupply = input.percentageRelativeToTotalSupply;
    }
    EvmErc20TokenOwner2.create = function(input) {
      if (input instanceof EvmErc20TokenOwner2) {
        return input;
      }
      return new EvmErc20TokenOwner2(input);
    };
    EvmErc20TokenOwner2.fromJSON = function(json) {
      var input = {
        ownerAddress: json.owner_address,
        ownerAddressLabel: json.owner_address_label,
        balance: json.balance,
        balanceFormatted: json.balance_formatted,
        usdValue: json.usd_value,
        isContract: json.is_contract,
        percentageRelativeToTotalSupply: json.percentage_relative_to_total_supply
      };
      return EvmErc20TokenOwner2.create(input);
    };
    EvmErc20TokenOwner2.prototype.toJSON = function() {
      return {
        owner_address: this.ownerAddress,
        owner_address_label: this.ownerAddressLabel,
        balance: this.balance,
        balance_formatted: this.balanceFormatted,
        usd_value: this.usdValue,
        is_contract: this.isContract,
        percentage_relative_to_total_supply: this.percentageRelativeToTotalSupply
      };
    };
    return EvmErc20TokenOwner2;
  }()
);
var EvmErc20TokenOwnerCollection = (
  /** @class */
  function() {
    function EvmErc20TokenOwnerCollection2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmErc20TokenOwner.create(item);
      });
    }
    EvmErc20TokenOwnerCollection2.create = function(input) {
      if (input instanceof EvmErc20TokenOwnerCollection2) {
        return input;
      }
      return new EvmErc20TokenOwnerCollection2(input);
    };
    EvmErc20TokenOwnerCollection2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmErc20TokenOwner.fromJSON(item);
        })
      };
      return EvmErc20TokenOwnerCollection2.create(input);
    };
    EvmErc20TokenOwnerCollection2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmErc20TokenOwnerCollection2;
  }()
);
var EvmContractTokenDetails = (
  /** @class */
  function() {
    function EvmContractTokenDetails2(input) {
      this.address = EvmAddress.create(input.address);
      this.addressLabel = input.addressLabel;
      this.tokenName = input.tokenName;
      this.tokenLogo = input.tokenLogo;
      this.tokenSymbol = input.tokenSymbol;
    }
    EvmContractTokenDetails2.create = function(input) {
      if (input instanceof EvmContractTokenDetails2) {
        return input;
      }
      return new EvmContractTokenDetails2(input);
    };
    EvmContractTokenDetails2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        addressLabel: json.address_label,
        tokenName: json.token_name,
        tokenLogo: json.token_logo,
        tokenSymbol: json.token_symbol
      };
      return EvmContractTokenDetails2.create(input);
    };
    EvmContractTokenDetails2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        address_label: this.addressLabel,
        token_name: this.tokenName,
        token_logo: this.tokenLogo,
        token_symbol: this.tokenSymbol
      };
    };
    return EvmContractTokenDetails2;
  }()
);
var EvmContractSpenderDetails = (
  /** @class */
  function() {
    function EvmContractSpenderDetails2(input) {
      this.address = EvmAddress.create(input.address);
      this.addressLabel = input.addressLabel;
      this.name = input.name;
      this.symbol = input.symbol;
      this.logo = input.logo;
    }
    EvmContractSpenderDetails2.create = function(input) {
      if (input instanceof EvmContractSpenderDetails2) {
        return input;
      }
      return new EvmContractSpenderDetails2(input);
    };
    EvmContractSpenderDetails2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        addressLabel: json.address_label,
        name: json.name,
        symbol: json.symbol,
        logo: json.logo
      };
      return EvmContractSpenderDetails2.create(input);
    };
    EvmContractSpenderDetails2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        address_label: this.addressLabel,
        name: this.name,
        symbol: this.symbol,
        logo: this.logo
      };
    };
    return EvmContractSpenderDetails2;
  }()
);
var EvmCommonContractData = (
  /** @class */
  function() {
    function EvmCommonContractData2(input) {
      this.value = input.value;
      this.valueFormatted = input.valueFormatted;
      this.token = EvmContractTokenDetails.create(input.token);
      this.spender = EvmContractSpenderDetails.create(input.spender);
    }
    EvmCommonContractData2.create = function(input) {
      if (input instanceof EvmCommonContractData2) {
        return input;
      }
      return new EvmCommonContractData2(input);
    };
    EvmCommonContractData2.fromJSON = function(json) {
      var input = {
        value: json.value,
        valueFormatted: json.value_formatted,
        token: EvmContractTokenDetails.fromJSON(json.token),
        spender: EvmContractSpenderDetails.fromJSON(json.spender)
      };
      return EvmCommonContractData2.create(input);
    };
    EvmCommonContractData2.prototype.toJSON = function() {
      return {
        value: this.value,
        value_formatted: this.valueFormatted,
        token: this.token.toJSON(),
        spender: this.spender.toJSON()
      };
    };
    return EvmCommonContractData2;
  }()
);
var EvmResolveContractInteractionResponse = (
  /** @class */
  function() {
    function EvmResolveContractInteractionResponse2(input) {
      this.approvals = input.approvals ? input.approvals.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
      this.revokes = input.revokes ? input.revokes.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
      this.approvalsAll = input.approvalsAll ? input.approvalsAll.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
      this.revokesAll = input.revokesAll ? input.revokesAll.map(function(item) {
        return EvmCommonContractData.create(item);
      }) : void 0;
    }
    EvmResolveContractInteractionResponse2.create = function(input) {
      if (input instanceof EvmResolveContractInteractionResponse2) {
        return input;
      }
      return new EvmResolveContractInteractionResponse2(input);
    };
    EvmResolveContractInteractionResponse2.fromJSON = function(json) {
      var input = {
        approvals: json.approvals ? json.approvals.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0,
        revokes: json.revokes ? json.revokes.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0,
        approvalsAll: json.approvalsAll ? json.approvalsAll.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0,
        revokesAll: json.revokesAll ? json.revokesAll.map(function(item) {
          return EvmCommonContractData.fromJSON(item);
        }) : void 0
      };
      return EvmResolveContractInteractionResponse2.create(input);
    };
    EvmResolveContractInteractionResponse2.prototype.toJSON = function() {
      return {
        approvals: this.approvals ? this.approvals.map(function(item) {
          return item.toJSON();
        }) : void 0,
        revokes: this.revokes ? this.revokes.map(function(item) {
          return item.toJSON();
        }) : void 0,
        approvalsAll: this.approvalsAll ? this.approvalsAll.map(function(item) {
          return item.toJSON();
        }) : void 0,
        revokesAll: this.revokesAll ? this.revokesAll.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmResolveContractInteractionResponse2;
  }()
);
var EvmNormalizedMetadataAttribute = (
  /** @class */
  function() {
    function EvmNormalizedMetadataAttribute2(input) {
      this.traitType = input.traitType;
      this.value = input.value ? EvmNormalizedMetadataAttributeValue.create(input.value) : void 0;
      this.displayType = input.displayType;
      this.maxValue = input.maxValue;
      this.traitCount = input.traitCount;
      this.order = input.order;
    }
    EvmNormalizedMetadataAttribute2.create = function(input) {
      if (input instanceof EvmNormalizedMetadataAttribute2) {
        return input;
      }
      return new EvmNormalizedMetadataAttribute2(input);
    };
    EvmNormalizedMetadataAttribute2.fromJSON = function(json) {
      var input = {
        traitType: json.trait_type,
        value: json.value ? EvmNormalizedMetadataAttributeValue.fromJSON(json.value) : void 0,
        displayType: json.display_type,
        maxValue: json.max_value,
        traitCount: json.trait_count,
        order: json.order
      };
      return EvmNormalizedMetadataAttribute2.create(input);
    };
    EvmNormalizedMetadataAttribute2.prototype.toJSON = function() {
      return {
        trait_type: this.traitType,
        value: this.value ? this.value : void 0,
        display_type: this.displayType,
        max_value: this.maxValue,
        trait_count: this.traitCount,
        order: this.order
      };
    };
    return EvmNormalizedMetadataAttribute2;
  }()
);
var EvmNormalizedMetadata = (
  /** @class */
  function() {
    function EvmNormalizedMetadata2(input) {
      this.name = input.name;
      this.description = input.description;
      this.image = input.image;
      this.externalLink = input.externalLink;
      this.animationUrl = input.animationUrl;
      this.attributes = input.attributes ? input.attributes.map(function(item) {
        return EvmNormalizedMetadataAttribute.create(item);
      }) : void 0;
    }
    EvmNormalizedMetadata2.create = function(input) {
      if (input instanceof EvmNormalizedMetadata2) {
        return input;
      }
      return new EvmNormalizedMetadata2(input);
    };
    EvmNormalizedMetadata2.fromJSON = function(json) {
      var input = {
        name: json.name,
        description: json.description,
        image: json.image,
        externalLink: json.external_link,
        animationUrl: json.animation_url,
        attributes: json.attributes ? json.attributes.map(function(item) {
          return EvmNormalizedMetadataAttribute.fromJSON(item);
        }) : void 0
      };
      return EvmNormalizedMetadata2.create(input);
    };
    EvmNormalizedMetadata2.prototype.toJSON = function() {
      return {
        name: this.name,
        description: this.description,
        image: this.image,
        external_link: this.externalLink,
        animation_url: this.animationUrl,
        attributes: this.attributes ? this.attributes.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmNormalizedMetadata2;
  }()
);
var EvmWalletHistoryNftTransfer = (
  /** @class */
  function() {
    function EvmWalletHistoryNftTransfer2(input) {
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.tokenId = input.tokenId;
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.value = input.value;
      this.amount = input.amount;
      this.contractType = input.contractType;
      this.transactionType = input.transactionType;
      this.logIndex = input.logIndex;
      this.operator = input.operator;
      this.possibleSpam = input.possibleSpam;
      this.verifiedCollection = input.verifiedCollection;
      this.direction = input.direction;
      this.collectionLogo = input.collectionLogo;
      this.collectionBannerImage = input.collectionBannerImage;
      this.normalizedMetadata = input.normalizedMetadata ? EvmNormalizedMetadata.create(input.normalizedMetadata) : void 0;
    }
    EvmWalletHistoryNftTransfer2.create = function(input) {
      if (input instanceof EvmWalletHistoryNftTransfer2) {
        return input;
      }
      return new EvmWalletHistoryNftTransfer2(input);
    };
    EvmWalletHistoryNftTransfer2.fromJSON = function(json) {
      var input = {
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        tokenId: json.token_id,
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        value: json.value,
        amount: json.amount,
        contractType: json.contract_type,
        transactionType: json.transaction_type,
        logIndex: json.log_index,
        operator: json.operator,
        possibleSpam: json.possible_spam,
        verifiedCollection: json.verified_collection,
        direction: json.direction,
        collectionLogo: json.collection_logo,
        collectionBannerImage: json.collection_banner_image,
        normalizedMetadata: json.normalized_metadata ? EvmNormalizedMetadata.fromJSON(json.normalized_metadata) : void 0
      };
      return EvmWalletHistoryNftTransfer2.create(input);
    };
    EvmWalletHistoryNftTransfer2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress.toJSON(),
        token_id: this.tokenId,
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        value: this.value,
        amount: this.amount,
        contract_type: this.contractType,
        transaction_type: this.transactionType,
        log_index: this.logIndex,
        operator: this.operator,
        possible_spam: this.possibleSpam,
        verified_collection: this.verifiedCollection,
        direction: this.direction,
        collection_logo: this.collectionLogo,
        collection_banner_image: this.collectionBannerImage,
        normalized_metadata: this.normalizedMetadata ? this.normalizedMetadata.toJSON() : void 0
      };
    };
    return EvmWalletHistoryNftTransfer2;
  }()
);
var EvmWalletHistoryErc20Transfer = (
  /** @class */
  function() {
    function EvmWalletHistoryErc20Transfer2(input) {
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.address = EvmAddress.create(input.address);
      this.blockTimestamp = input.blockTimestamp;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.value = input.value;
      this.valueFormatted = input.valueFormatted;
      this.logIndex = input.logIndex;
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
    }
    EvmWalletHistoryErc20Transfer2.create = function(input) {
      if (input instanceof EvmWalletHistoryErc20Transfer2) {
        return input;
      }
      return new EvmWalletHistoryErc20Transfer2(input);
    };
    EvmWalletHistoryErc20Transfer2.fromJSON = function(json) {
      var input = {
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        address: EvmAddress.fromJSON(json.address),
        blockTimestamp: json.block_timestamp,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        value: json.value,
        valueFormatted: json.value_formatted,
        logIndex: json.log_index,
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract
      };
      return EvmWalletHistoryErc20Transfer2.create(input);
    };
    EvmWalletHistoryErc20Transfer2.prototype.toJSON = function() {
      return {
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        address: this.address.toJSON(),
        block_timestamp: this.blockTimestamp,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        value: this.value,
        value_formatted: this.valueFormatted,
        log_index: this.logIndex,
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract
      };
    };
    return EvmWalletHistoryErc20Transfer2;
  }()
);
var EvmNativeTransfer = (
  /** @class */
  function() {
    function EvmNativeTransfer2(input) {
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.value = input.value;
      this.valueFormatted = input.valueFormatted;
      this.direction = input.direction;
      this.internalTransaction = input.internalTransaction;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
    }
    EvmNativeTransfer2.create = function(input) {
      if (input instanceof EvmNativeTransfer2) {
        return input;
      }
      return new EvmNativeTransfer2(input);
    };
    EvmNativeTransfer2.fromJSON = function(json) {
      var input = {
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        value: json.value,
        valueFormatted: json.value_formatted,
        direction: json.direction,
        internalTransaction: json.internal_transaction,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo
      };
      return EvmNativeTransfer2.create(input);
    };
    EvmNativeTransfer2.prototype.toJSON = function() {
      return {
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        value: this.value,
        value_formatted: this.valueFormatted,
        direction: this.direction,
        internal_transaction: this.internalTransaction,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo
      };
    };
    return EvmNativeTransfer2;
  }()
);
var EvmDecodedEventParamsItem = (
  /** @class */
  function() {
    function EvmDecodedEventParamsItem2(input) {
      this.name = input.name;
      this.value = input.value;
      this.type = input.type;
    }
    EvmDecodedEventParamsItem2.create = function(input) {
      if (input instanceof EvmDecodedEventParamsItem2) {
        return input;
      }
      return new EvmDecodedEventParamsItem2(input);
    };
    EvmDecodedEventParamsItem2.fromJSON = function(json) {
      var input = {
        name: json.name,
        value: json.value,
        type: json.type
      };
      return EvmDecodedEventParamsItem2.create(input);
    };
    EvmDecodedEventParamsItem2.prototype.toJSON = function() {
      return {
        name: this.name,
        value: this.value,
        type: this.type
      };
    };
    return EvmDecodedEventParamsItem2;
  }()
);
var EvmDecodedEvent = (
  /** @class */
  function() {
    function EvmDecodedEvent2(input) {
      this.signature = input.signature;
      this.label = input.label;
      this.type = input.type;
      this.params = input.params ? input.params.map(function(item) {
        return EvmDecodedEventParamsItem.create(item);
      }) : void 0;
    }
    EvmDecodedEvent2.create = function(input) {
      if (input instanceof EvmDecodedEvent2) {
        return input;
      }
      return new EvmDecodedEvent2(input);
    };
    EvmDecodedEvent2.fromJSON = function(json) {
      var input = {
        signature: json.signature,
        label: json.label,
        type: json.type,
        params: json.params ? json.params.map(function(item) {
          return EvmDecodedEventParamsItem.fromJSON(item);
        }) : void 0
      };
      return EvmDecodedEvent2.create(input);
    };
    EvmDecodedEvent2.prototype.toJSON = function() {
      return {
        signature: this.signature,
        label: this.label,
        type: this.type,
        params: this.params ? this.params.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmDecodedEvent2;
  }()
);
var EvmLogVerbose = (
  /** @class */
  function() {
    function EvmLogVerbose2(input) {
      this.logIndex = input.logIndex;
      this.transactionHash = input.transactionHash;
      this.transactionIndex = input.transactionIndex;
      this.address = EvmAddress.create(input.address);
      this.data = input.data;
      this.topic0 = input.topic0;
      this.topic1 = input.topic1;
      this.topic2 = input.topic2;
      this.topic3 = input.topic3;
      this.blockTimestamp = input.blockTimestamp;
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockHash = input.blockHash;
      this.decodedEvent = EvmDecodedEvent.create(input.decodedEvent);
    }
    EvmLogVerbose2.create = function(input) {
      if (input instanceof EvmLogVerbose2) {
        return input;
      }
      return new EvmLogVerbose2(input);
    };
    EvmLogVerbose2.fromJSON = function(json) {
      var input = {
        logIndex: Number(json.log_index),
        transactionHash: json.transaction_hash,
        transactionIndex: Number(json.transaction_index),
        address: EvmAddress.fromJSON(json.address),
        data: json.data,
        topic0: json.topic0,
        topic1: json.topic1,
        topic2: json.topic2,
        topic3: json.topic3,
        blockTimestamp: json.block_timestamp,
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockHash: json.block_hash,
        decodedEvent: EvmDecodedEvent.fromJSON(json.decoded_event)
      };
      return EvmLogVerbose2.create(input);
    };
    EvmLogVerbose2.prototype.toJSON = function() {
      return {
        log_index: String(this.logIndex),
        transaction_hash: this.transactionHash,
        transaction_index: String(this.transactionIndex),
        address: this.address.toJSON(),
        data: this.data,
        topic0: this.topic0,
        topic1: this.topic1,
        topic2: this.topic2,
        topic3: this.topic3,
        block_timestamp: this.blockTimestamp,
        block_number: this.blockNumber.toJSON(),
        block_hash: this.blockHash,
        decoded_event: this.decodedEvent.toJSON()
      };
    };
    return EvmLogVerbose2;
  }()
);
var EvmWalletHistoryTransaction = (
  /** @class */
  function() {
    function EvmWalletHistoryTransaction2(input) {
      this.hash = input.hash;
      this.nonce = input.nonce;
      this.transactionIndex = input.transactionIndex;
      this.fromAddressEntity = input.fromAddressEntity;
      this.fromAddressEntityLogo = input.fromAddressEntityLogo;
      this.fromAddress = EvmAddress.create(input.fromAddress);
      this.fromAddressLabel = input.fromAddressLabel;
      this.toAddressEntity = input.toAddressEntity;
      this.toAddressEntityLogo = input.toAddressEntityLogo;
      this.toAddress = input.toAddress ? EvmAddress.create(input.toAddress) : void 0;
      this.toAddressLabel = input.toAddressLabel;
      this.value = input.value;
      this.gas = input.gas;
      this.gasPrice = input.gasPrice;
      this.input = input.input;
      this.receiptCumulativeGasUsed = input.receiptCumulativeGasUsed;
      this.receiptGasUsed = input.receiptGasUsed;
      this.receiptContractAddress = input.receiptContractAddress;
      this.receiptStatus = input.receiptStatus;
      this.transactionFee = input.transactionFee;
      this.blockTimestamp = input.blockTimestamp;
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockHash = input.blockHash;
      this.internalTransactions = input.internalTransactions ? input.internalTransactions.map(function(item) {
        return EvmInternalTransaction.create(item);
      }) : void 0;
      this.category = EvmETransactionCategory.create(input.category);
      this.contractInteractions = input.contractInteractions ? EvmResolveContractInteractionResponse.create(input.contractInteractions) : void 0;
      this.possibleSpam = input.possibleSpam;
      this.methodLabel = input.methodLabel;
      this.summary = input.summary;
      this.nftTransfers = input.nftTransfers.map(function(item) {
        return EvmWalletHistoryNftTransfer.create(item);
      });
      this.erc20Transfers = input.erc20Transfers.map(function(item) {
        return EvmWalletHistoryErc20Transfer.create(item);
      });
      this.nativeTransfers = input.nativeTransfers.map(function(item) {
        return EvmNativeTransfer.create(item);
      });
      this.logs = input.logs ? input.logs.map(function(item) {
        return EvmLogVerbose.create(item);
      }) : void 0;
    }
    EvmWalletHistoryTransaction2.create = function(input) {
      if (input instanceof EvmWalletHistoryTransaction2) {
        return input;
      }
      return new EvmWalletHistoryTransaction2(input);
    };
    EvmWalletHistoryTransaction2.fromJSON = function(json) {
      var input = {
        hash: json.hash,
        nonce: json.nonce,
        transactionIndex: Number(json.transaction_index),
        fromAddressEntity: json.from_address_entity,
        fromAddressEntityLogo: json.from_address_entity_logo,
        fromAddress: EvmAddress.fromJSON(json.from_address),
        fromAddressLabel: json.from_address_label,
        toAddressEntity: json.to_address_entity,
        toAddressEntityLogo: json.to_address_entity_logo,
        toAddress: json.to_address ? EvmAddress.fromJSON(json.to_address) : void 0,
        toAddressLabel: json.to_address_label,
        value: json.value,
        gas: json.gas,
        gasPrice: json.gas_price,
        input: json.input,
        receiptCumulativeGasUsed: json.receipt_cumulative_gas_used,
        receiptGasUsed: json.receipt_gas_used,
        receiptContractAddress: json.receipt_contract_address,
        receiptStatus: json.receipt_status,
        transactionFee: json.transaction_fee,
        blockTimestamp: json.block_timestamp,
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockHash: json.block_hash,
        internalTransactions: json.internal_transactions ? json.internal_transactions.map(function(item) {
          return EvmInternalTransaction.fromJSON(item);
        }) : void 0,
        category: EvmETransactionCategory.fromJSON(json.category),
        contractInteractions: json.contract_interactions ? EvmResolveContractInteractionResponse.fromJSON(json.contract_interactions) : void 0,
        possibleSpam: json.possible_spam,
        methodLabel: json.method_label,
        summary: json.summary,
        nftTransfers: json.nft_transfers.map(function(item) {
          return EvmWalletHistoryNftTransfer.fromJSON(item);
        }),
        erc20Transfers: json.erc20_transfers.map(function(item) {
          return EvmWalletHistoryErc20Transfer.fromJSON(item);
        }),
        nativeTransfers: json.native_transfers.map(function(item) {
          return EvmNativeTransfer.fromJSON(item);
        }),
        logs: json.logs ? json.logs.map(function(item) {
          return EvmLogVerbose.fromJSON(item);
        }) : void 0
      };
      return EvmWalletHistoryTransaction2.create(input);
    };
    EvmWalletHistoryTransaction2.prototype.toJSON = function() {
      return {
        hash: this.hash,
        nonce: this.nonce,
        transaction_index: String(this.transactionIndex),
        from_address_entity: this.fromAddressEntity,
        from_address_entity_logo: this.fromAddressEntityLogo,
        from_address: this.fromAddress.toJSON(),
        from_address_label: this.fromAddressLabel,
        to_address_entity: this.toAddressEntity,
        to_address_entity_logo: this.toAddressEntityLogo,
        to_address: this.toAddress ? this.toAddress.toJSON() : void 0,
        to_address_label: this.toAddressLabel,
        value: this.value,
        gas: this.gas,
        gas_price: this.gasPrice,
        input: this.input,
        receipt_cumulative_gas_used: this.receiptCumulativeGasUsed,
        receipt_gas_used: this.receiptGasUsed,
        receipt_contract_address: this.receiptContractAddress,
        receipt_status: this.receiptStatus,
        transaction_fee: this.transactionFee,
        block_timestamp: this.blockTimestamp,
        block_number: this.blockNumber.toJSON(),
        block_hash: this.blockHash,
        internal_transactions: this.internalTransactions ? this.internalTransactions.map(function(item) {
          return item.toJSON();
        }) : void 0,
        category: this.category,
        contract_interactions: this.contractInteractions ? this.contractInteractions.toJSON() : void 0,
        possible_spam: this.possibleSpam,
        method_label: this.methodLabel,
        summary: this.summary,
        nft_transfers: this.nftTransfers.map(function(item) {
          return item.toJSON();
        }),
        erc20_transfers: this.erc20Transfers.map(function(item) {
          return item.toJSON();
        }),
        native_transfers: this.nativeTransfers.map(function(item) {
          return item.toJSON();
        }),
        logs: this.logs ? this.logs.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmWalletHistoryTransaction2;
  }()
);
var EvmWalletHistory = (
  /** @class */
  function() {
    function EvmWalletHistory2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmWalletHistoryTransaction.create(item);
      });
    }
    EvmWalletHistory2.create = function(input) {
      if (input instanceof EvmWalletHistory2) {
        return input;
      }
      return new EvmWalletHistory2(input);
    };
    EvmWalletHistory2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmWalletHistoryTransaction.fromJSON(item);
        })
      };
      return EvmWalletHistory2.create(input);
    };
    EvmWalletHistory2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletHistory2;
  }()
);
var EvmErc20TokenBalanceWithPrice = (
  /** @class */
  function() {
    function EvmErc20TokenBalanceWithPrice2(input) {
      this.tokenAddress = input.tokenAddress ? EvmAddress.create(input.tokenAddress) : void 0;
      this.name = input.name;
      this.symbol = input.symbol;
      this.logo = input.logo;
      this.thumbnail = input.thumbnail;
      this.decimals = input.decimals;
      this.balance = EvmNative.create(input.balance);
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
      this.usdPrice = input.usdPrice;
      this.usdPrice24hrPercentChange = input.usdPrice24hrPercentChange;
      this.usdPrice24hrUsdChange = input.usdPrice24hrUsdChange;
      this.usdValue24hrUsdChange = input.usdValue24hrUsdChange;
      this.usdValue = input.usdValue;
      this.portfolioPercentage = input.portfolioPercentage;
      this.balanceFormatted = input.balanceFormatted;
      this.nativeToken = input.nativeToken;
      this.totalSupply = input.totalSupply;
      this.totalSupplyFormatted = input.totalSupplyFormatted;
      this.percentageRelativeToTotalSupply = input.percentageRelativeToTotalSupply;
    }
    EvmErc20TokenBalanceWithPrice2.create = function(input) {
      if (input instanceof EvmErc20TokenBalanceWithPrice2) {
        return input;
      }
      return new EvmErc20TokenBalanceWithPrice2(input);
    };
    EvmErc20TokenBalanceWithPrice2.fromJSON = function(json) {
      var input = {
        tokenAddress: json.token_address ? EvmAddress.fromJSON(json.token_address) : void 0,
        name: json.name,
        symbol: json.symbol,
        logo: json.logo,
        thumbnail: json.thumbnail,
        decimals: json.decimals,
        balance: EvmNative.fromJSON(json.balance),
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract,
        usdPrice: json.usd_price,
        usdPrice24hrPercentChange: json.usd_price_24hr_percent_change,
        usdPrice24hrUsdChange: json.usd_price_24hr_usd_change,
        usdValue24hrUsdChange: json.usd_value_24hr_usd_change,
        usdValue: json.usd_value,
        portfolioPercentage: json.portfolio_percentage,
        balanceFormatted: json.balance_formatted,
        nativeToken: json.native_token,
        totalSupply: json.total_supply,
        totalSupplyFormatted: json.total_supply_formatted,
        percentageRelativeToTotalSupply: json.percentage_relative_to_total_supply
      };
      return EvmErc20TokenBalanceWithPrice2.create(input);
    };
    EvmErc20TokenBalanceWithPrice2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress ? this.tokenAddress.toJSON() : void 0,
        name: this.name,
        symbol: this.symbol,
        logo: this.logo,
        thumbnail: this.thumbnail,
        decimals: this.decimals,
        balance: this.balance.toJSON(),
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract,
        usd_price: this.usdPrice,
        usd_price_24hr_percent_change: this.usdPrice24hrPercentChange,
        usd_price_24hr_usd_change: this.usdPrice24hrUsdChange,
        usd_value_24hr_usd_change: this.usdValue24hrUsdChange,
        usd_value: this.usdValue,
        portfolio_percentage: this.portfolioPercentage,
        balance_formatted: this.balanceFormatted,
        native_token: this.nativeToken,
        total_supply: this.totalSupply,
        total_supply_formatted: this.totalSupplyFormatted,
        percentage_relative_to_total_supply: this.percentageRelativeToTotalSupply
      };
    };
    return EvmErc20TokenBalanceWithPrice2;
  }()
);
var EvmErc20TokenBalanceWithPriceResult = (
  /** @class */
  function() {
    function EvmErc20TokenBalanceWithPriceResult2(input) {
      this.page = input.page;
      this.pageSize = input.pageSize;
      this.cursor = input.cursor;
      this.result = input.result.map(function(item) {
        return EvmErc20TokenBalanceWithPrice.create(item);
      });
    }
    EvmErc20TokenBalanceWithPriceResult2.create = function(input) {
      if (input instanceof EvmErc20TokenBalanceWithPriceResult2) {
        return input;
      }
      return new EvmErc20TokenBalanceWithPriceResult2(input);
    };
    EvmErc20TokenBalanceWithPriceResult2.fromJSON = function(json) {
      var input = {
        page: json.page,
        pageSize: json.page_size,
        cursor: json.cursor,
        result: json.result.map(function(item) {
          return EvmErc20TokenBalanceWithPrice.fromJSON(item);
        })
      };
      return EvmErc20TokenBalanceWithPriceResult2.create(input);
    };
    EvmErc20TokenBalanceWithPriceResult2.prototype.toJSON = function() {
      return {
        page: this.page,
        page_size: this.pageSize,
        cursor: this.cursor,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmErc20TokenBalanceWithPriceResult2;
  }()
);
var EvmChainNetWorth = (
  /** @class */
  function() {
    function EvmChainNetWorth2(input) {
      this.chain = input.chain;
      this.nativeBalance = EvmNative.create(input.nativeBalance);
      this.nativeBalanceFormatted = input.nativeBalanceFormatted;
      this.nativeBalanceUsd = input.nativeBalanceUsd;
      this.tokenBalanceUsd = input.tokenBalanceUsd;
      this.networthUsd = input.networthUsd;
    }
    EvmChainNetWorth2.create = function(input) {
      if (input instanceof EvmChainNetWorth2) {
        return input;
      }
      return new EvmChainNetWorth2(input);
    };
    EvmChainNetWorth2.fromJSON = function(json) {
      var input = {
        chain: json.chain,
        nativeBalance: EvmNative.fromJSON(json.native_balance),
        nativeBalanceFormatted: json.native_balance_formatted,
        nativeBalanceUsd: json.native_balance_usd,
        tokenBalanceUsd: json.token_balance_usd,
        networthUsd: json.networth_usd
      };
      return EvmChainNetWorth2.create(input);
    };
    EvmChainNetWorth2.prototype.toJSON = function() {
      return {
        chain: this.chain,
        native_balance: this.nativeBalance.toJSON(),
        native_balance_formatted: this.nativeBalanceFormatted,
        native_balance_usd: this.nativeBalanceUsd,
        token_balance_usd: this.tokenBalanceUsd,
        networth_usd: this.networthUsd
      };
    };
    return EvmChainNetWorth2;
  }()
);
var EvmUnavailableChainNetWorth = (
  /** @class */
  function() {
    function EvmUnavailableChainNetWorth2(input) {
      this.chainId = input.chainId;
    }
    EvmUnavailableChainNetWorth2.create = function(input) {
      if (input instanceof EvmUnavailableChainNetWorth2) {
        return input;
      }
      return new EvmUnavailableChainNetWorth2(input);
    };
    EvmUnavailableChainNetWorth2.fromJSON = function(json) {
      var input = {
        chainId: json.chain_id
      };
      return EvmUnavailableChainNetWorth2.create(input);
    };
    EvmUnavailableChainNetWorth2.prototype.toJSON = function() {
      return {
        chain_id: this.chainId
      };
    };
    return EvmUnavailableChainNetWorth2;
  }()
);
var EvmNetWorthResult = (
  /** @class */
  function() {
    function EvmNetWorthResult2(input) {
      this.totalNetworthUsd = input.totalNetworthUsd;
      this.chains = input.chains.map(function(item) {
        return EvmChainNetWorth.create(item);
      });
      this.unsupportedChainIds = input.unsupportedChainIds;
      this.unavailableChains = input.unavailableChains ? input.unavailableChains.map(function(item) {
        return EvmUnavailableChainNetWorth.create(item);
      }) : void 0;
    }
    EvmNetWorthResult2.create = function(input) {
      if (input instanceof EvmNetWorthResult2) {
        return input;
      }
      return new EvmNetWorthResult2(input);
    };
    EvmNetWorthResult2.fromJSON = function(json) {
      var input = {
        totalNetworthUsd: json.total_networth_usd,
        chains: json.chains.map(function(item) {
          return EvmChainNetWorth.fromJSON(item);
        }),
        unsupportedChainIds: json.unsupported_chain_ids,
        unavailableChains: json.unavailable_chains ? json.unavailable_chains.map(function(item) {
          return EvmUnavailableChainNetWorth.fromJSON(item);
        }) : void 0
      };
      return EvmNetWorthResult2.create(input);
    };
    EvmNetWorthResult2.prototype.toJSON = function() {
      return {
        total_networth_usd: this.totalNetworthUsd,
        chains: this.chains.map(function(item) {
          return item.toJSON();
        }),
        unsupported_chain_ids: this.unsupportedChainIds,
        unavailable_chains: this.unavailableChains ? this.unavailableChains.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmNetWorthResult2;
  }()
);
var EvmWeb3version = (
  /** @class */
  function() {
    function EvmWeb3version2(input) {
      this.version = input.version;
    }
    EvmWeb3version2.create = function(input) {
      if (input instanceof EvmWeb3version2) {
        return input;
      }
      return new EvmWeb3version2(input);
    };
    EvmWeb3version2.fromJSON = function(json) {
      var input = {
        version: json.version
      };
      return EvmWeb3version2.create(input);
    };
    EvmWeb3version2.prototype.toJSON = function() {
      return {
        version: this.version
      };
    };
    return EvmWeb3version2;
  }()
);
var EvmEndpointWeights = (
  /** @class */
  function() {
    function EvmEndpointWeights2(input) {
      this.endpoint = input.endpoint;
      this.path = input.path;
      this.rateLimitCost = input.rateLimitCost;
      this.price = input.price;
    }
    EvmEndpointWeights2.create = function(input) {
      if (input instanceof EvmEndpointWeights2) {
        return input;
      }
      return new EvmEndpointWeights2(input);
    };
    EvmEndpointWeights2.fromJSON = function(json) {
      var input = {
        endpoint: json.endpoint,
        path: json.path,
        rateLimitCost: json.rateLimitCost,
        price: json.price
      };
      return EvmEndpointWeights2.create(input);
    };
    EvmEndpointWeights2.prototype.toJSON = function() {
      return {
        endpoint: this.endpoint,
        path: this.path,
        rateLimitCost: this.rateLimitCost,
        price: this.price
      };
    };
    return EvmEndpointWeights2;
  }()
);
var EvmUnstoppableDomain = (
  /** @class */
  function() {
    function EvmUnstoppableDomain2(input) {
      this.name = input.name;
    }
    EvmUnstoppableDomain2.create = function(input) {
      if (input instanceof EvmUnstoppableDomain2) {
        return input;
      }
      return new EvmUnstoppableDomain2(input);
    };
    EvmUnstoppableDomain2.fromJSON = function(json) {
      var input = {
        name: json.name
      };
      return EvmUnstoppableDomain2.create(input);
    };
    EvmUnstoppableDomain2.prototype.toJSON = function() {
      return {
        name: this.name
      };
    };
    return EvmUnstoppableDomain2;
  }()
);
var EvmErc20Metadata = (
  /** @class */
  function() {
    function EvmErc20Metadata2(input) {
      this.address = EvmAddress.create(input.address);
      this.addressLabel = input.addressLabel;
      this.name = input.name;
      this.symbol = input.symbol;
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.logoHash = input.logoHash;
      this.thumbnail = input.thumbnail;
      this.totalSupply = input.totalSupply;
      this.totalSupplyFormatted = input.totalSupplyFormatted;
      this.fullyDilutedValuation = input.fullyDilutedValuation;
      this.blockNumber = input.blockNumber ? BigNumber.create(input.blockNumber) : void 0;
      this.validated = input.validated;
      this.createdAt = input.createdAt;
      this.possibleSpam = input.possibleSpam;
      this.verifiedContract = input.verifiedContract;
      this.categories = input.categories;
      this.links = input.links ? EvmErc20MetadataLinks.create(input.links) : void 0;
    }
    EvmErc20Metadata2.create = function(input) {
      if (input instanceof EvmErc20Metadata2) {
        return input;
      }
      return new EvmErc20Metadata2(input);
    };
    EvmErc20Metadata2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        addressLabel: json.address_label,
        name: json.name,
        symbol: json.symbol,
        decimals: Number(json.decimals),
        logo: json.logo,
        logoHash: json.logo_hash,
        thumbnail: json.thumbnail,
        totalSupply: json.total_supply,
        totalSupplyFormatted: json.total_supply_formatted,
        fullyDilutedValuation: json.fully_diluted_valuation,
        blockNumber: json.block_number ? BigNumber.fromJSON(json.block_number) : void 0,
        validated: json.validated,
        createdAt: json.created_at,
        possibleSpam: json.possible_spam,
        verifiedContract: json.verified_contract,
        categories: json.categories,
        links: json.links ? EvmErc20MetadataLinks.fromJSON(json.links) : void 0
      };
      return EvmErc20Metadata2.create(input);
    };
    EvmErc20Metadata2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        address_label: this.addressLabel,
        name: this.name,
        symbol: this.symbol,
        decimals: String(this.decimals),
        logo: this.logo,
        logo_hash: this.logoHash,
        thumbnail: this.thumbnail,
        total_supply: this.totalSupply,
        total_supply_formatted: this.totalSupplyFormatted,
        fully_diluted_valuation: this.fullyDilutedValuation,
        block_number: this.blockNumber ? this.blockNumber.toJSON() : void 0,
        validated: this.validated,
        created_at: this.createdAt,
        possible_spam: this.possibleSpam,
        verified_contract: this.verifiedContract,
        categories: this.categories,
        links: this.links ? this.links : void 0
      };
    };
    return EvmErc20Metadata2;
  }()
);
var EvmGetPairPrice = (
  /** @class */
  function() {
    function EvmGetPairPrice2(input) {
      this.pairAddress = input.pairAddress;
      this.pairLabel = input.pairLabel;
      this.exchange = input.exchange;
      this.quotePrice = input.quotePrice;
      this.priceUsd = input.priceUsd;
      this.baseToken = input.baseToken ? EvmErc20Metadata.create(input.baseToken) : void 0;
      this.quoteToken = input.quoteToken ? EvmErc20Metadata.create(input.quoteToken) : void 0;
    }
    EvmGetPairPrice2.create = function(input) {
      if (input instanceof EvmGetPairPrice2) {
        return input;
      }
      return new EvmGetPairPrice2(input);
    };
    EvmGetPairPrice2.fromJSON = function(json) {
      var input = {
        pairAddress: json.pair_address,
        pairLabel: json.pair_label,
        exchange: json.exchange,
        quotePrice: json.quote_price,
        priceUsd: json.price_usd,
        baseToken: json.base_token ? EvmErc20Metadata.fromJSON(json.base_token) : void 0,
        quoteToken: json.quote_token ? EvmErc20Metadata.fromJSON(json.quote_token) : void 0
      };
      return EvmGetPairPrice2.create(input);
    };
    EvmGetPairPrice2.prototype.toJSON = function() {
      return {
        pair_address: this.pairAddress,
        pair_label: this.pairLabel,
        exchange: this.exchange,
        quote_price: this.quotePrice,
        price_usd: this.priceUsd,
        base_token: this.baseToken ? this.baseToken.toJSON() : void 0,
        quote_token: this.quoteToken ? this.quoteToken.toJSON() : void 0
      };
    };
    return EvmGetPairPrice2;
  }()
);
var EvmMarketDataERC20TokenItem = (
  /** @class */
  function() {
    function EvmMarketDataERC20TokenItem2(input) {
      this.rank = input.rank;
      this.tokenName = input.tokenName;
      this.tokenSymbol = input.tokenSymbol;
      this.tokenLogo = input.tokenLogo;
      this.tokenDecimals = input.tokenDecimals;
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.priceUsd = input.priceUsd;
      this.price24hPercentChange = input.price24hPercentChange;
      this.price7dPercentChange = input.price7dPercentChange;
      this.marketCapUsd = input.marketCapUsd;
    }
    EvmMarketDataERC20TokenItem2.create = function(input) {
      if (input instanceof EvmMarketDataERC20TokenItem2) {
        return input;
      }
      return new EvmMarketDataERC20TokenItem2(input);
    };
    EvmMarketDataERC20TokenItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        tokenName: json.token_name,
        tokenSymbol: json.token_symbol,
        tokenLogo: json.token_logo,
        tokenDecimals: Number(json.token_decimals),
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        priceUsd: json.price_usd,
        price24hPercentChange: json.price_24h_percent_change,
        price7dPercentChange: json.price_7d_percent_change,
        marketCapUsd: json.market_cap_usd
      };
      return EvmMarketDataERC20TokenItem2.create(input);
    };
    EvmMarketDataERC20TokenItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        token_name: this.tokenName,
        token_symbol: this.tokenSymbol,
        token_logo: this.tokenLogo,
        token_decimals: String(this.tokenDecimals),
        contract_address: this.contractAddress.toJSON(),
        price_usd: this.priceUsd,
        price_24h_percent_change: this.price24hPercentChange,
        price_7d_percent_change: this.price7dPercentChange,
        market_cap_usd: this.marketCapUsd
      };
    };
    return EvmMarketDataERC20TokenItem2;
  }()
);
var EvmMarketDataERC20TokensByPriceMovers = (
  /** @class */
  function() {
    function EvmMarketDataERC20TokensByPriceMovers2(input) {
      this.gainers = input.gainers.map(function(item) {
        return EvmMarketDataERC20TokenItem.create(item);
      });
      this.losers = input.losers.map(function(item) {
        return EvmMarketDataERC20TokenItem.create(item);
      });
    }
    EvmMarketDataERC20TokensByPriceMovers2.create = function(input) {
      if (input instanceof EvmMarketDataERC20TokensByPriceMovers2) {
        return input;
      }
      return new EvmMarketDataERC20TokensByPriceMovers2(input);
    };
    EvmMarketDataERC20TokensByPriceMovers2.fromJSON = function(json) {
      var input = {
        gainers: json.gainers.map(function(item) {
          return EvmMarketDataERC20TokenItem.fromJSON(item);
        }),
        losers: json.losers.map(function(item) {
          return EvmMarketDataERC20TokenItem.fromJSON(item);
        })
      };
      return EvmMarketDataERC20TokensByPriceMovers2.create(input);
    };
    EvmMarketDataERC20TokensByPriceMovers2.prototype.toJSON = function() {
      return {
        gainers: this.gainers.map(function(item) {
          return item.toJSON();
        }),
        losers: this.losers.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmMarketDataERC20TokensByPriceMovers2;
  }()
);
var EvmMarketDataTopNFTCollectionByMarketCapItem = (
  /** @class */
  function() {
    function EvmMarketDataTopNFTCollectionByMarketCapItem2(input) {
      this.rank = input.rank;
      this.collectionTitle = input.collectionTitle;
      this.collectionImage = input.collectionImage;
      this.floorPriceUsd = input.floorPriceUsd;
      this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;
      this.marketCapUsd = input.marketCapUsd;
      this.marketCap24hrPercentChange = input.marketCap24hrPercentChange;
      this.volumeUsd = input.volumeUsd;
      this.volume24hrPercentChange = input.volume24hrPercentChange;
      this.collectionAddress = EvmAddress.create(input.collectionAddress);
      this.floorPrice = input.floorPrice;
      this.floorPriceUsd24hrPercentChange = input.floorPriceUsd24hrPercentChange;
    }
    EvmMarketDataTopNFTCollectionByMarketCapItem2.create = function(input) {
      if (input instanceof EvmMarketDataTopNFTCollectionByMarketCapItem2) {
        return input;
      }
      return new EvmMarketDataTopNFTCollectionByMarketCapItem2(input);
    };
    EvmMarketDataTopNFTCollectionByMarketCapItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        collectionTitle: json.collection_title,
        collectionImage: json.collection_image,
        floorPriceUsd: json.floor_price_usd,
        floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,
        marketCapUsd: json.market_cap_usd,
        marketCap24hrPercentChange: json.market_cap_24hr_percent_change,
        volumeUsd: json.volume_usd,
        volume24hrPercentChange: json.volume_24hr_percent_change,
        collectionAddress: EvmAddress.fromJSON(json.collection_address),
        floorPrice: json.floor_price,
        floorPriceUsd24hrPercentChange: json.floor_price_usd_24hr_percent_change
      };
      return EvmMarketDataTopNFTCollectionByMarketCapItem2.create(input);
    };
    EvmMarketDataTopNFTCollectionByMarketCapItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        collection_title: this.collectionTitle,
        collection_image: this.collectionImage,
        floor_price_usd: this.floorPriceUsd,
        floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,
        market_cap_usd: this.marketCapUsd,
        market_cap_24hr_percent_change: this.marketCap24hrPercentChange,
        volume_usd: this.volumeUsd,
        volume_24hr_percent_change: this.volume24hrPercentChange,
        collection_address: this.collectionAddress.toJSON(),
        floor_price: this.floorPrice,
        floor_price_usd_24hr_percent_change: this.floorPriceUsd24hrPercentChange
      };
    };
    return EvmMarketDataTopNFTCollectionByMarketCapItem2;
  }()
);
var EvmMarketDataHottestNFTCollectionByTradingVolumeItem = (
  /** @class */
  function() {
    function EvmMarketDataHottestNFTCollectionByTradingVolumeItem2(input) {
      this.rank = input.rank;
      this.collectionTitle = input.collectionTitle;
      this.collectionImage = input.collectionImage;
      this.floorPriceUsd = input.floorPriceUsd;
      this.floorPrice24hrPercentChange = input.floorPrice24hrPercentChange;
      this.volumeUsd = input.volumeUsd;
      this.volume24hrPercentChange = input.volume24hrPercentChange;
      this.averagePriceUsd = input.averagePriceUsd;
      this.collectionAddress = EvmAddress.create(input.collectionAddress);
      this.averagePrice = input.averagePrice;
      this.floorPrice = input.floorPrice;
      this.floorPriceUsd24hrPercentChange = input.floorPriceUsd24hrPercentChange;
      this.floorPrice7dPercentChange = input.floorPrice7dPercentChange;
      this.floorPriceUsd7dPercentChange = input.floorPriceUsd7dPercentChange;
      this.floorPrice30dPercentChange = input.floorPrice30dPercentChange;
      this.floorPriceUsd30dPercentChange = input.floorPriceUsd30dPercentChange;
    }
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.create = function(input) {
      if (input instanceof EvmMarketDataHottestNFTCollectionByTradingVolumeItem2) {
        return input;
      }
      return new EvmMarketDataHottestNFTCollectionByTradingVolumeItem2(input);
    };
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.fromJSON = function(json) {
      var input = {
        rank: json.rank,
        collectionTitle: json.collection_title,
        collectionImage: json.collection_image,
        floorPriceUsd: json.floor_price_usd,
        floorPrice24hrPercentChange: json.floor_price_24hr_percent_change,
        volumeUsd: json.volume_usd,
        volume24hrPercentChange: json.volume_24hr_percent_change,
        averagePriceUsd: json.average_price_usd,
        collectionAddress: EvmAddress.fromJSON(json.collection_address),
        averagePrice: json.average_price,
        floorPrice: json.floor_price,
        floorPriceUsd24hrPercentChange: json.floor_price_usd_24hr_percent_change,
        floorPrice7dPercentChange: json.floor_price_7d_percent_change,
        floorPriceUsd7dPercentChange: json.floor_price_usd_7d_percent_change,
        floorPrice30dPercentChange: json.floor_price_30d_percent_change,
        floorPriceUsd30dPercentChange: json.floor_price_usd_30d_percent_change
      };
      return EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.create(input);
    };
    EvmMarketDataHottestNFTCollectionByTradingVolumeItem2.prototype.toJSON = function() {
      return {
        rank: this.rank,
        collection_title: this.collectionTitle,
        collection_image: this.collectionImage,
        floor_price_usd: this.floorPriceUsd,
        floor_price_24hr_percent_change: this.floorPrice24hrPercentChange,
        volume_usd: this.volumeUsd,
        volume_24hr_percent_change: this.volume24hrPercentChange,
        average_price_usd: this.averagePriceUsd,
        collection_address: this.collectionAddress.toJSON(),
        average_price: this.averagePrice,
        floor_price: this.floorPrice,
        floor_price_usd_24hr_percent_change: this.floorPriceUsd24hrPercentChange,
        floor_price_7d_percent_change: this.floorPrice7dPercentChange,
        floor_price_usd_7d_percent_change: this.floorPriceUsd7dPercentChange,
        floor_price_30d_percent_change: this.floorPrice30dPercentChange,
        floor_price_usd_30d_percent_change: this.floorPriceUsd30dPercentChange
      };
    };
    return EvmMarketDataHottestNFTCollectionByTradingVolumeItem2;
  }()
);
var EvmMarketDataTopCryptoCurrenciesByMarketCapItem = (
  /** @class */
  function() {
    function EvmMarketDataTopCryptoCurrenciesByMarketCapItem2(input) {
      this.symbol = input.symbol;
      this.name = input.name;
      this.logo = input.logo;
      this.circulatingSupply = input.circulatingSupply;
      this.totalSupply = input.totalSupply;
      this.maxSupply = input.maxSupply;
      this.marketCapUsd = input.marketCapUsd;
      this.marketCapRank = input.marketCapRank;
      this.marketCap24hrChange = input.marketCap24hrChange;
      this.marketCap24hrPercentChange = input.marketCap24hrPercentChange;
      this.totalVolume = input.totalVolume;
      this.usdPrice = input.usdPrice;
      this.usdPrice24hrHigh = input.usdPrice24hrHigh;
      this.usdPrice24hrLow = input.usdPrice24hrLow;
      this.usdPrice24hrChange = input.usdPrice24hrChange;
      this.usdPrice24hrPercentChange = input.usdPrice24hrPercentChange;
      this.usdPriceAth = input.usdPriceAth;
      this.athPercentChange = input.athPercentChange;
      this.athDate = input.athDate;
      this.usdPrice1hrPercentChange = input.usdPrice1hrPercentChange;
      this.usdPrice7dPercentChange = input.usdPrice7dPercentChange;
      this.usdPrice30dPercentChange = input.usdPrice30dPercentChange;
    }
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.create = function(input) {
      if (input instanceof EvmMarketDataTopCryptoCurrenciesByMarketCapItem2) {
        return input;
      }
      return new EvmMarketDataTopCryptoCurrenciesByMarketCapItem2(input);
    };
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.fromJSON = function(json) {
      var input = {
        symbol: json.symbol,
        name: json.name,
        logo: json.logo,
        circulatingSupply: json.circulating_supply,
        totalSupply: json.total_supply,
        maxSupply: json.max_supply,
        marketCapUsd: json.market_cap_usd,
        marketCapRank: json.market_cap_rank,
        marketCap24hrChange: json.market_cap_24hr_change,
        marketCap24hrPercentChange: json.market_cap_24hr_percent_change,
        totalVolume: json.total_volume,
        usdPrice: json.usd_price,
        usdPrice24hrHigh: json.usd_price_24hr_high,
        usdPrice24hrLow: json.usd_price_24hr_low,
        usdPrice24hrChange: json.usd_price_24hr_change,
        usdPrice24hrPercentChange: json.usd_price_24hr_percent_change,
        usdPriceAth: json.usd_price_ath,
        athPercentChange: json.ath_percent_change,
        athDate: json.ath_date,
        usdPrice1hrPercentChange: json.usd_price_1hr_percent_change,
        usdPrice7dPercentChange: json.usd_price_7d_percent_change,
        usdPrice30dPercentChange: json.usd_price_30d_percent_change
      };
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.create(input);
    };
    EvmMarketDataTopCryptoCurrenciesByMarketCapItem2.prototype.toJSON = function() {
      return {
        symbol: this.symbol,
        name: this.name,
        logo: this.logo,
        circulating_supply: this.circulatingSupply,
        total_supply: this.totalSupply,
        max_supply: this.maxSupply,
        market_cap_usd: this.marketCapUsd,
        market_cap_rank: this.marketCapRank,
        market_cap_24hr_change: this.marketCap24hrChange,
        market_cap_24hr_percent_change: this.marketCap24hrPercentChange,
        total_volume: this.totalVolume,
        usd_price: this.usdPrice,
        usd_price_24hr_high: this.usdPrice24hrHigh,
        usd_price_24hr_low: this.usdPrice24hrLow,
        usd_price_24hr_change: this.usdPrice24hrChange,
        usd_price_24hr_percent_change: this.usdPrice24hrPercentChange,
        usd_price_ath: this.usdPriceAth,
        ath_percent_change: this.athPercentChange,
        ath_date: this.athDate,
        usd_price_1hr_percent_change: this.usdPrice1hrPercentChange,
        usd_price_7d_percent_change: this.usdPrice7dPercentChange,
        usd_price_30d_percent_change: this.usdPrice30dPercentChange
      };
    };
    return EvmMarketDataTopCryptoCurrenciesByMarketCapItem2;
  }()
);
var EvmReviewContracts = (
  /** @class */
  function() {
    function EvmReviewContracts2(input) {
      this.message = input.message;
    }
    EvmReviewContracts2.create = function(input) {
      if (input instanceof EvmReviewContracts2) {
        return input;
      }
      return new EvmReviewContracts2(input);
    };
    EvmReviewContracts2.fromJSON = function(json) {
      var input = {
        message: json.message
      };
      return EvmReviewContracts2.create(input);
    };
    EvmReviewContracts2.prototype.toJSON = function() {
      return {
        message: this.message
      };
    };
    return EvmReviewContracts2;
  }()
);
var EvmContractsReviewItem = (
  /** @class */
  function() {
    function EvmContractsReviewItem2(input) {
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.reason = input.reason;
      this.reportType = EvmContractsReviewItemReportTypeEnum.create(input.reportType);
      this.contractType = EvmContractsReviewItemContractTypeEnum.create(input.contractType);
    }
    EvmContractsReviewItem2.create = function(input) {
      if (input instanceof EvmContractsReviewItem2) {
        return input;
      }
      return new EvmContractsReviewItem2(input);
    };
    EvmContractsReviewItem2.fromJSON = function(json) {
      var input = {
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        reason: json.reason,
        reportType: EvmContractsReviewItemReportTypeEnum.fromJSON(json.report_type),
        contractType: EvmContractsReviewItemContractTypeEnum.fromJSON(json.contract_type)
      };
      return EvmContractsReviewItem2.create(input);
    };
    EvmContractsReviewItem2.prototype.toJSON = function() {
      return {
        contract_address: this.contractAddress.toJSON(),
        reason: this.reason,
        report_type: this.reportType,
        contract_type: this.contractType
      };
    };
    return EvmContractsReviewItem2;
  }()
);
var EvmContractsReviewDto = (
  /** @class */
  function() {
    function EvmContractsReviewDto2(input) {
      this.contracts = input.contracts.map(function(item) {
        return EvmContractsReviewItem.create(item);
      });
    }
    EvmContractsReviewDto2.create = function(input) {
      if (input instanceof EvmContractsReviewDto2) {
        return input;
      }
      return new EvmContractsReviewDto2(input);
    };
    EvmContractsReviewDto2.fromJSON = function(json) {
      var input = {
        contracts: json.contracts.map(function(item) {
          return EvmContractsReviewItem.fromJSON(item);
        })
      };
      return EvmContractsReviewDto2.create(input);
    };
    EvmContractsReviewDto2.prototype.toJSON = function() {
      return {
        contracts: this.contracts.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmContractsReviewDto2;
  }()
);
var EvmDefiProtocolBalance = (
  /** @class */
  function() {
    function EvmDefiProtocolBalance2(input) {
      this.totalUsdValue = input.totalUsdValue;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.positions = input.positions;
    }
    EvmDefiProtocolBalance2.create = function(input) {
      if (input instanceof EvmDefiProtocolBalance2) {
        return input;
      }
      return new EvmDefiProtocolBalance2(input);
    };
    EvmDefiProtocolBalance2.fromJSON = function(json) {
      var input = {
        totalUsdValue: json.total_usd_value,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        positions: json.positions
      };
      return EvmDefiProtocolBalance2.create(input);
    };
    EvmDefiProtocolBalance2.prototype.toJSON = function() {
      return {
        total_usd_value: this.totalUsdValue,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        positions: this.positions
      };
    };
    return EvmDefiProtocolBalance2;
  }()
);
var EvmWalletDefiSummary = (
  /** @class */
  function() {
    function EvmWalletDefiSummary2(input) {
      this.activeProtocols = input.activeProtocols;
      this.totalPositions = input.totalPositions;
      this.totalUsdValue = input.totalUsdValue;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.protocols = input.protocols.map(function(item) {
        return EvmDefiProtocolBalance.create(item);
      });
    }
    EvmWalletDefiSummary2.create = function(input) {
      if (input instanceof EvmWalletDefiSummary2) {
        return input;
      }
      return new EvmWalletDefiSummary2(input);
    };
    EvmWalletDefiSummary2.fromJSON = function(json) {
      var input = {
        activeProtocols: json.active_protocols,
        totalPositions: json.total_positions,
        totalUsdValue: json.total_usd_value,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        protocols: json.protocols.map(function(item) {
          return EvmDefiProtocolBalance.fromJSON(item);
        })
      };
      return EvmWalletDefiSummary2.create(input);
    };
    EvmWalletDefiSummary2.prototype.toJSON = function() {
      return {
        active_protocols: this.activeProtocols,
        total_positions: this.totalPositions,
        total_usd_value: this.totalUsdValue,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        protocols: this.protocols.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletDefiSummary2;
  }()
);
var EvmDefiTokenBalance = (
  /** @class */
  function() {
    function EvmDefiTokenBalance2(input) {
      this.tokenType = input.tokenType;
      this.name = input.name;
      this.symbol = input.symbol;
      this.contractAddress = EvmAddress.create(input.contractAddress);
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.thumbnail = input.thumbnail;
      this.balance = input.balance;
      this.balanceFormatted = input.balanceFormatted;
      this.usdPrice = input.usdPrice;
      this.usdValue = input.usdValue;
    }
    EvmDefiTokenBalance2.create = function(input) {
      if (input instanceof EvmDefiTokenBalance2) {
        return input;
      }
      return new EvmDefiTokenBalance2(input);
    };
    EvmDefiTokenBalance2.fromJSON = function(json) {
      var input = {
        tokenType: json.token_type,
        name: json.name,
        symbol: json.symbol,
        contractAddress: EvmAddress.fromJSON(json.contract_address),
        decimals: json.decimals,
        logo: json.logo,
        thumbnail: json.thumbnail,
        balance: json.balance,
        balanceFormatted: json.balance_formatted,
        usdPrice: json.usd_price,
        usdValue: json.usd_value
      };
      return EvmDefiTokenBalance2.create(input);
    };
    EvmDefiTokenBalance2.prototype.toJSON = function() {
      return {
        token_type: this.tokenType,
        name: this.name,
        symbol: this.symbol,
        contract_address: this.contractAddress.toJSON(),
        decimals: this.decimals,
        logo: this.logo,
        thumbnail: this.thumbnail,
        balance: this.balance,
        balance_formatted: this.balanceFormatted,
        usd_price: this.usdPrice,
        usd_value: this.usdValue
      };
    };
    return EvmDefiTokenBalance2;
  }()
);
var EvmDefiPositionDetails = (
  /** @class */
  function() {
    function EvmDefiPositionDetails2(input) {
      this.feeTier = input.feeTier;
      this.rangeTnd = input.rangeTnd;
      this.reserves = input.reserves;
      this.currentPrice = input.currentPrice;
      this.isInRange = input.isInRange;
      this.priceUpper = input.priceUpper;
      this.priceLower = input.priceLower;
      this.priceLabel = input.priceLabel;
      this.liquidity = input.liquidity;
      this.rangeStart = input.rangeStart;
      this.poolAddress = input.poolAddress;
      this.positionKey = input.positionKey;
      this.nftMetadata = input.nftMetadata ? EvmDefiPositionDetailsNftMetadata.create(input.nftMetadata) : void 0;
      this.assetStandard = input.assetStandard;
      this.apy = input.apy;
      this.isDebt = input.isDebt;
      this.isVariableDebt = input.isVariableDebt;
      this.isStableDebt = input.isStableDebt;
      this.shares = input.shares;
      this.reserve0 = input.reserve0;
      this.reserve1 = input.reserve1;
      this.factory = input.factory;
      this.pair = input.pair;
      this.shareOfPool = input.shareOfPool;
      this.noPriceAvailable = input.noPriceAvailable;
      this.sharesInStrategy = input.sharesInStrategy;
      this.strategyAddress = input.strategyAddress;
      this.baseType = input.baseType;
      this.healthFactor = input.healthFactor;
    }
    EvmDefiPositionDetails2.create = function(input) {
      if (input instanceof EvmDefiPositionDetails2) {
        return input;
      }
      return new EvmDefiPositionDetails2(input);
    };
    EvmDefiPositionDetails2.fromJSON = function(json) {
      var input = {
        feeTier: json.fee_tier,
        rangeTnd: json.range_tnd,
        reserves: json.reserves,
        currentPrice: json.current_price,
        isInRange: json.is_in_range,
        priceUpper: json.price_upper,
        priceLower: json.price_lower,
        priceLabel: json.price_label,
        liquidity: json.liquidity,
        rangeStart: json.range_start,
        poolAddress: json.pool_address,
        positionKey: json.position_key,
        nftMetadata: json.nft_metadata ? EvmDefiPositionDetailsNftMetadata.fromJSON(json.nft_metadata) : void 0,
        assetStandard: json.asset_standard,
        apy: json.apy,
        isDebt: json.is_debt,
        isVariableDebt: json.is_variable_debt,
        isStableDebt: json.is_stable_debt,
        shares: json.shares,
        reserve0: json.reserve0,
        reserve1: json.reserve1,
        factory: json.factory,
        pair: json.pair,
        shareOfPool: json.share_of_pool,
        noPriceAvailable: json.no_price_available,
        sharesInStrategy: json.shares_in_strategy,
        strategyAddress: json.strategy_address,
        baseType: json.base_type,
        healthFactor: json.health_factor
      };
      return EvmDefiPositionDetails2.create(input);
    };
    EvmDefiPositionDetails2.prototype.toJSON = function() {
      return {
        fee_tier: this.feeTier,
        range_tnd: this.rangeTnd,
        reserves: this.reserves,
        current_price: this.currentPrice,
        is_in_range: this.isInRange,
        price_upper: this.priceUpper,
        price_lower: this.priceLower,
        price_label: this.priceLabel,
        liquidity: this.liquidity,
        range_start: this.rangeStart,
        pool_address: this.poolAddress,
        position_key: this.positionKey,
        nft_metadata: this.nftMetadata ? this.nftMetadata : void 0,
        asset_standard: this.assetStandard,
        apy: this.apy,
        is_debt: this.isDebt,
        is_variable_debt: this.isVariableDebt,
        is_stable_debt: this.isStableDebt,
        shares: this.shares,
        reserve0: this.reserve0,
        reserve1: this.reserve1,
        factory: this.factory,
        pair: this.pair,
        share_of_pool: this.shareOfPool,
        no_price_available: this.noPriceAvailable,
        shares_in_strategy: this.sharesInStrategy,
        strategy_address: this.strategyAddress,
        base_type: this.baseType,
        health_factor: this.healthFactor
      };
    };
    return EvmDefiPositionDetails2;
  }()
);
var EvmDefiProtocolPosition = (
  /** @class */
  function() {
    function EvmDefiProtocolPosition2(input) {
      this.label = input.label;
      this.tokens = input.tokens.map(function(item) {
        return EvmDefiTokenBalance.create(item);
      });
      this.address = input.address ? EvmAddress.create(input.address) : void 0;
      this.balanceUsd = input.balanceUsd;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.positionDetails = input.positionDetails ? EvmDefiPositionDetails.create(input.positionDetails) : void 0;
    }
    EvmDefiProtocolPosition2.create = function(input) {
      if (input instanceof EvmDefiProtocolPosition2) {
        return input;
      }
      return new EvmDefiProtocolPosition2(input);
    };
    EvmDefiProtocolPosition2.fromJSON = function(json) {
      var input = {
        label: json.label,
        tokens: json.tokens.map(function(item) {
          return EvmDefiTokenBalance.fromJSON(item);
        }),
        address: json.address ? EvmAddress.fromJSON(json.address) : void 0,
        balanceUsd: json.balance_usd,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        positionDetails: json.position_details ? EvmDefiPositionDetails.fromJSON(json.position_details) : void 0
      };
      return EvmDefiProtocolPosition2.create(input);
    };
    EvmDefiProtocolPosition2.prototype.toJSON = function() {
      return {
        label: this.label,
        tokens: this.tokens.map(function(item) {
          return item.toJSON();
        }),
        address: this.address ? this.address.toJSON() : void 0,
        balance_usd: this.balanceUsd,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        position_details: this.positionDetails ? this.positionDetails.toJSON() : void 0
      };
    };
    return EvmDefiProtocolPosition2;
  }()
);
var EvmGetDefiPositionsByProtocol = (
  /** @class */
  function() {
    function EvmGetDefiPositionsByProtocol2(input) {
      this.protocolName = input.protocolName;
      this.protocolId = input.protocolId;
      this.protocolUrl = input.protocolUrl;
      this.protocolLogo = input.protocolLogo;
      this.totalUsdValue = input.totalUsdValue;
      this.totalUnclaimedUsdValue = input.totalUnclaimedUsdValue;
      this.positions = input.positions ? input.positions.map(function(item) {
        return EvmDefiProtocolPosition.create(item);
      }) : void 0;
    }
    EvmGetDefiPositionsByProtocol2.create = function(input) {
      if (input instanceof EvmGetDefiPositionsByProtocol2) {
        return input;
      }
      return new EvmGetDefiPositionsByProtocol2(input);
    };
    EvmGetDefiPositionsByProtocol2.fromJSON = function(json) {
      var input = {
        protocolName: json.protocol_name,
        protocolId: json.protocol_id,
        protocolUrl: json.protocol_url,
        protocolLogo: json.protocol_logo,
        totalUsdValue: json.total_usd_value,
        totalUnclaimedUsdValue: json.total_unclaimed_usd_value,
        positions: json.positions ? json.positions.map(function(item) {
          return EvmDefiProtocolPosition.fromJSON(item);
        }) : void 0
      };
      return EvmGetDefiPositionsByProtocol2.create(input);
    };
    EvmGetDefiPositionsByProtocol2.prototype.toJSON = function() {
      return {
        protocol_name: this.protocolName,
        protocol_id: this.protocolId,
        protocol_url: this.protocolUrl,
        protocol_logo: this.protocolLogo,
        total_usd_value: this.totalUsdValue,
        total_unclaimed_usd_value: this.totalUnclaimedUsdValue,
        positions: this.positions ? this.positions.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmGetDefiPositionsByProtocol2;
  }()
);
var EvmDefiPositionSummaryResponse = (
  /** @class */
  function() {
    function EvmDefiPositionSummaryResponse2(input) {
      this.protocolName = input.protocolName;
      this.protocolId = input.protocolId;
      this.protocolUrl = input.protocolUrl;
      this.protocolLogo = input.protocolLogo;
      this.position = input.position ? EvmDefiProtocolPosition.create(input.position) : void 0;
    }
    EvmDefiPositionSummaryResponse2.create = function(input) {
      if (input instanceof EvmDefiPositionSummaryResponse2) {
        return input;
      }
      return new EvmDefiPositionSummaryResponse2(input);
    };
    EvmDefiPositionSummaryResponse2.fromJSON = function(json) {
      var input = {
        protocolName: json.protocol_name,
        protocolId: json.protocol_id,
        protocolUrl: json.protocol_url,
        protocolLogo: json.protocol_logo,
        position: json.position ? EvmDefiProtocolPosition.fromJSON(json.position) : void 0
      };
      return EvmDefiPositionSummaryResponse2.create(input);
    };
    EvmDefiPositionSummaryResponse2.prototype.toJSON = function() {
      return {
        protocol_name: this.protocolName,
        protocol_id: this.protocolId,
        protocol_url: this.protocolUrl,
        protocol_logo: this.protocolLogo,
        position: this.position ? this.position.toJSON() : void 0
      };
    };
    return EvmDefiPositionSummaryResponse2;
  }()
);
var EvmTransactionTimestamp = (
  /** @class */
  function() {
    function EvmTransactionTimestamp2(input) {
      this.blockNumber = BigNumber.create(input.blockNumber);
      this.blockTimestamp = input.blockTimestamp;
      this.transactionHash = input.transactionHash;
    }
    EvmTransactionTimestamp2.create = function(input) {
      if (input instanceof EvmTransactionTimestamp2) {
        return input;
      }
      return new EvmTransactionTimestamp2(input);
    };
    EvmTransactionTimestamp2.fromJSON = function(json) {
      var input = {
        blockNumber: BigNumber.fromJSON(json.block_number),
        blockTimestamp: json.block_timestamp,
        transactionHash: json.transaction_hash
      };
      return EvmTransactionTimestamp2.create(input);
    };
    EvmTransactionTimestamp2.prototype.toJSON = function() {
      return {
        block_number: this.blockNumber.toJSON(),
        block_timestamp: this.blockTimestamp,
        transaction_hash: this.transactionHash
      };
    };
    return EvmTransactionTimestamp2;
  }()
);
var EvmWalletActiveChain = (
  /** @class */
  function() {
    function EvmWalletActiveChain2(input) {
      this.chain = input.chain;
      this.chainId = input.chainId;
      this.firstTransaction = input.firstTransaction ? EvmTransactionTimestamp.create(input.firstTransaction) : void 0;
      this.lastTransaction = input.lastTransaction ? EvmTransactionTimestamp.create(input.lastTransaction) : void 0;
    }
    EvmWalletActiveChain2.create = function(input) {
      if (input instanceof EvmWalletActiveChain2) {
        return input;
      }
      return new EvmWalletActiveChain2(input);
    };
    EvmWalletActiveChain2.fromJSON = function(json) {
      var input = {
        chain: json.chain,
        chainId: json.chain_id,
        firstTransaction: json.first_transaction ? EvmTransactionTimestamp.fromJSON(json.first_transaction) : void 0,
        lastTransaction: json.last_transaction ? EvmTransactionTimestamp.fromJSON(json.last_transaction) : void 0
      };
      return EvmWalletActiveChain2.create(input);
    };
    EvmWalletActiveChain2.prototype.toJSON = function() {
      return {
        chain: this.chain,
        chain_id: this.chainId,
        first_transaction: this.firstTransaction ? this.firstTransaction.toJSON() : void 0,
        last_transaction: this.lastTransaction ? this.lastTransaction.toJSON() : void 0
      };
    };
    return EvmWalletActiveChain2;
  }()
);
var EvmWalletActiveChains = (
  /** @class */
  function() {
    function EvmWalletActiveChains2(input) {
      this.address = EvmAddress.create(input.address);
      this.activeChains = input.activeChains.map(function(item) {
        return EvmWalletActiveChain.create(item);
      });
    }
    EvmWalletActiveChains2.create = function(input) {
      if (input instanceof EvmWalletActiveChains2) {
        return input;
      }
      return new EvmWalletActiveChains2(input);
    };
    EvmWalletActiveChains2.fromJSON = function(json) {
      var input = {
        address: EvmAddress.fromJSON(json.address),
        activeChains: json.active_chains.map(function(item) {
          return EvmWalletActiveChain.fromJSON(item);
        })
      };
      return EvmWalletActiveChains2.create(input);
    };
    EvmWalletActiveChains2.prototype.toJSON = function() {
      return {
        address: this.address.toJSON(),
        active_chains: this.activeChains.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletActiveChains2;
  }()
);
var EvmWalletStatTransactions = (
  /** @class */
  function() {
    function EvmWalletStatTransactions2(input) {
      this.total = input.total;
    }
    EvmWalletStatTransactions2.create = function(input) {
      if (input instanceof EvmWalletStatTransactions2) {
        return input;
      }
      return new EvmWalletStatTransactions2(input);
    };
    EvmWalletStatTransactions2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatTransactions2.create(input);
    };
    EvmWalletStatTransactions2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatTransactions2;
  }()
);
var EvmWalletStatNftTransfers = (
  /** @class */
  function() {
    function EvmWalletStatNftTransfers2(input) {
      this.total = input.total;
    }
    EvmWalletStatNftTransfers2.create = function(input) {
      if (input instanceof EvmWalletStatNftTransfers2) {
        return input;
      }
      return new EvmWalletStatNftTransfers2(input);
    };
    EvmWalletStatNftTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatNftTransfers2.create(input);
    };
    EvmWalletStatNftTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatNftTransfers2;
  }()
);
var EvmWalletStatTokenTransfers = (
  /** @class */
  function() {
    function EvmWalletStatTokenTransfers2(input) {
      this.total = input.total;
    }
    EvmWalletStatTokenTransfers2.create = function(input) {
      if (input instanceof EvmWalletStatTokenTransfers2) {
        return input;
      }
      return new EvmWalletStatTokenTransfers2(input);
    };
    EvmWalletStatTokenTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmWalletStatTokenTransfers2.create(input);
    };
    EvmWalletStatTokenTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmWalletStatTokenTransfers2;
  }()
);
var EvmWalletStat = (
  /** @class */
  function() {
    function EvmWalletStat2(input) {
      this.nfts = input.nfts;
      this.collections = input.collections;
      this.transactions = EvmWalletStatTransactions.create(input.transactions);
      this.nftTransfers = EvmWalletStatNftTransfers.create(input.nftTransfers);
      this.tokenTransfers = EvmWalletStatTokenTransfers.create(input.tokenTransfers);
    }
    EvmWalletStat2.create = function(input) {
      if (input instanceof EvmWalletStat2) {
        return input;
      }
      return new EvmWalletStat2(input);
    };
    EvmWalletStat2.fromJSON = function(json) {
      var input = {
        nfts: json.nfts,
        collections: json.collections,
        transactions: EvmWalletStatTransactions.fromJSON(json.transactions),
        nftTransfers: EvmWalletStatNftTransfers.fromJSON(json.nft_transfers),
        tokenTransfers: EvmWalletStatTokenTransfers.fromJSON(json.token_transfers)
      };
      return EvmWalletStat2.create(input);
    };
    EvmWalletStat2.prototype.toJSON = function() {
      return {
        nfts: this.nfts,
        collections: this.collections,
        transactions: this.transactions.toJSON(),
        nft_transfers: this.nftTransfers.toJSON(),
        token_transfers: this.tokenTransfers.toJSON()
      };
    };
    return EvmWalletStat2;
  }()
);
var EvmNftCollectionStatOwners = (
  /** @class */
  function() {
    function EvmNftCollectionStatOwners2(input) {
      this.current = input.current;
    }
    EvmNftCollectionStatOwners2.create = function(input) {
      if (input instanceof EvmNftCollectionStatOwners2) {
        return input;
      }
      return new EvmNftCollectionStatOwners2(input);
    };
    EvmNftCollectionStatOwners2.fromJSON = function(json) {
      var input = {
        current: json.current
      };
      return EvmNftCollectionStatOwners2.create(input);
    };
    EvmNftCollectionStatOwners2.prototype.toJSON = function() {
      return {
        current: this.current
      };
    };
    return EvmNftCollectionStatOwners2;
  }()
);
var EvmNftCollectionStatTransfers = (
  /** @class */
  function() {
    function EvmNftCollectionStatTransfers2(input) {
      this.total = input.total;
    }
    EvmNftCollectionStatTransfers2.create = function(input) {
      if (input instanceof EvmNftCollectionStatTransfers2) {
        return input;
      }
      return new EvmNftCollectionStatTransfers2(input);
    };
    EvmNftCollectionStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmNftCollectionStatTransfers2.create(input);
    };
    EvmNftCollectionStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmNftCollectionStatTransfers2;
  }()
);
var EvmNftCollectionStat = (
  /** @class */
  function() {
    function EvmNftCollectionStat2(input) {
      this.totalTokens = input.totalTokens;
      this.owners = EvmNftCollectionStatOwners.create(input.owners);
      this.transfers = EvmNftCollectionStatTransfers.create(input.transfers);
    }
    EvmNftCollectionStat2.create = function(input) {
      if (input instanceof EvmNftCollectionStat2) {
        return input;
      }
      return new EvmNftCollectionStat2(input);
    };
    EvmNftCollectionStat2.fromJSON = function(json) {
      var input = {
        totalTokens: json.total_tokens,
        owners: EvmNftCollectionStatOwners.fromJSON(json.owners),
        transfers: EvmNftCollectionStatTransfers.fromJSON(json.transfers)
      };
      return EvmNftCollectionStat2.create(input);
    };
    EvmNftCollectionStat2.prototype.toJSON = function() {
      return {
        total_tokens: this.totalTokens,
        owners: this.owners.toJSON(),
        transfers: this.transfers.toJSON()
      };
    };
    return EvmNftCollectionStat2;
  }()
);
var EvmNftTokenStatOwners = (
  /** @class */
  function() {
    function EvmNftTokenStatOwners2(input) {
      this.current = input.current;
    }
    EvmNftTokenStatOwners2.create = function(input) {
      if (input instanceof EvmNftTokenStatOwners2) {
        return input;
      }
      return new EvmNftTokenStatOwners2(input);
    };
    EvmNftTokenStatOwners2.fromJSON = function(json) {
      var input = {
        current: json.current
      };
      return EvmNftTokenStatOwners2.create(input);
    };
    EvmNftTokenStatOwners2.prototype.toJSON = function() {
      return {
        current: this.current
      };
    };
    return EvmNftTokenStatOwners2;
  }()
);
var EvmNftTokenStatTransfers = (
  /** @class */
  function() {
    function EvmNftTokenStatTransfers2(input) {
      this.total = input.total;
    }
    EvmNftTokenStatTransfers2.create = function(input) {
      if (input instanceof EvmNftTokenStatTransfers2) {
        return input;
      }
      return new EvmNftTokenStatTransfers2(input);
    };
    EvmNftTokenStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmNftTokenStatTransfers2.create(input);
    };
    EvmNftTokenStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmNftTokenStatTransfers2;
  }()
);
var EvmNftTokenStat = (
  /** @class */
  function() {
    function EvmNftTokenStat2(input) {
      this.owners = EvmNftTokenStatOwners.create(input.owners);
      this.transfers = EvmNftTokenStatTransfers.create(input.transfers);
    }
    EvmNftTokenStat2.create = function(input) {
      if (input instanceof EvmNftTokenStat2) {
        return input;
      }
      return new EvmNftTokenStat2(input);
    };
    EvmNftTokenStat2.fromJSON = function(json) {
      var input = {
        owners: EvmNftTokenStatOwners.fromJSON(json.owners),
        transfers: EvmNftTokenStatTransfers.fromJSON(json.transfers)
      };
      return EvmNftTokenStat2.create(input);
    };
    EvmNftTokenStat2.prototype.toJSON = function() {
      return {
        owners: this.owners.toJSON(),
        transfers: this.transfers.toJSON()
      };
    };
    return EvmNftTokenStat2;
  }()
);
var EvmErc20TokenStatTransfers = (
  /** @class */
  function() {
    function EvmErc20TokenStatTransfers2(input) {
      this.total = input.total;
    }
    EvmErc20TokenStatTransfers2.create = function(input) {
      if (input instanceof EvmErc20TokenStatTransfers2) {
        return input;
      }
      return new EvmErc20TokenStatTransfers2(input);
    };
    EvmErc20TokenStatTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmErc20TokenStatTransfers2.create(input);
    };
    EvmErc20TokenStatTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmErc20TokenStatTransfers2;
  }()
);
var EvmErc20TokenStat = (
  /** @class */
  function() {
    function EvmErc20TokenStat2(input) {
      this.transfers = EvmErc20TokenStatTransfers.create(input.transfers);
    }
    EvmErc20TokenStat2.create = function(input) {
      if (input instanceof EvmErc20TokenStat2) {
        return input;
      }
      return new EvmErc20TokenStat2(input);
    };
    EvmErc20TokenStat2.fromJSON = function(json) {
      var input = {
        transfers: EvmErc20TokenStatTransfers.fromJSON(json.transfers)
      };
      return EvmErc20TokenStat2.create(input);
    };
    EvmErc20TokenStat2.prototype.toJSON = function() {
      return {
        transfers: this.transfers.toJSON()
      };
    };
    return EvmErc20TokenStat2;
  }()
);
var EvmBlockTokenStatTransactions = (
  /** @class */
  function() {
    function EvmBlockTokenStatTransactions2(input) {
      this.total = input.total;
    }
    EvmBlockTokenStatTransactions2.create = function(input) {
      if (input instanceof EvmBlockTokenStatTransactions2) {
        return input;
      }
      return new EvmBlockTokenStatTransactions2(input);
    };
    EvmBlockTokenStatTransactions2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmBlockTokenStatTransactions2.create(input);
    };
    EvmBlockTokenStatTransactions2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmBlockTokenStatTransactions2;
  }()
);
var EvmBlockTokenStatNftTransfers = (
  /** @class */
  function() {
    function EvmBlockTokenStatNftTransfers2(input) {
      this.total = input.total;
    }
    EvmBlockTokenStatNftTransfers2.create = function(input) {
      if (input instanceof EvmBlockTokenStatNftTransfers2) {
        return input;
      }
      return new EvmBlockTokenStatNftTransfers2(input);
    };
    EvmBlockTokenStatNftTransfers2.fromJSON = function(json) {
      var input = {
        total: json.total
      };
      return EvmBlockTokenStatNftTransfers2.create(input);
    };
    EvmBlockTokenStatNftTransfers2.prototype.toJSON = function() {
      return {
        total: this.total
      };
    };
    return EvmBlockTokenStatNftTransfers2;
  }()
);
var EvmBlockTokenStat = (
  /** @class */
  function() {
    function EvmBlockTokenStat2(input) {
      this.transactions = EvmBlockTokenStatTransactions.create(input.transactions);
      this.nftTransfers = EvmBlockTokenStatNftTransfers.create(input.nftTransfers);
    }
    EvmBlockTokenStat2.create = function(input) {
      if (input instanceof EvmBlockTokenStat2) {
        return input;
      }
      return new EvmBlockTokenStat2(input);
    };
    EvmBlockTokenStat2.fromJSON = function(json) {
      var input = {
        transactions: EvmBlockTokenStatTransactions.fromJSON(json.transactions),
        nftTransfers: EvmBlockTokenStatNftTransfers.fromJSON(json.nft_transfers)
      };
      return EvmBlockTokenStat2.create(input);
    };
    EvmBlockTokenStat2.prototype.toJSON = function() {
      return {
        transactions: this.transactions.toJSON(),
        nft_transfers: this.nftTransfers.toJSON()
      };
    };
    return EvmBlockTokenStat2;
  }()
);
var EvmGetWalletProfitabilitySummary = (
  /** @class */
  function() {
    function EvmGetWalletProfitabilitySummary2(input) {
      this.totalCountOfTrades = input.totalCountOfTrades;
      this.totalTradeVolume = input.totalTradeVolume;
      this.totalRealizedProfitUsd = input.totalRealizedProfitUsd;
      this.totalRealizedProfitPercentage = input.totalRealizedProfitPercentage;
      this.totalBuys = input.totalBuys;
      this.totalSells = input.totalSells;
      this.totalSoldVolumeUsd = input.totalSoldVolumeUsd;
      this.totalBoughtVolumeUsd = input.totalBoughtVolumeUsd;
    }
    EvmGetWalletProfitabilitySummary2.create = function(input) {
      if (input instanceof EvmGetWalletProfitabilitySummary2) {
        return input;
      }
      return new EvmGetWalletProfitabilitySummary2(input);
    };
    EvmGetWalletProfitabilitySummary2.fromJSON = function(json) {
      var input = {
        totalCountOfTrades: json.total_count_of_trades,
        totalTradeVolume: json.total_trade_volume,
        totalRealizedProfitUsd: json.total_realized_profit_usd,
        totalRealizedProfitPercentage: json.total_realized_profit_percentage,
        totalBuys: json.total_buys,
        totalSells: json.total_sells,
        totalSoldVolumeUsd: json.total_sold_volume_usd,
        totalBoughtVolumeUsd: json.total_bought_volume_usd
      };
      return EvmGetWalletProfitabilitySummary2.create(input);
    };
    EvmGetWalletProfitabilitySummary2.prototype.toJSON = function() {
      return {
        total_count_of_trades: this.totalCountOfTrades,
        total_trade_volume: this.totalTradeVolume,
        total_realized_profit_usd: this.totalRealizedProfitUsd,
        total_realized_profit_percentage: this.totalRealizedProfitPercentage,
        total_buys: this.totalBuys,
        total_sells: this.totalSells,
        total_sold_volume_usd: this.totalSoldVolumeUsd,
        total_bought_volume_usd: this.totalBoughtVolumeUsd
      };
    };
    return EvmGetWalletProfitabilitySummary2;
  }()
);
var EvmWalletProfitabilityTokenData = (
  /** @class */
  function() {
    function EvmWalletProfitabilityTokenData2(input) {
      this.tokenAddress = EvmAddress.create(input.tokenAddress);
      this.avgBuyPriceUsd = input.avgBuyPriceUsd;
      this.avgSellPriceUsd = input.avgSellPriceUsd;
      this.totalUsdInvested = input.totalUsdInvested;
      this.totalTokensSold = input.totalTokensSold;
      this.totalTokensBought = input.totalTokensBought;
      this.totalSoldUsd = input.totalSoldUsd;
      this.avgCostOfQuantitySold = input.avgCostOfQuantitySold;
      this.countOfTrades = input.countOfTrades;
      this.realizedProfitUsd = input.realizedProfitUsd;
      this.realizedProfitPercentage = input.realizedProfitPercentage;
      this.totalBuys = input.totalBuys;
      this.totalSells = input.totalSells;
      this.name = input.name;
      this.symbol = input.symbol;
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.logoHash = input.logoHash;
      this.thumbnail = input.thumbnail;
      this.possibleSpam = input.possibleSpam;
    }
    EvmWalletProfitabilityTokenData2.create = function(input) {
      if (input instanceof EvmWalletProfitabilityTokenData2) {
        return input;
      }
      return new EvmWalletProfitabilityTokenData2(input);
    };
    EvmWalletProfitabilityTokenData2.fromJSON = function(json) {
      var input = {
        tokenAddress: EvmAddress.fromJSON(json.token_address),
        avgBuyPriceUsd: json.avg_buy_price_usd,
        avgSellPriceUsd: json.avg_sell_price_usd,
        totalUsdInvested: json.total_usd_invested,
        totalTokensSold: json.total_tokens_sold,
        totalTokensBought: json.total_tokens_bought,
        totalSoldUsd: json.total_sold_usd,
        avgCostOfQuantitySold: json.avg_cost_of_quantity_sold,
        countOfTrades: json.count_of_trades,
        realizedProfitUsd: json.realized_profit_usd,
        realizedProfitPercentage: json.realized_profit_percentage,
        totalBuys: json.total_buys,
        totalSells: json.total_sells,
        name: json.name,
        symbol: json.symbol,
        decimals: Number(json.decimals),
        logo: json.logo,
        logoHash: json.logo_hash,
        thumbnail: json.thumbnail,
        possibleSpam: json.possible_spam
      };
      return EvmWalletProfitabilityTokenData2.create(input);
    };
    EvmWalletProfitabilityTokenData2.prototype.toJSON = function() {
      return {
        token_address: this.tokenAddress.toJSON(),
        avg_buy_price_usd: this.avgBuyPriceUsd,
        avg_sell_price_usd: this.avgSellPriceUsd,
        total_usd_invested: this.totalUsdInvested,
        total_tokens_sold: this.totalTokensSold,
        total_tokens_bought: this.totalTokensBought,
        total_sold_usd: this.totalSoldUsd,
        avg_cost_of_quantity_sold: this.avgCostOfQuantitySold,
        count_of_trades: this.countOfTrades,
        realized_profit_usd: this.realizedProfitUsd,
        realized_profit_percentage: this.realizedProfitPercentage,
        total_buys: this.totalBuys,
        total_sells: this.totalSells,
        name: this.name,
        symbol: this.symbol,
        decimals: String(this.decimals),
        logo: this.logo,
        logo_hash: this.logoHash,
        thumbnail: this.thumbnail,
        possible_spam: this.possibleSpam
      };
    };
    return EvmWalletProfitabilityTokenData2;
  }()
);
var EvmWalletProfitabilityResponse = (
  /** @class */
  function() {
    function EvmWalletProfitabilityResponse2(input) {
      this.result = input.result ? input.result.map(function(item) {
        return EvmWalletProfitabilityTokenData.create(item);
      }) : void 0;
    }
    EvmWalletProfitabilityResponse2.create = function(input) {
      if (input instanceof EvmWalletProfitabilityResponse2) {
        return input;
      }
      return new EvmWalletProfitabilityResponse2(input);
    };
    EvmWalletProfitabilityResponse2.fromJSON = function(json) {
      var input = {
        result: json.result ? json.result.map(function(item) {
          return EvmWalletProfitabilityTokenData.fromJSON(item);
        }) : void 0
      };
      return EvmWalletProfitabilityResponse2.create(input);
    };
    EvmWalletProfitabilityResponse2.prototype.toJSON = function() {
      return {
        result: this.result ? this.result.map(function(item) {
          return item.toJSON();
        }) : void 0
      };
    };
    return EvmWalletProfitabilityResponse2;
  }()
);
var EvmTopProfitableWalletPerTokenResponse = (
  /** @class */
  function() {
    function EvmTopProfitableWalletPerTokenResponse2(input) {
      this.avgBuyPriceUsd = input.avgBuyPriceUsd;
      this.avgCostOfQuantitySold = input.avgCostOfQuantitySold;
      this.avgSellPriceUsd = input.avgSellPriceUsd;
      this.countOfTrades = input.countOfTrades;
      this.realizedProfitPercentage = input.realizedProfitPercentage;
      this.realizedProfitUsd = input.realizedProfitUsd;
      this.totalSoldUsd = input.totalSoldUsd;
      this.totalTokensBought = input.totalTokensBought;
      this.totalTokensSold = input.totalTokensSold;
      this.totalUsdInvested = input.totalUsdInvested;
      this.address = EvmAddress.create(input.address);
    }
    EvmTopProfitableWalletPerTokenResponse2.create = function(input) {
      if (input instanceof EvmTopProfitableWalletPerTokenResponse2) {
        return input;
      }
      return new EvmTopProfitableWalletPerTokenResponse2(input);
    };
    EvmTopProfitableWalletPerTokenResponse2.fromJSON = function(json) {
      var input = {
        avgBuyPriceUsd: json.avg_buy_price_usd,
        avgCostOfQuantitySold: json.avg_cost_of_quantity_sold,
        avgSellPriceUsd: json.avg_sell_price_usd,
        countOfTrades: json.count_of_trades,
        realizedProfitPercentage: json.realized_profit_percentage,
        realizedProfitUsd: json.realized_profit_usd,
        totalSoldUsd: json.total_sold_usd,
        totalTokensBought: json.total_tokens_bought,
        totalTokensSold: json.total_tokens_sold,
        totalUsdInvested: json.total_usd_invested,
        address: EvmAddress.fromJSON(json.address)
      };
      return EvmTopProfitableWalletPerTokenResponse2.create(input);
    };
    EvmTopProfitableWalletPerTokenResponse2.prototype.toJSON = function() {
      return {
        avg_buy_price_usd: this.avgBuyPriceUsd,
        avg_cost_of_quantity_sold: this.avgCostOfQuantitySold,
        avg_sell_price_usd: this.avgSellPriceUsd,
        count_of_trades: this.countOfTrades,
        realized_profit_percentage: this.realizedProfitPercentage,
        realized_profit_usd: this.realizedProfitUsd,
        total_sold_usd: this.totalSoldUsd,
        total_tokens_bought: this.totalTokensBought,
        total_tokens_sold: this.totalTokensSold,
        total_usd_invested: this.totalUsdInvested,
        address: this.address.toJSON()
      };
    };
    return EvmTopProfitableWalletPerTokenResponse2;
  }()
);
var EvmWalletTopProfitableWalletPerTokenResponse = (
  /** @class */
  function() {
    function EvmWalletTopProfitableWalletPerTokenResponse2(input) {
      this.name = input.name;
      this.symbol = input.symbol;
      this.decimals = input.decimals;
      this.logo = input.logo;
      this.possibleSpam = input.possibleSpam;
      this.result = input.result.map(function(item) {
        return EvmTopProfitableWalletPerTokenResponse.create(item);
      });
    }
    EvmWalletTopProfitableWalletPerTokenResponse2.create = function(input) {
      if (input instanceof EvmWalletTopProfitableWalletPerTokenResponse2) {
        return input;
      }
      return new EvmWalletTopProfitableWalletPerTokenResponse2(input);
    };
    EvmWalletTopProfitableWalletPerTokenResponse2.fromJSON = function(json) {
      var input = {
        name: json.name,
        symbol: json.symbol,
        decimals: json.decimals,
        logo: json.logo,
        possibleSpam: json.possible_spam,
        result: json.result.map(function(item) {
          return EvmTopProfitableWalletPerTokenResponse.fromJSON(item);
        })
      };
      return EvmWalletTopProfitableWalletPerTokenResponse2.create(input);
    };
    EvmWalletTopProfitableWalletPerTokenResponse2.prototype.toJSON = function() {
      return {
        name: this.name,
        symbol: this.symbol,
        decimals: this.decimals,
        logo: this.logo,
        possible_spam: this.possibleSpam,
        result: this.result.map(function(item) {
          return item.toJSON();
        })
      };
    };
    return EvmWalletTopProfitableWalletPerTokenResponse2;
  }()
);
var GetNFTTradesOperation = {
  operationId: "getNFTTrades",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/trades",
  parameterNames: ["chain", "from_block", "to_block", "from_date", "to_date", "marketplace", "cursor", "limit", "nft_metadata", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmTradeCollection.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var fromBlock = request.fromBlock;
    var toBlock = request.toBlock;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var marketplace = request.marketplace ? EvmGetNFTTradesMarketplaceEnum.create(request.marketplace) : void 0;
    var cursor = request.cursor;
    var limit = request.limit;
    var nftMetadata = request.nftMetadata;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      from_block: fromBlock,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      from_date: fromDate !== void 0 ? fromDate.toISOString() : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      marketplace: marketplace ? marketplace : void 0,
      cursor,
      limit,
      nft_metadata: nftMetadata,
      address: address.toJSON()
    };
  }
};
var GetNFTTradesByTokenOperation = {
  operationId: "getNFTTradesByToken",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/{token_id}/trades",
  parameterNames: ["chain", "from_block", "to_block", "from_date", "to_date", "cursor", "limit", "nft_metadata", "address", "token_id"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmTradeCollection.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var fromBlock = request.fromBlock;
    var toBlock = request.toBlock;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var cursor = request.cursor;
    var limit = request.limit;
    var nftMetadata = request.nftMetadata;
    var address = EvmAddress.create(request.address);
    var tokenId = request.tokenId;
    return {
      chain: chain ? chain.toJSON() : void 0,
      from_block: fromBlock,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      from_date: fromDate !== void 0 ? fromDate.toISOString() : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      cursor,
      limit,
      nft_metadata: nftMetadata,
      address: address.toJSON(),
      token_id: tokenId
    };
  }
};
var GetNFTContractSalePricesOperation = {
  operationId: "getNFTContractSalePrices",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/price",
  parameterNames: ["chain", "days", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmSoldPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var days = request.days;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      days,
      address: address.toJSON()
    };
  }
};
var GetNFTSalePricesOperation = {
  operationId: "getNFTSalePrices",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/{token_id}/price",
  parameterNames: ["chain", "days", "address", "token_id"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmSoldPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var days = request.days;
    var address = EvmAddress.create(request.address);
    var tokenId = request.tokenId;
    return {
      chain: chain ? chain.toJSON() : void 0,
      days,
      address: address.toJSON(),
      token_id: tokenId
    };
  }
};
var GetMultipleTokenPricesOperation = {
  operationId: "getMultipleTokenPrices",
  groupName: "token",
  httpMethod: "post",
  routePattern: "/erc20/prices",
  parameterNames: ["chain", "include", "max_token_inactivity"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmErc20Price.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var include = request.include ? EvmGetMultipleTokenPricesIncludeEnum.create(request.include) : void 0;
    var maxTokenInactivity = request.maxTokenInactivity;
    return {
      chain: chain ? chain.toJSON() : void 0,
      include: include ? include : void 0,
      max_token_inactivity: maxTokenInactivity
    };
  },
  serializeBody: function(body) {
    var value = EvmGetMultipleTokenPricesDto.create(body);
    return value.toJSON();
  }
};
var GetTokenOwnersOperation = {
  operationId: "getTokenOwners",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/erc20/{token_address}/owners",
  parameterNames: ["chain", "token_address", "limit", "cursor", "order"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenOwnerCollection.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var tokenAddress = request.tokenAddress;
    var limit = request.limit;
    var cursor = request.cursor;
    var order = request.order ? EvmOrderList.create(request.order) : void 0;
    return {
      chain: chain ? chain.toJSON() : void 0,
      token_address: tokenAddress,
      limit,
      cursor,
      order: order ? order : void 0
    };
  }
};
var GetWalletHistoryOperation = {
  operationId: "getWalletHistory",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/history",
  parameterNames: ["chain", "from_block", "to_block", "from_date", "to_date", "address", "include_internal_transactions", "nft_metadata", "cursor", "order", "limit"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletHistory.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var fromBlock = request.fromBlock;
    var toBlock = request.toBlock;
    var fromDate = request.fromDate;
    var toDate = request.toDate;
    var address = EvmAddress.create(request.address);
    var includeInternalTransactions = request.includeInternalTransactions;
    var nftMetadata = request.nftMetadata;
    var cursor = request.cursor;
    var order = request.order ? EvmOrderList.create(request.order) : void 0;
    var limit = request.limit;
    return {
      chain: chain ? chain.toJSON() : void 0,
      from_block: fromBlock,
      to_block: toBlock,
      from_date: fromDate !== void 0 ? fromDate.toISOString() : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      address: address.toJSON(),
      include_internal_transactions: includeInternalTransactions,
      nft_metadata: nftMetadata,
      cursor,
      order: order ? order : void 0,
      limit
    };
  }
};
var GetWalletTokenBalancesPriceOperation = {
  operationId: "getWalletTokenBalancesPrice",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/tokens",
  parameterNames: ["chain", "address", "to_block", "token_addresses", "exclude_spam", "exclude_unverified_contracts", "cursor", "limit", "exclude_native", "max_token_inactivity"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenBalanceWithPriceResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var toBlock = request.toBlock;
    var tokenAddresses = request.tokenAddresses ? request.tokenAddresses.map(function(item) {
      return EvmAddress.create(item);
    }) : void 0;
    var excludeSpam = request.excludeSpam;
    var excludeUnverifiedContracts = request.excludeUnverifiedContracts;
    var cursor = request.cursor;
    var limit = request.limit;
    var excludeNative = request.excludeNative;
    var maxTokenInactivity = request.maxTokenInactivity;
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      to_block: toBlock,
      token_addresses: tokenAddresses ? tokenAddresses.map(function(item) {
        return item.toJSON();
      }) : void 0,
      exclude_spam: excludeSpam,
      exclude_unverified_contracts: excludeUnverifiedContracts,
      cursor,
      limit,
      exclude_native: excludeNative,
      max_token_inactivity: maxTokenInactivity
    };
  }
};
var GetWalletNetWorthOperation = {
  operationId: "getWalletNetWorth",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/net-worth",
  parameterNames: ["chains", "address", "exclude_spam", "exclude_unverified_contracts", "max_token_inactivity"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNetWorthResult.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chains = request.chains ? request.chains.map(function(item) {
      return EvmChain.create(item);
    }) : void 0;
    var address = EvmAddress.create(request.address);
    var excludeSpam = request.excludeSpam;
    var excludeUnverifiedContracts = request.excludeUnverifiedContracts;
    var maxTokenInactivity = request.maxTokenInactivity;
    return {
      chains: chains ? chains.map(function(item) {
        return item.toJSON();
      }) : void 0,
      address: address.toJSON(),
      exclude_spam: excludeSpam,
      exclude_unverified_contracts: excludeUnverifiedContracts,
      max_token_inactivity: maxTokenInactivity
    };
  }
};
var Web3ApiVersionOperation = {
  operationId: "web3ApiVersion",
  groupName: "utils",
  httpMethod: "get",
  routePattern: "/web3/version",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWeb3version.fromJSON(json);
  },
  serializeRequest: function(request) {
    return {};
  }
};
var EndpointWeightsOperation = {
  operationId: "endpointWeights",
  groupName: "utils",
  httpMethod: "get",
  routePattern: "/info/endpointWeights",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmEndpointWeights.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var ResolveAddressToDomainOperation = {
  operationId: "resolveAddressToDomain",
  groupName: "resolve",
  httpMethod: "get",
  routePattern: "/resolve/{address}/domain",
  parameterNames: ["currency", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmUnstoppableDomain.fromJSON(json);
  },
  serializeRequest: function(request) {
    var currency = request.currency ? EvmResolveAddressToDomainCurrencyEnum.create(request.currency) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      currency: currency ? currency : void 0,
      address: address.toJSON()
    };
  }
};
var GetPairPriceOperation = {
  operationId: "getPairPrice",
  groupName: "defi",
  httpMethod: "get",
  routePattern: "/{token0_address}/{token1_address}/price",
  parameterNames: ["chain", "to_block", "to_date", "token0_address", "token1_address", "exchange"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmGetPairPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var toBlock = request.toBlock;
    var toDate = request.toDate;
    var token0Address = EvmAddress.create(request.token0Address);
    var token1Address = EvmAddress.create(request.token1Address);
    var exchange = request.exchange;
    return {
      chain: chain ? chain.toJSON() : void 0,
      to_block: toBlock !== void 0 ? String(toBlock) : void 0,
      to_date: toDate !== void 0 ? toDate.toISOString() : void 0,
      token0_address: token0Address.toJSON(),
      token1_address: token1Address.toJSON(),
      exchange
    };
  }
};
var GetTopERC20TokensByMarketCapOperation = {
  operationId: "getTopERC20TokensByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/erc20s/top-tokens",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataERC20TokenItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopERC20TokensByPriceMoversOperation = {
  operationId: "getTopERC20TokensByPriceMovers",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/erc20s/top-movers",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmMarketDataERC20TokensByPriceMovers.fromJSON(json);
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopNFTCollectionsByMarketCapOperation = {
  operationId: "getTopNFTCollectionsByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/nfts/top-collections",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopNFTCollectionByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetHottestNFTCollectionsByTradingVolumeOperation = {
  operationId: "getHottestNFTCollectionsByTradingVolume",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/nfts/hottest-collections",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataHottestNFTCollectionByTradingVolumeItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopCryptoCurrenciesByMarketCapOperation = {
  operationId: "getTopCryptoCurrenciesByMarketCap",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/global/market-cap",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var GetTopCryptoCurrenciesByTradingVolumeOperation = {
  operationId: "getTopCryptoCurrenciesByTradingVolume",
  groupName: "marketData",
  httpMethod: "get",
  routePattern: "/market-data/global/volume",
  parameterNames: [],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmMarketDataTopCryptoCurrenciesByMarketCapItem.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    return {};
  }
};
var ReviewContractsOperation = {
  operationId: "reviewContracts",
  groupName: "utils",
  httpMethod: "post",
  routePattern: "/contracts-review",
  parameterNames: ["chain"],
  hasResponse: true,
  hasBody: true,
  parseResponse: function(json) {
    return EvmReviewContracts.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    return {
      chain: chain ? chain.toJSON() : void 0
    };
  },
  serializeBody: function(body) {
    var value = EvmContractsReviewDto.create(body);
    return value.toJSON();
  }
};
var GetDefiSummaryOperation = {
  operationId: "getDefiSummary",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/defi/summary",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletDefiSummary.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetDefiPositionsByProtocolOperation = {
  operationId: "getDefiPositionsByProtocol",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/defi/{protocol}/positions",
  parameterNames: ["chain", "address", "protocol"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmGetDefiPositionsByProtocol.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var protocol = EvmDefiProtocolList.create(request.protocol);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      protocol
    };
  }
};
var GetDefiPositionsSummaryOperation = {
  operationId: "getDefiPositionsSummary",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/defi/positions",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return json.map(function(item) {
      return EvmDefiPositionSummaryResponse.fromJSON(item);
    });
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetWalletActiveChainsOperation = {
  operationId: "getWalletActiveChains",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/chains",
  parameterNames: ["address", "chains"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletActiveChains.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var chains = request.chains ? request.chains.map(function(item) {
      return EvmChain.create(item);
    }) : void 0;
    return {
      address: address.toJSON(),
      chains: chains ? chains.map(function(item) {
        return item.toJSON();
      }) : void 0
    };
  }
};
var GetWalletStatsOperation = {
  operationId: "getWalletStats",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetNFTCollectionStatsOperation = {
  operationId: "getNFTCollectionStats",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNftCollectionStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetNFTTokenStatsOperation = {
  operationId: "getNFTTokenStats",
  groupName: "nft",
  httpMethod: "get",
  routePattern: "/nft/{address}/{token_id}/stats",
  parameterNames: ["chain", "address", "token_id"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmNftTokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    var tokenId = request.tokenId;
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON(),
      token_id: tokenId
    };
  }
};
var GetTokenStatsOperation = {
  operationId: "getTokenStats",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/erc20/{address}/stats",
  parameterNames: ["chain", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmErc20TokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var address = EvmAddress.create(request.address);
    return {
      chain: chain ? chain.toJSON() : void 0,
      address: address.toJSON()
    };
  }
};
var GetBlockStatsOperation = {
  operationId: "getBlockStats",
  groupName: "block",
  httpMethod: "get",
  routePattern: "/block/{block_number_or_hash}/stats",
  parameterNames: ["chain", "block_number_or_hash"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmBlockTokenStat.fromJSON(json);
  },
  serializeRequest: function(request) {
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var blockNumberOrHash = request.blockNumberOrHash;
    return {
      chain: chain ? chain.toJSON() : void 0,
      block_number_or_hash: blockNumberOrHash
    };
  }
};
var GetWalletProfitabilitySummaryOperation = {
  operationId: "getWalletProfitabilitySummary",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/profitability/summary",
  parameterNames: ["address", "days", "chain"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmGetWalletProfitabilitySummary.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var days = request.days;
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    return {
      address: address.toJSON(),
      days,
      chain: chain ? chain.toJSON() : void 0
    };
  }
};
var GetWalletProfitabilityOperation = {
  operationId: "getWalletProfitability",
  groupName: "wallets",
  httpMethod: "get",
  routePattern: "/wallets/{address}/profitability",
  parameterNames: ["address", "days", "chain", "token_addresses"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletProfitabilityResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var days = request.days;
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    var tokenAddresses = request.tokenAddresses ? request.tokenAddresses.map(function(item) {
      return EvmAddress.create(item);
    }) : void 0;
    return {
      address: address.toJSON(),
      days,
      chain: chain ? chain.toJSON() : void 0,
      token_addresses: tokenAddresses ? tokenAddresses.map(function(item) {
        return item.toJSON();
      }) : void 0
    };
  }
};
var GetTopProfitableWalletPerTokenOperation = {
  operationId: "getTopProfitableWalletPerToken",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/erc20/{address}/top-gainers",
  parameterNames: ["address", "days", "chain"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return EvmWalletTopProfitableWalletPerTokenResponse.fromJSON(json);
  },
  serializeRequest: function(request) {
    var address = EvmAddress.create(request.address);
    var days = request.days;
    var chain = request.chain ? EvmChain.create(request.chain) : void 0;
    return {
      address: address.toJSON(),
      days,
      chain: chain ? chain.toJSON() : void 0
    };
  }
};
var CommonEvmUtilsConfig = {
  defaultEvmApiChain: {
    name: "defaultEvmApiChain",
    defaultValue: "0x1"
  }
};
var CommonEvmUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonEvmUtilsConfigSetup2() {
    }
    CommonEvmUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonEvmUtilsConfig.defaultEvmApiChain);
    };
    return CommonEvmUtilsConfigSetup2;
  }()
);
var CommonEvmUtils = (
  /** @class */
  function(_super) {
    __extends4(CommonEvmUtils2, _super);
    function CommonEvmUtils2(core2) {
      return _super.call(this, CommonEvmUtils2.moduleName, core2) || this;
    }
    CommonEvmUtils2.create = function(core2) {
      return new CommonEvmUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonEvmUtils2.prototype.setup = function() {
      CommonEvmUtilsConfigSetup.register(this.core.config);
    };
    CommonEvmUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmAddress", {
      get: function() {
        return EvmAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmChain", {
      get: function() {
        return EvmChain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonEvmUtils2.prototype, "EvmNative", {
      get: function() {
        return EvmNative;
      },
      enumerable: false,
      configurable: true
    });
    CommonEvmUtils2.moduleName = "evmUtils";
    return CommonEvmUtils2;
  }(Module)
);
var EvmChainResolver = (
  /** @class */
  function() {
    function EvmChainResolver2() {
    }
    EvmChainResolver2.resolve = function(chain, core2) {
      if (chain) {
        return EvmChain.create(chain);
      }
      var defaultEvmChain = core2.config.get(CommonEvmUtilsConfig.defaultEvmApiChain);
      return EvmChain.create(defaultEvmChain);
    };
    return EvmChainResolver2;
  }()
);
var getNativeBalanceOperation = {
  method: "GET",
  name: "getNativeBalance",
  id: "getNativeBalance",
  groupName: "balance",
  urlPathPattern: "/{address}/balance",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "toBlock"],
  getRequestUrlParams: getRequestUrlParams$H,
  serializeRequest: serializeRequest$H,
  deserializeRequest: deserializeRequest$H,
  deserializeResponse: deserializeResponse$H
};
function getRequestUrlParams$H(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: maybe(request.toBlock, String),
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeResponse$H(jsonResponse) {
  return {
    balance: EvmNative.create(jsonResponse.balance, "wei")
  };
}
function serializeRequest$H(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeRequest$H(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNativeBalancesForAddressesOperation = {
  method: "GET",
  name: "getNativeBalancesForAddresses",
  id: "getNativeBalancesForAddresses",
  groupName: "balance",
  urlPathPattern: "/wallets/balances",
  urlSearchParamNames: ["chain", "toBlock", "walletAddresses"],
  getRequestUrlParams: getRequestUrlParams$G,
  serializeRequest: serializeRequest$G,
  deserializeRequest: deserializeRequest$G,
  deserializeResponse: deserializeResponse$G
};
function getRequestUrlParams$G(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: maybe(request.toBlock, String),
    wallet_addresses: (_a2 = request.walletAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeResponse$G(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(chainBalances) {
    return {
      chain: EvmChainResolver.resolve(request.chain, core2),
      blockNumber: chainBalances.block_number,
      blockTimestamp: chainBalances.block_timestamp,
      totalBalance: EvmNative.create(chainBalances.total_balance, "wei"),
      walletBalances: chainBalances.wallet_balances.map(function(walletBalance) {
        return {
          address: EvmAddress.create(walletBalance.address),
          balance: EvmNative.create(walletBalance.balance, "wei")
        };
      })
    };
  });
}
function serializeRequest$G(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    walletAddresses: (_a2 = request.walletAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$G(jsonRequest, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(jsonRequest.chain, core2),
    toBlock: jsonRequest.toBlock,
    walletAddresses: (_a2 = jsonRequest.walletAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address);
    })
  };
}
var getBlockOperation = {
  method: "GET",
  name: "getBlock",
  id: "getBlock",
  groupName: "block",
  isNullable: true,
  urlPathPattern: "/block/{blockNumberOrHash}",
  urlPathParamNames: ["blockNumberOrHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$F,
  serializeRequest: serializeRequest$F,
  deserializeRequest: deserializeRequest$F,
  deserializeResponse: deserializeResponse$F
};
function getRequestUrlParams$F(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    blockNumberOrHash: request.blockNumberOrHash,
    include: request.include
  };
}
function deserializeResponse$F(jsonResponse, request, core2) {
  var _a2;
  var data = toCamelCase2(jsonResponse);
  var chain = EvmChainResolver.resolve(request.chain, core2);
  return EvmBlock.create(__assign3(__assign3({}, data), { chain, transactions: ((_a2 = data.transactions) !== null && _a2 !== void 0 ? _a2 : []).map(function(transaction) {
    var _a3, _b;
    return EvmTransaction.create({
      cumulativeGasUsed: transaction.receiptCumulativeGasUsed,
      gasPrice: transaction.gasPrice,
      gasUsed: transaction.receiptGasUsed,
      index: transaction.transactionIndex,
      contractAddress: transaction.receiptContractAddress,
      receiptRoot: transaction.receiptRoot,
      receiptStatus: +transaction.receiptStatus,
      chain,
      data: transaction.input,
      from: transaction.fromAddress,
      hash: transaction.hash,
      nonce: transaction.nonce,
      value: transaction.value,
      blockHash: transaction.blockHash,
      blockNumber: +transaction.blockNumber,
      blockTimestamp: new Date(transaction.blockTimestamp),
      gas: transaction.gas,
      to: transaction.toAddress,
      logs: ((_a3 = transaction.logs) !== null && _a3 !== void 0 ? _a3 : []).map(function(jsonLog) {
        var log = toCamelCase2(jsonLog);
        return EvmTransactionLog.create({
          chain,
          address: log.address,
          blockHash: log.blockHash,
          blockNumber: +log.blockNumber,
          data: log.data,
          topics: [log.topic0, log.topic1, log.topic2, log.topic3],
          transactionHash: log.transactionHash,
          blockTimestamp: log.blockTimestamp,
          logIndex: +log.logIndex,
          transactionIndex: +log.transactionIndex
        });
      }),
      internalTransactions: ((_b = transaction.internalTransactions) !== null && _b !== void 0 ? _b : []).map(function(jsonInternalTransaction) {
        var internalTransaction = toCamelCase2(jsonInternalTransaction);
        return EvmInternalTransaction.create(internalTransaction);
      })
    });
  }) }));
}
function serializeRequest$F(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    blockNumberOrHash: request.blockNumberOrHash,
    include: request.include
  };
}
function deserializeRequest$F(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    blockNumberOrHash: jsonRequest.blockNumberOrHash,
    include: jsonRequest.include
  };
}
var getDateToBlockOperation = {
  method: "GET",
  name: "getDateToBlock",
  id: "getDateToBlock",
  groupName: "block",
  urlPathPattern: "/dateToBlock",
  urlSearchParamNames: ["chain", "date"],
  getRequestUrlParams: getRequestUrlParams$E,
  serializeRequest: serializeRequest$E,
  deserializeRequest: deserializeRequest$E,
  deserializeResponse: deserializeResponse$E
};
function getRequestUrlParams$E(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    date: new Date(request.date).toISOString()
  };
}
function deserializeResponse$E(jsonResponse) {
  return EvmBlockDate.create(jsonResponse);
}
function serializeRequest$E(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    date: new Date(request.date).toISOString()
  };
}
function deserializeRequest$E(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    date: new Date(jsonRequest.date)
  };
}
var getPairAddressOperation = {
  method: "GET",
  name: "getPairAddress",
  id: "getPairAddress",
  groupName: "defi",
  urlPathPattern: "/{token0Address}/{token1Address}/pairAddress",
  urlPathParamNames: ["token0Address", "token1Address"],
  urlSearchParamNames: ["chain", "toBlock", "toDate", "exchange"],
  getRequestUrlParams: getRequestUrlParams$D,
  serializeRequest: serializeRequest$D,
  deserializeRequest: deserializeRequest$D,
  deserializeResponse: deserializeResponse$D
};
function getRequestUrlParams$D(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: request.toBlock,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    exchange: request.exchange,
    token0Address: EvmAddress.create(request.token0Address).lowercase,
    token1Address: EvmAddress.create(request.token1Address).lowercase
  };
}
function createErc20Token(token, core2, chain) {
  var _a2, _b, _c;
  return Erc20Token.create({
    contractAddress: (token === null || token === void 0 ? void 0 : token.address) ? EvmAddress.create(token === null || token === void 0 ? void 0 : token.address) : "",
    decimals: (_a2 = token === null || token === void 0 ? void 0 : token.decimals) !== null && _a2 !== void 0 ? _a2 : 0,
    name: (_b = token === null || token === void 0 ? void 0 : token.name) !== null && _b !== void 0 ? _b : "",
    symbol: (_c = token === null || token === void 0 ? void 0 : token.symbol) !== null && _c !== void 0 ? _c : "",
    logo: token === null || token === void 0 ? void 0 : token.logo,
    thumbnail: token === null || token === void 0 ? void 0 : token.thumbnail,
    chain: EvmChainResolver.resolve(chain, core2)
  });
}
function deserializeResponse$D(jsonResponse, request, core2) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  return {
    //   ApiResult types generated all come as undefined which should not be the case TODO:
    token0: {
      token: createErc20Token(jsonResponse.token0, core2, request.chain),
      blockNumber: (_a2 = jsonResponse.token0) === null || _a2 === void 0 ? void 0 : _a2.block_number,
      validated: (_b = jsonResponse.token0) === null || _b === void 0 ? void 0 : _b.validated,
      createdAt: ((_c = jsonResponse.token0) === null || _c === void 0 ? void 0 : _c.created_at) ? new Date((_d = jsonResponse.token0) === null || _d === void 0 ? void 0 : _d.created_at) : void 0
    },
    token1: {
      token: createErc20Token(jsonResponse.token1, core2, request.chain),
      blockNumber: (_e = jsonResponse.token1) === null || _e === void 0 ? void 0 : _e.block_number,
      validated: (_f = jsonResponse.token1) === null || _f === void 0 ? void 0 : _f.validated,
      createdAt: ((_g = jsonResponse.token1) === null || _g === void 0 ? void 0 : _g.created_at) ? new Date((_h = jsonResponse.token1) === null || _h === void 0 ? void 0 : _h.created_at) : void 0
    },
    pairAddress: jsonResponse.pairAddress ? EvmAddress.create(jsonResponse.pairAddress) : void 0
  };
}
function serializeRequest$D(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    exchange: request.exchange,
    token0Address: EvmAddress.create(request.token0Address).lowercase,
    token1Address: EvmAddress.create(request.token1Address).lowercase
  };
}
function deserializeRequest$D(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    exchange: jsonRequest.exchange,
    token0Address: EvmAddress.create(jsonRequest.token0Address),
    token1Address: EvmAddress.create(jsonRequest.token1Address)
  };
}
var getPairReservesOperation = {
  method: "GET",
  name: "getPairReserves",
  id: "getPairReserves",
  groupName: "defi",
  urlPathPattern: "/{pairAddress}/reserves",
  urlPathParamNames: ["pairAddress"],
  urlSearchParamNames: ["chain", "toBlock", "toDate"],
  getRequestUrlParams: getRequestUrlParams$C,
  serializeRequest: serializeRequest$C,
  deserializeRequest: deserializeRequest$C,
  deserializeResponse: deserializeResponse$C
};
function getRequestUrlParams$C(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    pairAddress: EvmAddress.create(request.pairAddress).lowercase,
    to_block: request.toBlock,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0
  };
}
function serializeRequest$C(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    toBlock: request.toBlock,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    pairAddress: EvmAddress.create(request.pairAddress).lowercase
  };
}
function deserializeRequest$C(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    toBlock: jsonRequest.toBlock,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    pairAddress: EvmAddress.create(jsonRequest.pairAddress)
  };
}
function deserializeResponse$C(jsonResponse) {
  return jsonResponse;
}
var getContractEventsOperation = {
  method: "POST",
  name: "getContractEvents",
  id: "getContractEvents",
  groupName: "events",
  urlPathPattern: "/{address}/events",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "topic",
    "offset",
    "limit",
    "cursor",
    "order"
  ],
  bodyParamNames: ["abi"],
  bodyType: "raw",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$B,
  getRequestBody: getRequestBody$3,
  serializeRequest: serializeRequest$B,
  deserializeRequest: deserializeRequest$B,
  deserializeResponse: deserializeResponse$B
};
function getRequestUrlParams$B(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic: request.topic,
    offset: maybe(request.offset, String),
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    cursor: request.cursor,
    order: request.order
  };
}
function getRequestBody$3(request) {
  return request.abi;
}
function deserializeResponse$B(jsonResponse, request, core2) {
  var _a2, _b;
  return (_b = (_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []) === null || _b === void 0 ? void 0 : _b.map(function(event) {
    return EvmEvent.create({
      chain: EvmChainResolver.resolve(request.chain, core2),
      address: request.address,
      blockHash: event.block_hash,
      blockNumber: event.block_number,
      blockTimestamp: event.block_timestamp,
      transactionHash: event.transaction_hash,
      data: {
        to: event.data.to,
        from: event.data.from,
        value: maybe(event.data.value, function(value) {
          return EvmNative.create(value, "wei");
        })
      }
    });
  });
}
function serializeRequest$B(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic: request.topic,
    offset: request.offset,
    limit: request.limit,
    address: EvmAddress.create(request.address).lowercase,
    abi: request.abi,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$B(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    topic: jsonRequest.topic,
    offset: jsonRequest.offset,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    abi: jsonRequest.abi,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getContractLogsOperation = {
  method: "GET",
  name: "getContractLogs",
  id: "getContractLogs",
  groupName: "events",
  urlPathPattern: "/{address}/logs",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "blockNumber",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "topic0",
    "limit",
    "cursor",
    "order"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$A,
  serializeRequest: serializeRequest$A,
  deserializeRequest: deserializeRequest$A,
  deserializeResponse: deserializeResponse$A
};
function getRequestUrlParams$A(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    block_number: request.blockNumber,
    from_block: request.fromBlock,
    to_block: request.toBlock,
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic0: request.topic0,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    address: EvmAddress.create(request.address).lowercase,
    order: request.order
  };
}
function serializeRequest$A(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    blockNumber: request.blockNumber,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    topic0: request.topic0,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).lowercase,
    order: request.order
  };
}
function deserializeRequest$A(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    blockNumber: jsonRequest.blockNumber,
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    topic0: jsonRequest.topic0,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    order: jsonRequest.order
  };
}
function deserializeResponse$A(jsonResponse, request, core2) {
  var _a2, _b;
  return (_b = (_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []) === null || _b === void 0 ? void 0 : _b.map(function(log) {
    return EvmTransactionLog.create(__assign3(__assign3({}, toCamelCase2(log)), { topics: [log.topic0, log.topic1, log.topic2, log.topic3], blockNumber: Number(log.block_number), chain: EvmChainResolver.resolve(request.chain, core2) }));
  });
}
var uploadFolderOperation = {
  method: "POST",
  name: "uploadFolder",
  id: "uploadFolder",
  groupName: "ipfs",
  urlPathPattern: "/ipfs/uploadFolder",
  bodyType: "raw",
  bodyParamNames: ["abi"],
  getRequestUrlParams: getRequestUrlParams$z,
  serializeRequest: serializeRequest$z,
  deserializeRequest: deserializeRequest$z,
  deserializeResponse: deserializeResponse$z,
  getRequestBody: getRequestBody$2
};
function getRequestUrlParams$z(_) {
  return {};
}
function getRequestBody$2(request) {
  return request.abi;
}
function deserializeResponse$z(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$z(request) {
  return {
    abi: JSON.stringify(request.abi)
  };
}
function deserializeRequest$z(jsonRequest) {
  return {
    abi: JSON.parse(jsonRequest.abi)
  };
}
var getContractNFTsOperation = {
  method: "GET",
  name: "getContractNFTs",
  id: "getContractNFTs",
  groupName: "nft",
  urlPathPattern: "/nft/{address}",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "limit",
    "totalRanges",
    "range",
    "cursor",
    "normalizeMetadata",
    "mediaItems"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$y,
  serializeRequest: serializeRequest$y,
  deserializeRequest: deserializeRequest$y,
  deserializeResponse: deserializeResponse$y
};
function getRequestUrlParams$y(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    totalRanges: maybe(request.totalRanges, String),
    range: maybe(request.range, String),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$y(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase2(data);
    return EvmNft.create(__assign3(__assign3({}, toCamelCase2(nft)), { chain, ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : void 0, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : void 0, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : void 0, media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase2(media)));
    }) }));
  });
}
function serializeRequest$y(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    totalRanges: request.totalRanges,
    range: request.range,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$y(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    totalRanges: jsonRequest.totalRanges,
    range: jsonRequest.range,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getMultipleNFTsOperation = {
  method: "POST",
  name: "getMultipleNFTs",
  id: "getMultipleNFTs",
  groupName: "nft",
  urlPathPattern: "/nft/getMultipleNFTs",
  urlSearchParamNames: ["chain"],
  bodyType: "properties",
  bodyParamNames: ["tokens", "normalizeMetadata", "mediaItems"],
  getRequestUrlParams: getRequestUrlParams$x,
  getRequestBody: getRequestBody$1,
  serializeRequest: serializeRequest$x,
  deserializeRequest: deserializeRequest$x,
  deserializeResponse: deserializeResponse$x
};
function getRequestUrlParams$x(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex
  };
}
function getRequestBody$1(request) {
  return {
    tokens: request.tokens.map(function(token) {
      return {
        token_address: EvmAddress.create(token.tokenAddress).lowercase,
        token_id: token.tokenId
      };
    }),
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$x(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(data) {
    if (data === null) {
      return null;
    }
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase2(data);
    return EvmNft.create(__assign3(__assign3({}, toCamelCase2(nft)), { chain: EvmChainResolver.resolve(request.chain, core2), amount: nft.amount ? parseInt(nft.amount, 10) : void 0, ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: dateInputToDate(nft.lastMetadataSync), lastTokenUriSync: dateInputToDate(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase2(media)));
    }) }));
  });
}
function serializeRequest$x(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    normalizeMetadata: request.normalizeMetadata,
    tokens: request.tokens.map(function(token) {
      return {
        tokenAddress: EvmAddress.create(token.tokenAddress).lowercase,
        tokenId: token.tokenId
      };
    }),
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$x(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    tokens: jsonRequest.tokens.map(function(token) {
      return {
        tokenAddress: EvmAddress.create(token.tokenAddress),
        tokenId: token.tokenId
      };
    }),
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTContractMetadataOperation = {
  method: "GET",
  name: "getNFTContractMetadata",
  id: "getNFTContractMetadata",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/metadata",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$w,
  serializeRequest: serializeRequest$w,
  deserializeRequest: deserializeRequest$w,
  deserializeResponse: deserializeResponse$w
};
function getRequestUrlParams$w(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$w(jsonResponse, request, core2) {
  return EvmNftMetadata.create(__assign3(__assign3({}, toCamelCase2(jsonResponse)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(jsonResponse.token_address), syncedAt: jsonResponse.synced_at ? new Date(jsonResponse.synced_at) : null, contractType: maybe(jsonResponse.contract_type) }));
}
function serializeRequest$w(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$w(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTContractTransfersOperation = {
  method: "GET",
  name: "getNFTContractTransfers",
  id: "getNFTContractTransfers",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "fromBlock", "fromDate", "toBlock", "toDate", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$v,
  serializeRequest: serializeRequest$v,
  deserializeRequest: deserializeRequest$v,
  deserializeResponse: deserializeResponse$v
};
function getRequestUrlParams$v(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    from_block: maybe(request.fromBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_block: maybe(request.toBlock, String),
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$v(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase2(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$v(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    toDate: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    order: request.order
  };
}
function deserializeRequest$v(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate ? new Date(jsonRequest.fromDate) : void 0,
    toDate: jsonRequest.toDate ? new Date(jsonRequest.toDate) : void 0,
    order: jsonRequest.order
  };
}
var getNFTLowestPriceOperation = {
  method: "GET",
  name: "getNFTLowestPrice",
  id: "getNFTLowestPrice",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/lowestprice",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "days", "marketplace"],
  getRequestUrlParams: getRequestUrlParams$u,
  serializeRequest: serializeRequest$u,
  deserializeRequest: deserializeRequest$u,
  deserializeResponse: deserializeResponse$u
};
function getRequestUrlParams$u(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    days: maybe(request.days, String),
    marketplace: request.marketplace
  };
}
function deserializeResponse$u(jsonResponse) {
  return EvmTrade.fromJSON(jsonResponse);
}
function serializeRequest$u(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    days: request.days,
    marketplace: request.marketplace,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$u(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    days: jsonRequest.days,
    marketplace: jsonRequest.marketplace,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTMetadataOperation = {
  method: "GET",
  name: "getNFTMetadata",
  id: "getNFTMetadata",
  groupName: "nft",
  isNullable: true,
  urlPathPattern: "/nft/{address}/{tokenId}",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "normalizeMetadata", "mediaItems"],
  getRequestUrlParams: getRequestUrlParams$t,
  serializeRequest: serializeRequest$t,
  deserializeRequest: deserializeRequest$t,
  deserializeResponse: deserializeResponse$t
};
function getRequestUrlParams$t(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    tokenId: request.tokenId,
    format: request.format,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$t(jsonResponse, request, core2) {
  var chain = EvmChainResolver.resolve(request.chain, core2);
  var nft = toCamelCase2(jsonResponse);
  return EvmNft.create(__assign3(__assign3({}, nft), { chain: EvmChainResolver.resolve(request.chain, core2), ownerOf: nft.ownerOf ? EvmAddress.create(nft.ownerOf) : void 0, lastMetadataSync: nft.lastMetadataSync ? new Date(nft.lastMetadataSync) : void 0, lastTokenUriSync: nft.lastTokenUriSync ? new Date(nft.lastTokenUriSync) : void 0, media: maybe(nft.media, function(media) {
    return EvmNftMedia.create(__assign3({ chain }, toCamelCase2(media)));
  }) }));
}
function serializeRequest$t(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$t(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTOwnersOperation = {
  method: "GET",
  name: "getNFTOwners",
  id: "getNFTOwners",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/owners",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "normalizeMetadata", "mediaItems"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$s,
  serializeRequest: serializeRequest$s,
  deserializeRequest: deserializeRequest$s,
  deserializeResponse: deserializeResponse$s
};
function getRequestUrlParams$s(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$s(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase2(data);
    return EvmNft.create(__assign3(__assign3({}, nft), { chain: EvmChainResolver.resolve(request.chain, core2), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase2(media)));
    }) }));
  });
}
function serializeRequest$s(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$s(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTTokenIdOwnersOperation = {
  method: "GET",
  name: "getNFTTokenIdOwners",
  id: "getNFTTokenIdOwners",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/owners",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "normalizeMetadata", "mediaItems"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$r,
  serializeRequest: serializeRequest$r,
  deserializeRequest: deserializeRequest$r,
  deserializeResponse: deserializeResponse$r
};
function getRequestUrlParams$r(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems
  };
}
function deserializeResponse$r(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var chain = EvmChainResolver.resolve(request.chain, core2);
    var nft = toCamelCase2(data);
    return EvmNft.create(__assign3(__assign3({}, toCamelCase2(nft)), { chain: EvmChainResolver.resolve(request.chain, core2), ownerOf: EvmAddress.create(nft.ownerOf), lastMetadataSync: new Date(nft.lastMetadataSync), lastTokenUriSync: new Date(nft.lastTokenUriSync), media: maybe(nft.media, function(media) {
      return EvmNftMedia.create(__assign3({ chain }, toCamelCase2(media)));
    }) }));
  });
}
function serializeRequest$r(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems
  };
}
function deserializeRequest$r(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems
  };
}
var getNFTTradesOperation = {
  method: "GET",
  name: "getNFTTrades",
  id: "getNFTTrades",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/trades",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "marketplace", "cursor", "limit"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$q,
  serializeRequest: serializeRequest$q,
  deserializeRequest: deserializeRequest$q,
  deserializeResponse: deserializeResponse$q
};
function getRequestUrlParams$q(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    marketplace: request.marketplace,
    cursor: request.cursor,
    limit: maybe(request.limit, String)
  };
}
function deserializeResponse$q(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(trade) {
    return EvmTrade.fromJSON(trade);
  });
}
function serializeRequest$q(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    marketplace: request.marketplace,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$q(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    marketplace: jsonRequest.marketplace,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getNFTTransfersByBlockOperation = {
  method: "GET",
  name: "getNFTTransfersByBlock",
  id: "getNFTTransfersByBlock",
  groupName: "nft",
  urlPathPattern: "/block/{blockNumberOrHash}/nft/transfers",
  urlPathParamNames: ["blockNumberOrHash"],
  urlSearchParamNames: ["chain", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$p,
  serializeRequest: serializeRequest$p,
  deserializeRequest: deserializeRequest$p,
  deserializeResponse: deserializeResponse$p
};
function getRequestUrlParams$p(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    blockNumberOrHash: request.blockNumberOrHash,
    order: request.order
  };
}
function deserializeResponse$p(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase2(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$p(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    limit: request.limit,
    cursor: request.cursor,
    blockNumberOrHash: request.blockNumberOrHash,
    order: request.order
  };
}
function deserializeRequest$p(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    blockNumberOrHash: jsonRequest.blockNumberOrHash,
    order: jsonRequest.order
  };
}
var getNFTTransfersFromToBlockOperation = {
  method: "GET",
  name: "getNFTTransfersFromToBlock",
  id: "getNFTTransfersFromToBlock",
  groupName: "nft",
  urlPathPattern: "/nft/transfers",
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "format", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$o,
  serializeRequest: serializeRequest$o,
  deserializeRequest: deserializeRequest$o,
  deserializeResponse: deserializeResponse$o
};
function getRequestUrlParams$o(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$o(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase2(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$o(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$o(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getNFTTransfersOperation = {
  method: "GET",
  name: "getNFTTransfers",
  id: "getNFTTransfers",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/transfers",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "format", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$n,
  serializeRequest: serializeRequest$n,
  deserializeRequest: deserializeRequest$n,
  deserializeResponse: deserializeResponse$n
};
function getRequestUrlParams$n(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    tokenId: request.tokenId,
    order: request.order
  };
}
function deserializeResponse$n(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase2(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.to_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$n(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId,
    order: request.order
  };
}
function deserializeRequest$n(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId,
    order: jsonRequest.order
  };
}
var getWalletNFTCollectionsOperation = {
  method: "GET",
  name: "getWalletNFTCollections",
  id: "getWalletNFTCollections",
  groupName: "nft",
  urlPathPattern: "/{address}/nft/collections",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "limit", "cursor", "excludeSpam", "tokenCounts"],
  firstPageIndex: 1,
  getRequestUrlParams: getRequestUrlParams$m,
  serializeRequest: serializeRequest$m,
  deserializeRequest: deserializeRequest$m,
  deserializeResponse: deserializeResponse$m
};
function getRequestUrlParams$m(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    exclude_spam: request.excludeSpam,
    token_counts: request.tokenCounts
  };
}
function deserializeResponse$m(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(collection) {
    return EvmNftCollection.create(__assign3(__assign3({}, toCamelCase2(collection)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(collection.token_address) }));
  });
}
function serializeRequest$m(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    excludeSpam: request.excludeSpam,
    tokenCounts: request.tokenCounts
  };
}
function deserializeRequest$m(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    excludeSpam: jsonRequest.excludeSpam,
    tokenCounts: jsonRequest.tokenCounts
  };
}
var getWalletNFTsOperation = {
  method: "GET",
  name: "getWalletNFTs",
  id: "getWalletNFTs",
  groupName: "nft",
  firstPageIndex: 1,
  urlPathPattern: "/{address}/nft",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "limit",
    "tokenAddresses",
    "cursor",
    "normalizeMetadata",
    "mediaItems",
    "excludeSpam"
  ],
  getRequestUrlParams: getRequestUrlParams$l,
  serializeRequest: serializeRequest$l,
  deserializeRequest: deserializeRequest$l,
  deserializeResponse: deserializeResponse$l
};
function getRequestUrlParams$l(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    limit: maybe(request.limit, String),
    token_addresses: (_a2 = request.tokenAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }),
    cursor: request.cursor,
    normalizeMetadata: request.normalizeMetadata,
    media_items: request.mediaItems,
    exclude_spam: request.excludeSpam
  };
}
function deserializeResponse$l(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(data) {
    var nft = toCamelCase2(data);
    var chain = EvmChainResolver.resolve(request.chain, core2);
    return EvmNft.create({
      chain,
      contractType: nft.contractType,
      tokenAddress: nft.tokenAddress,
      tokenId: nft.tokenId,
      tokenUri: nft.tokenUri,
      metadata: nft.metadata,
      name: nft.name,
      symbol: nft.symbol,
      amount: nft.amount ? parseInt(nft.amount, 10) : void 0,
      blockNumberMinted: nft.blockNumberMinted,
      blockNumber: nft.blockNumber,
      ownerOf: EvmAddress.create(nft.ownerOf),
      tokenHash: nft.tokenHash,
      lastMetadataSync: dateInputToDate(nft.lastMetadataSync),
      lastTokenUriSync: dateInputToDate(nft.lastTokenUriSync),
      possibleSpam: nft.possibleSpam,
      media: maybe(nft.media, function(media) {
        return EvmNftMedia.create(__assign3({ chain }, toCamelCase2(media)));
      })
    });
  });
}
function serializeRequest$l(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    limit: request.limit,
    tokenAddresses: (_a2 = request.tokenAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).checksum;
    }),
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    normalizeMetadata: request.normalizeMetadata,
    mediaItems: request.mediaItems,
    excludeSpam: request.excludeSpam
  };
}
function deserializeRequest$l(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    limit: jsonRequest.limit,
    tokenAddresses: maybe(jsonRequest.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address);
      });
    }),
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    normalizeMetadata: jsonRequest.normalizeMetadata,
    mediaItems: jsonRequest.mediaItems,
    excludeSpam: jsonRequest.excludeSpam
  };
}
var getWalletNFTTransfersOperation = {
  method: "GET",
  name: "getWalletNFTTransfers",
  id: "getWalletNFTTransfers",
  groupName: "nft",
  urlPathPattern: "/{address}/nft/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "format",
    "fromBlock",
    "toBlock",
    "limit",
    "cursor",
    "fromDate",
    "toDate",
    "order",
    "contractAddresses"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$k,
  serializeRequest: serializeRequest$k,
  deserializeRequest: deserializeRequest$k,
  deserializeResponse: deserializeResponse$k
};
function getRequestUrlParams$k(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    format: request.format,
    from_block: maybe(request.fromBlock, String),
    to_block: request.toBlock,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    from_date: maybe(request.fromDate, function(date) {
      return new Date(date).toISOString();
    }),
    to_date: maybe(request.toDate, function(date) {
      return new Date(date).toISOString();
    }),
    order: request.order,
    contract_addresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$k(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return EvmNftTransfer.create(__assign3(__assign3({}, toCamelCase2(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), tokenAddress: EvmAddress.create(transfer.token_address), toAddress: EvmAddress.create(transfer.to_address), operator: transfer.operator ? EvmAddress.create(transfer.operator) : null, fromAddress: transfer.from_address ? EvmAddress.create(transfer.from_address) : null, value: transfer.value ? EvmNative.create(transfer.value, "wei") : null, blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$k(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    format: request.format,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    limit: request.limit,
    cursor: request.cursor,
    address: EvmAddress.create(request.address).checksum,
    fromDate: maybe(request.fromDate, function(date) {
      return new Date(date).toISOString();
    }),
    toDate: maybe(request.toDate, function(date) {
      return new Date(date).toISOString();
    }),
    order: request.order,
    contractAddresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeRequest$k(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    format: jsonRequest.format,
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    address: EvmAddress.create(jsonRequest.address),
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    order: jsonRequest.order,
    contractAddresses: jsonRequest.contractAddresses ? jsonRequest.contractAddresses.map(EvmAddress.create) : void 0
  };
}
var reSyncMetadataOperation = {
  method: "GET",
  name: "reSyncMetadata",
  id: "reSyncMetadata",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/{tokenId}/metadata/resync",
  urlPathParamNames: ["address", "tokenId"],
  urlSearchParamNames: ["chain", "flag", "mode"],
  getRequestUrlParams: getRequestUrlParams$j,
  serializeRequest: serializeRequest$j,
  deserializeRequest: deserializeRequest$j,
  deserializeResponse: deserializeResponse$j
};
function getRequestUrlParams$j(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    flag: request.flag,
    mode: request.mode,
    tokenId: request.tokenId
  };
}
function serializeRequest$j(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    flag: request.flag,
    mode: request.mode,
    address: EvmAddress.create(request.address).checksum,
    tokenId: request.tokenId
  };
}
function deserializeRequest$j(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    flag: jsonRequest.flag,
    mode: jsonRequest.mode,
    address: EvmAddress.create(jsonRequest.address),
    tokenId: jsonRequest.tokenId
  };
}
function deserializeResponse$j(jsonResponse) {
  return jsonResponse;
}
var syncNFTContractOperation = {
  method: "PUT",
  name: "syncNFTContract",
  id: "syncNFTContract",
  groupName: "nft",
  urlPathPattern: "/nft/{address}/sync",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$i,
  serializeRequest: serializeRequest$i,
  deserializeRequest: deserializeRequest$i,
  deserializeResponse: deserializeResponse$i
};
function getRequestUrlParams$i(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$i() {
  return {
    success: true
  };
}
function serializeRequest$i(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$i(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var resolveAddressOperation = {
  method: "GET",
  name: "resolveAddress",
  id: "resolveAddress",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/{address}/reverse",
  urlPathParamNames: ["address"],
  getRequestUrlParams: getRequestUrlParams$h,
  serializeRequest: serializeRequest$h,
  deserializeRequest: deserializeRequest$h,
  deserializeResponse: deserializeResponse$h
};
function getRequestUrlParams$h(request) {
  return {
    address: maybe(request.address, function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeResponse$h(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$h(request) {
  return {
    address: maybe(request.address, function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$h(jsonRequest) {
  return {
    address: maybe(jsonRequest.address, function(address) {
      return EvmAddress.create(address);
    })
  };
}
var resolveDomainOperation = {
  method: "GET",
  name: "resolveDomain",
  id: "resolveDomain",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/{domain}",
  urlPathParamNames: ["domain"],
  urlSearchParamNames: ["currency"],
  getRequestUrlParams: getRequestUrlParams$g,
  serializeRequest: serializeRequest$g,
  deserializeRequest: deserializeRequest$g,
  deserializeResponse: deserializeResponse$g
};
function getRequestUrlParams$g(request) {
  return {
    currency: request.currency,
    domain: request.domain
  };
}
function serializeRequest$g(request) {
  return {
    currency: request.currency,
    domain: request.domain
  };
}
function deserializeRequest$g(jsonRequest) {
  return {
    currency: jsonRequest.currency,
    domain: jsonRequest.domain
  };
}
function deserializeResponse$g(jsonResponse) {
  return {
    address: EvmAddress.create(jsonResponse.address)
  };
}
var resolveENSDomainOperation = {
  method: "GET",
  name: "resolveENSDomain",
  id: "resolveENSDomain",
  groupName: "resolve",
  isNullable: true,
  urlPathPattern: "/resolve/ens/{domain}",
  urlPathParamNames: ["domain"],
  getRequestUrlParams: getRequestUrlParams$f,
  serializeRequest: serializeRequest$f,
  deserializeRequest: deserializeRequest$f,
  deserializeResponse: deserializeResponse$f
};
function getRequestUrlParams$f(request) {
  return {
    domain: request.domain
  };
}
function serializeRequest$f(request) {
  return {
    domain: request.domain
  };
}
function deserializeRequest$f(jsonRequest) {
  return {
    domain: jsonRequest.domain
  };
}
function deserializeResponse$f(jsonResponse) {
  return {
    address: EvmAddress.create(jsonResponse.address)
  };
}
var getTokenAllowanceOperation = {
  method: "GET",
  name: "getTokenAllowance",
  id: "getTokenAllowance",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/allowance",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "ownerAddress", "spenderAddress"],
  getRequestUrlParams: getRequestUrlParams$e,
  serializeRequest: serializeRequest$e,
  deserializeRequest: deserializeRequest$e,
  deserializeResponse: deserializeResponse$e
};
function getRequestUrlParams$e(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    owner_address: EvmAddress.create(request.ownerAddress).lowercase,
    spender_address: EvmAddress.create(request.spenderAddress).lowercase,
    address: EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$e(jsonResponse) {
  return {
    allowance: BigNumber.create(jsonResponse.allowance)
  };
}
function serializeRequest$e(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    ownerAddress: EvmAddress.create(request.ownerAddress).checksum,
    spenderAddress: EvmAddress.create(request.spenderAddress).checksum,
    address: EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$e(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    ownerAddress: EvmAddress.create(jsonRequest.ownerAddress),
    spenderAddress: EvmAddress.create(jsonRequest.spenderAddress),
    address: EvmAddress.create(jsonRequest.address)
  };
}
var getTokenMetadataBySymbolOperation = {
  method: "GET",
  name: "getTokenMetadataBySymbol",
  id: "getTokenMetadataBySymbol",
  groupName: "token",
  urlPathPattern: "/erc20/metadata/symbols",
  urlSearchParamNames: ["chain", "symbols"],
  getRequestUrlParams: getRequestUrlParams$d,
  serializeRequest: serializeRequest$d,
  deserializeRequest: deserializeRequest$d,
  deserializeResponse: deserializeResponse$d
};
function getRequestUrlParams$d(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    symbols: request.symbols
  };
}
function deserializeResponse$d(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return {
      token: Erc20Token.create(__assign3(__assign3({}, toCamelCase2(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core2) })),
      blockNumber: token.block_number,
      validated: token.validated
    };
  });
}
function serializeRequest$d(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    symbols: request.symbols
  };
}
function deserializeRequest$d(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    symbols: jsonRequest.symbols
  };
}
var getTokenMetadataOperation = {
  method: "GET",
  name: "getTokenMetadata",
  id: "getTokenMetadata",
  groupName: "token",
  urlPathPattern: "/erc20/metadata",
  urlSearchParamNames: ["chain", "addresses"],
  getRequestUrlParams: getRequestUrlParams$c,
  serializeRequest: serializeRequest$c,
  deserializeRequest: deserializeRequest$c,
  deserializeResponse: deserializeResponse$c
};
function getRequestUrlParams$c(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    addresses: request.addresses.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$c(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return {
      token: Erc20Token.create(__assign3(__assign3({}, toCamelCase2(token)), { contractAddress: token.address, chain: EvmChainResolver.resolve(request.chain, core2) })),
      blockNumber: token.block_number,
      validated: token.validated
    };
  });
}
function serializeRequest$c(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    addresses: request.addresses.map(function(address) {
      return EvmAddress.create(address).checksum;
    })
  };
}
function deserializeRequest$c(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    addresses: jsonRequest.addresses.map(function(address) {
      return EvmAddress.create(address);
    })
  };
}
var getTokenPriceOperation = {
  method: "GET",
  name: "getTokenPrice",
  id: "getTokenPrice",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/price",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "exchange", "toBlock", "include"],
  getRequestUrlParams: getRequestUrlParams$b,
  serializeRequest: serializeRequest$b,
  deserializeRequest: deserializeRequest$b,
  deserializeResponse: deserializeResponse$b
};
function getRequestUrlParams$b(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    exchange: request.exchange,
    to_block: maybe(request.toBlock, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include
  };
}
function deserializeResponse$b(jsonResponse) {
  var _a2, _b, _c;
  return __assign3(__assign3({}, toCamelCase2(jsonResponse)), { nativePrice: ((_a2 = jsonResponse.nativePrice) === null || _a2 === void 0 ? void 0 : _a2.value) ? EvmNative.create((_b = jsonResponse.nativePrice) === null || _b === void 0 ? void 0 : _b.value, (_c = jsonResponse.nativePrice) === null || _c === void 0 ? void 0 : _c.decimals) : null, exchangeAddress: jsonResponse.exchangeAddress ? EvmAddress.create(jsonResponse.exchangeAddress) : null });
}
function serializeRequest$b(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    exchange: request.exchange,
    toBlock: request.toBlock,
    address: EvmAddress.create(request.address).checksum,
    include: request.include
  };
}
function deserializeRequest$b(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    exchange: jsonRequest.exchange,
    toBlock: jsonRequest.toBlock,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include
  };
}
var getTokenTransfersOperation = {
  method: "GET",
  name: "getTokenTransfers",
  id: "getTokenTransfers",
  groupName: "token",
  urlPathPattern: "/erc20/{address}/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "limit", "cursor", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$a,
  serializeRequest: serializeRequest$a,
  deserializeRequest: deserializeRequest$a,
  deserializeResponse: deserializeResponse$a
};
function getRequestUrlParams$a(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeResponse$a(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return Erc20Transaction.create(__assign3(__assign3({}, toCamelCase2(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$a(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    cursor: request.cursor,
    order: request.order
  };
}
function deserializeRequest$a(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    cursor: jsonRequest.cursor,
    order: jsonRequest.order
  };
}
var getWalletTokenBalancesOperation = {
  method: "GET",
  name: "getWalletTokenBalances",
  id: "getWalletTokenBalances",
  groupName: "token",
  urlPathPattern: "/{address}/erc20",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "toBlock", "tokenAddresses", "excludeSpam"],
  getRequestUrlParams: getRequestUrlParams$9,
  serializeRequest: serializeRequest$9,
  deserializeRequest: deserializeRequest$9,
  deserializeResponse: deserializeResponse$9
};
function getRequestUrlParams$9(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    to_block: maybe(request.toBlock, String),
    token_addresses: maybe(request.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address).lowercase;
      });
    }),
    address: EvmAddress.create(request.address).lowercase,
    exclude_spam: request.excludeSpam
  };
}
function deserializeResponse$9(jsonResponse, request, core2) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(token) {
    return Erc20Value.create(token.balance, {
      decimals: token.decimals,
      token: {
        decimals: token.decimals,
        name: token.name,
        symbol: token.symbol,
        contractAddress: token.token_address,
        logo: token.logo,
        thumbnail: token.thumbnail,
        chain: EvmChainResolver.resolve(request.chain, core2),
        possibleSpam: token.possible_spam
      }
    });
  });
}
function serializeRequest$9(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    tokenAddresses: maybe(request.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address).checksum;
      });
    }),
    address: EvmAddress.create(request.address).checksum,
    toBlock: request.toBlock,
    excludeSpam: request.excludeSpam
  };
}
function deserializeRequest$9(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    tokenAddresses: maybe(jsonRequest.tokenAddresses, function(addresses) {
      return addresses.map(function(address) {
        return EvmAddress.create(address);
      });
    }),
    address: EvmAddress.create(jsonRequest.address),
    toBlock: jsonRequest.toBlock,
    excludeSpam: jsonRequest.excludeSpam
  };
}
var getWalletTokenTransfersOperation = {
  method: "GET",
  name: "getWalletTokenTransfers",
  id: "getWalletTokenTransfers",
  groupName: "token",
  urlPathPattern: "/{address}/erc20/transfers",
  urlPathParamNames: ["address"],
  urlSearchParamNames: [
    "chain",
    "fromBlock",
    "toBlock",
    "fromDate",
    "toDate",
    "limit",
    "cursor",
    "order",
    "contractAddresses"
  ],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$8,
  serializeRequest: serializeRequest$8,
  deserializeRequest: deserializeRequest$8,
  deserializeResponse: deserializeResponse$8
};
function getRequestUrlParams$8(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).lowercase,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    limit: maybe(request.limit, String),
    cursor: request.cursor,
    order: request.order,
    contract_addresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeResponse$8(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    return Erc20Transaction.create(__assign3(__assign3({}, toCamelCase2(transfer)), { chain: EvmChainResolver.resolve(request.chain, core2), address: EvmAddress.create(transfer.address), toAddress: EvmAddress.create(transfer.to_address), fromAddress: EvmAddress.create(transfer.from_address), value: BigNumber.create(transfer.value), blockTimestamp: new Date(transfer.block_timestamp) }));
  });
}
function serializeRequest$8(request, core2) {
  var _a2;
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    address: EvmAddress.create(request.address).checksum,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    limit: request.limit,
    cursor: request.cursor,
    order: request.order,
    contractAddresses: (_a2 = request.contractAddresses) === null || _a2 === void 0 ? void 0 : _a2.map(function(address) {
      return EvmAddress.create(address).lowercase;
    })
  };
}
function deserializeRequest$8(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    address: EvmAddress.create(jsonRequest.address),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor,
    order: jsonRequest.order,
    contractAddresses: jsonRequest.contractAddresses ? jsonRequest.contractAddresses.map(EvmAddress.create) : void 0
  };
}
var getTransactionOperation = {
  method: "GET",
  name: "getTransaction",
  id: "getTransaction",
  groupName: "transaction",
  isNullable: true,
  urlPathPattern: "/transaction/{transactionHash}",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$7,
  serializeRequest: serializeRequest$7,
  deserializeRequest: deserializeRequest$7,
  deserializeResponse: deserializeResponse$7
};
function getRequestUrlParams$7(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function serializeRequest$7(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function deserializeRequest$7(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash,
    include: jsonRequest.include
  };
}
function deserializeResponse$7(jsonResponse, request, core2) {
  var _a2, _b;
  var chain = EvmChainResolver.resolve(request.chain, core2);
  return EvmTransaction.create({
    from: jsonResponse.from_address,
    to: jsonResponse.to_address,
    value: jsonResponse.value,
    gasPrice: jsonResponse.gas_price,
    gasUsed: jsonResponse.receipt_gas_used,
    data: jsonResponse.input,
    nonce: jsonResponse.nonce,
    blockHash: jsonResponse.block_hash,
    blockNumber: jsonResponse.block_number,
    blockTimestamp: jsonResponse.block_timestamp,
    index: jsonResponse.transaction_index,
    chain,
    hash: jsonResponse.hash,
    gas: jsonResponse.gas,
    cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,
    contractAddress: jsonResponse.receipt_contract_address,
    logs: ((_a2 = jsonResponse.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(log) {
      return EvmTransactionLog.create({
        address: log.address,
        blockHash: log.block_hash,
        blockNumber: +log.block_number,
        data: log.data,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
        transactionHash: log.transaction_hash,
        blockTimestamp: log.block_timestamp,
        logIndex: +log.log_index,
        transactionIndex: +log.transaction_index,
        chain
      });
    }),
    internalTransactions: ((_b = jsonResponse.internal_transactions) !== null && _b !== void 0 ? _b : []).map(function(jsonInternalTransaction) {
      var internalTransaction = toCamelCase2(jsonInternalTransaction);
      return EvmInternalTransaction.create(internalTransaction);
    }),
    receiptRoot: jsonResponse.receipt_root,
    receiptStatus: jsonResponse.receipt_status
  });
}
var getTransactionVerboseOperation = {
  method: "GET",
  name: "getTransactionVerbose",
  id: "getTransactionVerbose",
  groupName: "transaction",
  isNullable: true,
  urlPathPattern: "/transaction/{transactionHash}/verbose",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain", "include"],
  getRequestUrlParams: getRequestUrlParams$6,
  serializeRequest: serializeRequest$6,
  deserializeRequest: deserializeRequest$6,
  deserializeResponse: deserializeResponse$6
};
function getRequestUrlParams$6(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function serializeRequest$6(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash,
    include: request.include
  };
}
function deserializeRequest$6(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash,
    include: jsonRequest.include
  };
}
function deserializeResponse$6(jsonResponse, request, core2) {
  var _a2;
  return EvmTransactionVerbose.create({
    from: jsonResponse.from_address,
    to: jsonResponse.to_address,
    value: jsonResponse.value,
    gasPrice: jsonResponse.gas_price,
    gasUsed: jsonResponse.receipt_gas_used,
    data: jsonResponse.input,
    nonce: jsonResponse.nonce,
    blockHash: jsonResponse.block_hash,
    blockNumber: jsonResponse.block_number,
    blockTimestamp: jsonResponse.block_timestamp,
    index: jsonResponse.transaction_index,
    chain: EvmChainResolver.resolve(request.chain, core2),
    hash: jsonResponse.hash,
    gas: jsonResponse.gas,
    cumulativeGasUsed: jsonResponse.receipt_cumulative_gas_used,
    contractAddress: jsonResponse.receipt_contract_address,
    logs: ((_a2 = jsonResponse.logs) !== null && _a2 !== void 0 ? _a2 : []).map(function(log) {
      return EvmTransactionLogDecoded.create({
        address: log.address,
        blockHash: log.block_hash,
        blockNumber: +log.block_number,
        data: log.data,
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        topics: [log.topic0, log.topic1, log.topic2, log.topic3],
        transactionHash: log.transaction_hash,
        blockTimestamp: log.block_timestamp,
        logIndex: +log.log_index,
        transactionIndex: +log.transaction_index,
        chain: EvmChainResolver.resolve(request.chain, core2),
        decodedEvent: log.decoded_event
      });
    }),
    decodedCall: jsonResponse.decoded_call,
    receiptRoot: jsonResponse.receipt_root,
    receiptStatus: jsonResponse.receipt_status
  });
}
var getWalletTransactionsOperation = {
  method: "GET",
  name: "getWalletTransactions",
  id: "getWalletTransactions",
  groupName: "transaction",
  urlPathPattern: "/{address}",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "cursor", "limit", "include", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$5,
  serializeRequest: serializeRequest$5,
  deserializeRequest: deserializeRequest$5,
  deserializeResponse: deserializeResponse$5
};
function getRequestUrlParams$5(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include,
    order: request.order
  };
}
function serializeRequest$5(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    include: request.include,
    order: request.order
  };
}
function deserializeRequest$5(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include,
    order: jsonRequest.order
  };
}
function deserializeResponse$5(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    var _a3;
    return EvmTransaction.create({
      cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
      gasPrice: transfer.gas_price,
      gasUsed: transfer.receipt_gas_used,
      index: +transfer.transaction_index,
      contractAddress: transfer.receipt_contract_address,
      receiptRoot: transfer.receipt_root,
      receiptStatus: +transfer.receipt_status,
      chain: EvmChainResolver.resolve(request.chain, core2),
      data: transfer.input,
      from: transfer.from_address,
      hash: transfer.hash,
      nonce: transfer.nonce,
      value: transfer.value,
      blockHash: transfer.block_hash,
      blockNumber: +transfer.block_number,
      blockTimestamp: new Date(transfer.block_timestamp),
      gas: transfer.gas ? BigNumber.create(transfer.gas) : null,
      to: transfer.to_address ? transfer.to_address : null,
      internalTransactions: ((_a3 = transfer.internal_transactions) !== null && _a3 !== void 0 ? _a3 : []).map(function(jsonInternalTransaction) {
        var internalTransaction = toCamelCase2(jsonInternalTransaction);
        return EvmInternalTransaction.create(internalTransaction);
      })
    });
  });
}
var getWalletTransactionsVerboseOperation = {
  method: "GET",
  name: "getWalletTransactionsVerbose",
  id: "getWalletTransactionsVerbose",
  groupName: "transaction",
  urlPathPattern: "/{address}/verbose",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "fromBlock", "toBlock", "fromDate", "toDate", "cursor", "limit", "include", "order"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$4,
  serializeRequest: serializeRequest$4,
  deserializeRequest: deserializeRequest$4,
  deserializeResponse: deserializeResponse$4
};
function getRequestUrlParams$4(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    from_block: maybe(request.fromBlock, String),
    to_block: maybe(request.toBlock, String),
    from_date: request.fromDate ? new Date(request.fromDate).toISOString() : void 0,
    to_date: request.toDate ? new Date(request.toDate).toISOString() : void 0,
    cursor: request.cursor,
    limit: maybe(request.limit, String),
    address: EvmAddress.create(request.address).lowercase,
    include: request.include,
    order: request.order
  };
}
function serializeRequest$4(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    fromBlock: request.fromBlock,
    toBlock: request.toBlock,
    fromDate: request.fromDate,
    toDate: request.toDate,
    cursor: request.cursor,
    limit: request.limit,
    address: EvmAddress.create(request.address).checksum,
    include: request.include,
    order: request.order
  };
}
function deserializeRequest$4(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    fromBlock: jsonRequest.fromBlock,
    toBlock: jsonRequest.toBlock,
    fromDate: jsonRequest.fromDate,
    toDate: jsonRequest.toDate,
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit,
    address: EvmAddress.create(jsonRequest.address),
    include: jsonRequest.include,
    order: jsonRequest.order
  };
}
function deserializeResponse$4(jsonResponse, request, core2) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(transfer) {
    var _a3;
    return EvmTransaction.create({
      cumulativeGasUsed: transfer.receipt_cumulative_gas_used,
      gasPrice: transfer.gas_price,
      gasUsed: transfer.receipt_gas_used,
      index: +transfer.transaction_index,
      contractAddress: transfer.receipt_contract_address,
      receiptRoot: transfer.receipt_root,
      receiptStatus: +transfer.receipt_status,
      chain: EvmChainResolver.resolve(request.chain, core2),
      data: transfer.input,
      from: EvmAddress.create(transfer.from_address),
      hash: transfer.hash,
      nonce: transfer.nonce,
      value: transfer.value,
      blockHash: transfer.block_hash,
      blockNumber: +transfer.block_number,
      blockTimestamp: new Date(transfer.block_timestamp),
      gas: BigNumber.create(transfer.gas),
      to: EvmAddress.create(transfer.to_address),
      logs: ((_a3 = transfer.logs) !== null && _a3 !== void 0 ? _a3 : []).map(function(log) {
        return EvmTransactionLog.create({
          logIndex: +log.log_index,
          transactionHash: log.transaction_hash,
          transactionIndex: +log.transaction_index,
          address: log.address,
          data: log.data,
          topics: [log.topic0, log.topic1, log.topic2, log.topic3],
          blockHash: log.block_hash,
          blockNumber: +log.block_number,
          blockTimestamp: transfer.block_timestamp,
          chain: EvmChainResolver.resolve(request.chain, core2)
        });
      })
    });
  });
}
var getInternalTransactionsOperation = {
  method: "GET",
  name: "getInternalTransactions",
  id: "getInternalTransactions",
  groupName: "transaction",
  urlPathPattern: "/transaction/{transactionHash}/internal-transactions",
  urlPathParamNames: ["transactionHash"],
  urlSearchParamNames: ["chain"],
  getRequestUrlParams: getRequestUrlParams$3,
  serializeRequest: serializeRequest$3,
  deserializeRequest: deserializeRequest$3,
  deserializeResponse: deserializeResponse$3
};
function getRequestUrlParams$3(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash
  };
}
function serializeRequest$3(request, core2) {
  return {
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    transactionHash: request.transactionHash
  };
}
function deserializeRequest$3(jsonRequest) {
  return {
    chain: EvmChain.create(jsonRequest.chain),
    transactionHash: jsonRequest.transactionHash
  };
}
function deserializeResponse$3(jsonResponse) {
  return (jsonResponse !== null && jsonResponse !== void 0 ? jsonResponse : []).map(function(transaction) {
    return EvmInternalTransaction.create({
      blockHash: transaction.block_hash,
      blockNumber: transaction.block_number,
      from: transaction.from,
      gas: transaction.gas,
      gasUsed: transaction.gas_used,
      input: transaction.input,
      output: transaction.output,
      to: transaction.to,
      transactionHash: transaction.transaction_hash,
      type: transaction.type,
      value: transaction.value
    });
  });
}
var runContractFunctionOperation = {
  method: "POST",
  name: "runContractFunction",
  id: "runContractFunction",
  groupName: "utils",
  urlPathParamNames: ["address"],
  urlSearchParamNames: ["chain", "functionName"],
  urlPathPattern: "/{address}/function",
  bodyType: "properties",
  bodyParamNames: ["abi", "params"],
  getRequestUrlParams: getRequestUrlParams$2,
  getRequestBody,
  deserializeResponse: deserializeResponse$2,
  serializeRequest: serializeRequest$2,
  deserializeRequest: deserializeRequest$2
};
function getRequestUrlParams$2(request, core2) {
  return {
    address: EvmAddress.create(request.address).lowercase,
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    function_name: request.functionName
  };
}
function getRequestBody(request) {
  return {
    abi: request.abi,
    params: request.params
  };
}
function deserializeResponse$2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$2(request, core2) {
  return {
    address: EvmAddress.create(request.address).checksum,
    chain: EvmChainResolver.resolve(request.chain, core2).apiHex,
    functionName: request.functionName,
    abi: request.abi,
    params: request.params
  };
}
function deserializeRequest$2(jsonRequest) {
  return {
    address: EvmAddress.create(jsonRequest.address),
    chain: EvmChain.create(jsonRequest.chain),
    functionName: jsonRequest.functionName,
    abi: jsonRequest.abi,
    params: jsonRequest.params
  };
}
var endpointWeightsOperation = {
  method: "GET",
  name: "endpointWeights",
  id: "endpointWeights",
  groupName: "utils",
  urlPathPattern: "/info/endpointWeights",
  getRequestUrlParams: getRequestUrlParams$1,
  deserializeRequest: deserializeRequest$1,
  serializeRequest: serializeRequest$1,
  deserializeResponse: deserializeResponse$1
};
function getRequestUrlParams$1() {
  return {};
}
function serializeRequest$1() {
  return void 0;
}
function deserializeRequest$1() {
  return {};
}
function deserializeResponse$1(jsonResponse) {
  return jsonResponse;
}
var web3ApiVersionOperation = {
  method: "GET",
  name: "web3ApiVersion",
  id: "web3ApiVersion",
  groupName: "utils",
  urlPathPattern: "/web3/version",
  deserializeRequest,
  serializeRequest,
  getRequestUrlParams,
  deserializeResponse
};
function getRequestUrlParams() {
  return {};
}
function serializeRequest() {
  return void 0;
}
function deserializeRequest() {
  return {};
}
function deserializeResponse(jsonResponse) {
  return jsonResponse;
}
var operationsV2 = [
  getBlockOperation,
  getContractEventsOperation,
  getContractLogsOperation,
  getContractNFTsOperation,
  getDateToBlockOperation,
  getInternalTransactionsOperation,
  getMultipleNFTsOperation,
  getNativeBalanceOperation,
  getNativeBalancesForAddressesOperation,
  getNFTContractMetadataOperation,
  getNFTContractTransfersOperation,
  getNFTLowestPriceOperation,
  getNFTMetadataOperation,
  getNFTOwnersOperation,
  getNFTTokenIdOwnersOperation,
  getNFTTransfersByBlockOperation,
  getNFTTransfersFromToBlockOperation,
  getNFTTransfersOperation,
  getPairAddressOperation,
  getPairReservesOperation,
  getTokenAllowanceOperation,
  getTokenMetadataBySymbolOperation,
  getTokenMetadataOperation,
  getTokenPriceOperation,
  getTokenTransfersOperation,
  getTransactionOperation,
  getTransactionVerboseOperation,
  getWalletNFTCollectionsOperation,
  getWalletNFTsOperation,
  getWalletNFTTransfersOperation,
  getWalletTokenBalancesOperation,
  getWalletTokenTransfersOperation,
  getWalletTransactionsOperation,
  getWalletTransactionsVerboseOperation,
  resolveAddressOperation,
  resolveDomainOperation,
  resolveENSDomainOperation,
  reSyncMetadataOperation,
  runContractFunctionOperation,
  syncNFTContractOperation,
  uploadFolderOperation
];
var operationsV2All = __spreadArray2(__spreadArray2([], operationsV2, true), [
  endpointWeightsOperation,
  web3ApiVersionOperation,
  getNFTTradesOperation
], false);

// node_modules/@ethersproject/properties/lib.esm/_version.js
var version6 = "properties/5.7.0";

// node_modules/@ethersproject/properties/lib.esm/index.js
var logger6 = new Logger(version6);
function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value,
    writable: false
  });
}
function getStatic(ctor, key) {
  for (let i = 0; i < 32; i++) {
    if (ctor[key]) {
      return ctor[key];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
var opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i = 0; i < keys.length; i++) {
      let value = null;
      try {
        value = object[keys[i]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger6.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key in object) {
      const value = object[key];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key, deepCopy(value));
    }
    return result;
  }
  return logger6.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var Description = class {
  constructor(info) {
    for (const key in info) {
      this[key] = deepCopy(info[key]);
    }
  }
};

// node_modules/@ethersproject/abi/lib.esm/_version.js
var version7 = "abi/5.7.0";

// node_modules/@ethersproject/abi/lib.esm/fragments.js
var logger7 = new Logger(version7);
var _constructorGuard3 = {};
var ModifiersBytes = { calldata: true, memory: true, storage: true };
var ModifiersNest = { calldata: true, memory: true };
function checkModifier(type, name) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name]) {
      return true;
    }
  } else if (type === "address") {
    if (name === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name]) {
      return true;
    }
  }
  if (ModifiersBytes[name] || name === "payable") {
    logger7.throwArgumentError("invalid modifier", "name", name);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i) {
    logger7.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i = 0; i < param.length; i++) {
    let c = param[i];
    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              if (node.indexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i);
        }
        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i);
        }
        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError(i);
        }
    }
  }
  if (node.parent) {
    logger7.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key in params) {
    defineReadOnly(object, key, params[key]);
  }
}
var FormatTypes = Object.freeze({
  // Bare formatting, as is needed for computing a sighash of an event or function
  sighash: "sighash",
  // Human-Readable with Minimal spacing and without names (compact human-readable)
  minimal: "minimal",
  // Human-Readable with nice spacing, including all names
  full: "full",
  // JSON-format a la Solidity
  json: "json"
});
var paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
var ParamType = class _ParamType {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard3) {
      logger7.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new ParamType()"
      });
    }
    populate(this, params);
    let match = this.type.match(paramTypeArray);
    if (match) {
      populate(this, {
        arrayLength: parseInt(match[2] || "-1"),
        arrayChildren: _ParamType.fromObject({
          type: match[1],
          components: this.components
        }),
        baseType: "array"
      });
    } else {
      populate(this, {
        arrayLength: null,
        arrayChildren: null,
        baseType: this.components != null ? "tuple" : this.type
      });
    }
    this._isParamType = true;
    Object.freeze(this);
  }
  // Format the parameter fragment
  //   - sighash: "(uint256,address)"
  //   - minimal: "tuple(uint256,address) indexed"
  //   - full:    "tuple(uint256 foo, address bar) indexed baz"
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      let result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: this.name || void 0
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.components) {
        result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.baseType === "array") {
      result += this.arrayChildren.format(format);
      result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
    } else {
      if (this.baseType === "tuple") {
        if (format !== FormatTypes.sighash) {
          result += this.type;
        }
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== FormatTypes.sighash) {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === FormatTypes.full && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  static from(value, allowIndexed) {
    if (typeof value === "string") {
      return _ParamType.fromString(value, allowIndexed);
    }
    return _ParamType.fromObject(value);
  }
  static fromObject(value) {
    if (_ParamType.isParamType(value)) {
      return value;
    }
    return new _ParamType(_constructorGuard3, {
      name: value.name || null,
      type: verifyType(value.type),
      indexed: value.indexed == null ? null : !!value.indexed,
      components: value.components ? value.components.map(_ParamType.fromObject) : null
    });
  }
  static fromString(value, allowIndexed) {
    function ParamTypify(node) {
      return _ParamType.fromObject({
        name: node.name,
        type: node.type,
        indexed: node.indexed,
        components: node.components
      });
    }
    return ParamTypify(parseParamType(value, !!allowIndexed));
  }
  static isParamType(value) {
    return !!(value != null && value._isParamType);
  }
};
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
var Fragment = class _Fragment {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard3) {
      logger7.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new Fragment()"
      });
    }
    populate(this, params);
    this._isFragment = true;
    Object.freeze(this);
  }
  static from(value) {
    if (_Fragment.isFragment(value)) {
      return value;
    }
    if (typeof value === "string") {
      return _Fragment.fromString(value);
    }
    return _Fragment.fromObject(value);
  }
  static fromObject(value) {
    if (_Fragment.isFragment(value)) {
      return value;
    }
    switch (value.type) {
      case "function":
        return FunctionFragment.fromObject(value);
      case "event":
        return EventFragment.fromObject(value);
      case "constructor":
        return ConstructorFragment.fromObject(value);
      case "error":
        return ErrorFragment.fromObject(value);
      case "fallback":
      case "receive":
        return null;
    }
    return logger7.throwArgumentError("invalid fragment object", "value", value);
  }
  static fromString(value) {
    value = value.replace(/\s/g, " ");
    value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
    value = value.trim();
    if (value.split(" ")[0] === "event") {
      return EventFragment.fromString(value.substring(5).trim());
    } else if (value.split(" ")[0] === "function") {
      return FunctionFragment.fromString(value.substring(8).trim());
    } else if (value.split("(")[0].trim() === "constructor") {
      return ConstructorFragment.fromString(value.trim());
    } else if (value.split(" ")[0] === "error") {
      return ErrorFragment.fromString(value.substring(5).trim());
    }
    return logger7.throwArgumentError("unsupported fragment", "value", value);
  }
  static isFragment(value) {
    return !!(value && value._isFragment);
  }
};
var EventFragment = class _EventFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "event ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (format !== FormatTypes.sighash) {
      if (this.anonymous) {
        result += "anonymous ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _EventFragment.fromString(value);
    }
    return _EventFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_EventFragment.isEventFragment(value)) {
      return value;
    }
    if (value.type !== "event") {
      logger7.throwArgumentError("invalid event object", "value", value);
    }
    const params = {
      name: verifyIdentifier(value.name),
      anonymous: value.anonymous,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      type: "event"
    };
    return new _EventFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let match = value.match(regexParen);
    if (!match) {
      logger7.throwArgumentError("invalid event string", "value", value);
    }
    let anonymous = false;
    match[3].split(" ").forEach((modifier) => {
      switch (modifier.trim()) {
        case "anonymous":
          anonymous = true;
          break;
        case "":
          break;
        default:
          logger7.warn("unknown modifier: " + modifier);
      }
    });
    return _EventFragment.fromObject({
      name: match[1].trim(),
      anonymous,
      inputs: parseParams(match[2], true),
      type: "event"
    });
  }
  static isEventFragment(value) {
    return value && value._isFragment && value.type === "event";
  }
};
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger7.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger7.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber2.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger7.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger7.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger7.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger7.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger7.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
var ConstructorFragment = class _ConstructorFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    if (format === FormatTypes.sighash) {
      logger7.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "format(sighash)"
      });
    }
    let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (this.stateMutability && this.stateMutability !== "nonpayable") {
      result += this.stateMutability + " ";
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _ConstructorFragment.fromString(value);
    }
    return _ConstructorFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_ConstructorFragment.isConstructorFragment(value)) {
      return value;
    }
    if (value.type !== "constructor") {
      logger7.throwArgumentError("invalid constructor object", "value", value);
    }
    let state = verifyState(value);
    if (state.constant) {
      logger7.throwArgumentError("constructor cannot be constant", "value", value);
    }
    const params = {
      name: null,
      type: value.type,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber2.from(value.gas) : null
    };
    return new _ConstructorFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let params = { type: "constructor" };
    value = parseGas(value, params);
    let parens = value.match(regexParen);
    if (!parens || parens[1].trim() !== "constructor") {
      logger7.throwArgumentError("invalid constructor string", "value", value);
    }
    params.inputs = parseParams(parens[2].trim(), false);
    parseModifiers(parens[3].trim(), params);
    return _ConstructorFragment.fromObject(params);
  }
  static isConstructorFragment(value) {
    return value && value._isFragment && value.type === "constructor";
  }
};
var FunctionFragment = class _FunctionFragment extends ConstructorFragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : void 0,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
        outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "function ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    if (format !== FormatTypes.sighash) {
      if (this.stateMutability) {
        if (this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
      } else if (this.constant) {
        result += "view ";
      }
      if (this.outputs && this.outputs.length) {
        result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
      }
      if (this.gas != null) {
        result += "@" + this.gas.toString() + " ";
      }
    }
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _FunctionFragment.fromString(value);
    }
    return _FunctionFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_FunctionFragment.isFunctionFragment(value)) {
      return value;
    }
    if (value.type !== "function") {
      logger7.throwArgumentError("invalid function object", "value", value);
    }
    let state = verifyState(value);
    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      constant: state.constant,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? BigNumber2.from(value.gas) : null
    };
    return new _FunctionFragment(_constructorGuard3, params);
  }
  static fromString(value) {
    let params = { type: "function" };
    value = parseGas(value, params);
    let comps = value.split(" returns ");
    if (comps.length > 2) {
      logger7.throwArgumentError("invalid function string", "value", value);
    }
    let parens = comps[0].match(regexParen);
    if (!parens) {
      logger7.throwArgumentError("invalid function signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier(params.name);
    }
    params.inputs = parseParams(parens[2], false);
    parseModifiers(parens[3].trim(), params);
    if (comps.length > 1) {
      let returns = comps[1].match(regexParen);
      if (returns[1].trim() != "" || returns[3].trim() != "") {
        logger7.throwArgumentError("unexpected tokens", "value", value);
      }
      params.outputs = parseParams(returns[2], false);
    } else {
      params.outputs = [];
    }
    return _FunctionFragment.fromObject(params);
  }
  static isFunctionFragment(value) {
    return value && value._isFragment && value.type === "function";
  }
};
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger7.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
var ErrorFragment = class _ErrorFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }
    if (!FormatTypes[format]) {
      logger7.throwArgumentError("invalid format type", "format", format);
    }
    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    let result = "";
    if (format !== FormatTypes.sighash) {
      result += "error ";
    }
    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    return result.trim();
  }
  static from(value) {
    if (typeof value === "string") {
      return _ErrorFragment.fromString(value);
    }
    return _ErrorFragment.fromObject(value);
  }
  static fromObject(value) {
    if (_ErrorFragment.isErrorFragment(value)) {
      return value;
    }
    if (value.type !== "error") {
      logger7.throwArgumentError("invalid error object", "value", value);
    }
    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
    };
    return checkForbidden(new _ErrorFragment(_constructorGuard3, params));
  }
  static fromString(value) {
    let params = { type: "error" };
    let parens = value.match(regexParen);
    if (!parens) {
      logger7.throwArgumentError("invalid error signature", "value", value);
    }
    params.name = parens[1].trim();
    if (params.name) {
      verifyIdentifier(params.name);
    }
    params.inputs = parseParams(parens[2], false);
    return checkForbidden(_ErrorFragment.fromObject(params));
  }
  static isErrorFragment(value) {
    return value && value._isFragment && value.type === "error";
  }
};
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
var regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger7.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
var regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c = value[offset];
    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;
      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;
        if (depth === -1) {
          logger7.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
var logger8 = new Logger(version7);
var Coder = class {
  constructor(name, type, localName, dynamic) {
    this.name = name;
    this.type = type;
    this.localName = localName;
    this.dynamic = dynamic;
  }
  _throwError(message, value) {
    logger8.throwArgumentError(message, this.localName, value);
  }
};
var Writer = class {
  constructor(wordSize) {
    defineReadOnly(this, "wordSize", wordSize || 32);
    this._data = [];
    this._dataLength = 0;
    this._padding = new Uint8Array(wordSize);
  }
  get data() {
    return hexConcat(this._data);
  }
  get length() {
    return this._dataLength;
  }
  _writeData(data) {
    this._data.push(data);
    this._dataLength += data.length;
    return data.length;
  }
  appendWriter(writer) {
    return this._writeData(concat(writer._data));
  }
  // Arrayish items; padded on the right to wordSize
  writeBytes(value) {
    let bytes = arrayify(value);
    const paddingOffset = bytes.length % this.wordSize;
    if (paddingOffset) {
      bytes = concat([bytes, this._padding.slice(paddingOffset)]);
    }
    return this._writeData(bytes);
  }
  _getValue(value) {
    let bytes = arrayify(BigNumber2.from(value));
    if (bytes.length > this.wordSize) {
      logger8.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
        length: this.wordSize,
        offset: bytes.length
      });
    }
    if (bytes.length % this.wordSize) {
      bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
    }
    return bytes;
  }
  // BigNumberish items; padded on the left to wordSize
  writeValue(value) {
    return this._writeData(this._getValue(value));
  }
  writeUpdatableValue() {
    const offset = this._data.length;
    this._data.push(this._padding);
    this._dataLength += this.wordSize;
    return (value) => {
      this._data[offset] = this._getValue(value);
    };
  }
};
var Reader = class _Reader {
  constructor(data, wordSize, coerceFunc, allowLoose) {
    defineReadOnly(this, "_data", arrayify(data));
    defineReadOnly(this, "wordSize", wordSize || 32);
    defineReadOnly(this, "_coerceFunc", coerceFunc);
    defineReadOnly(this, "allowLoose", allowLoose);
    this._offset = 0;
  }
  get data() {
    return hexlify(this._data);
  }
  get consumed() {
    return this._offset;
  }
  // The default Coerce function
  static coerce(name, value) {
    let match = name.match("^u?int([0-9]+)$");
    if (match && parseInt(match[1]) <= 48) {
      value = value.toNumber();
    }
    return value;
  }
  coerce(name, value) {
    if (this._coerceFunc) {
      return this._coerceFunc(name, value);
    }
    return _Reader.coerce(name, value);
  }
  _peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
    if (this._offset + alignedLength > this._data.length) {
      if (this.allowLoose && loose && this._offset + length <= this._data.length) {
        alignedLength = length;
      } else {
        logger8.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
          length: this._data.length,
          offset: this._offset + alignedLength
        });
      }
    }
    return this._data.slice(this._offset, this._offset + alignedLength);
  }
  subReader(offset) {
    return new _Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
  }
  readBytes(length, loose) {
    let bytes = this._peekBytes(0, length, !!loose);
    this._offset += bytes.length;
    return bytes.slice(0, length);
  }
  readValue() {
    return BigNumber2.from(this.readBytes(this.wordSize));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder = class extends Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, value) {
    try {
      value = getAddress(value);
    } catch (error) {
      this._throwError(error.message, value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder = class extends Coder {
  constructor(coder) {
    super(coder.name, coder.type, void 0, coder.dynamic);
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
var logger9 = new Logger(version7);
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      if (!name) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name] = true;
      return values[name];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name = coder.localName;
    if (name) {
      if (!accum[name]) {
        accum[name] = 0;
      }
      accum[name]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name = coder.localName;
    if (!name || uniqueNames[name] !== 1) {
      return;
    }
    if (name === "length") {
      name = "_length";
    }
    if (values[name] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name] = value;
    }
  });
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var ArrayCoder = class extends Coder {
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    this.coder = coder;
    this.length = length;
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i = 0; i < this.length; i++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, value) {
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    logger9.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i = 0; i < value.length; i++) {
      coders.push(this.coder);
    }
    return pack(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readValue().toNumber();
      if (count * 32 > reader._data.length) {
        logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
          length: reader._data.length,
          count
        });
      }
    }
    let coders = [];
    for (let i = 0; i < count; i++) {
      coders.push(new AnonymousCoder(this.coder));
    }
    return reader.coerce(this.name, unpack(reader, coders));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder = class extends Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, value) {
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return reader.coerce(this.type, !reader.readValue().isZero());
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder = class extends Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = arrayify(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readValue().toNumber(), true);
  }
};
var BytesCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(super.decode(reader)));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder = class extends Coder {
  constructor(size, localName) {
    let name = "bytes" + String(size);
    super(name, name, localName, false);
    this.size = size;
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, value) {
    let data = arrayify(value);
    if (data.length !== this.size) {
      this._throwError("incorrect data length", value);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder = class extends Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes([]);
  }
  decode(reader) {
    reader.readBytes(0);
    return reader.coerce(this.name, null);
  }
};

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2 = BigNumber2.from(-1);
var Zero2 = BigNumber2.from(0);
var One = BigNumber2.from(1);
var Two = BigNumber2.from(2);
var WeiPerEther = BigNumber2.from("1000000000000000000");
var MaxUint256 = BigNumber2.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigNumber2.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
var MaxInt256 = BigNumber2.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder = class extends Coder {
  constructor(size, signed2, localName) {
    const name = (signed2 ? "int" : "uint") + size * 8;
    super(name, name, localName, false);
    this.size = size;
    this.signed = signed2;
  }
  defaultValue() {
    return 0;
  }
  encode(writer, value) {
    let v = BigNumber2.from(value);
    let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
    if (this.signed) {
      let bounds = maxUintValue.mask(this.size * 8 - 1);
      if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne2))) {
        this._throwError("value out-of-bounds", value);
      }
    } else if (v.lt(Zero2) || v.gt(maxUintValue.mask(this.size * 8))) {
      this._throwError("value out-of-bounds", value);
    }
    v = v.toTwos(this.size * 8).mask(this.size * 8);
    if (this.signed) {
      v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
    }
    return writer.writeValue(v);
  }
  decode(reader) {
    let value = reader.readValue().mask(this.size * 8);
    if (this.signed) {
      value = value.fromTwos(this.size * 8);
    }
    return reader.coerce(this.name, value);
  }
};

// node_modules/@ethersproject/strings/lib.esm/_version.js
var version8 = "strings/5.7.0";

// node_modules/@ethersproject/strings/lib.esm/utf8.js
var logger10 = new Logger(version8);
var UnicodeNormalizationForm;
(function(UnicodeNormalizationForm2) {
  UnicodeNormalizationForm2["current"] = "";
  UnicodeNormalizationForm2["NFC"] = "NFC";
  UnicodeNormalizationForm2["NFD"] = "NFD";
  UnicodeNormalizationForm2["NFKC"] = "NFKC";
  UnicodeNormalizationForm2["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
var Utf8ErrorReason;
(function(Utf8ErrorReason2) {
  Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
  Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
  Utf8ErrorReason2["OVERRUN"] = "string overrun";
  Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
  Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
  Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
  Utf8ErrorReason2["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (Utf8ErrorReason = {}));
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i = 0;
    for (let o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return arrayify(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}

// node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v) => {
    let comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
var Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
var Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
var Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
var Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
var Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
var Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, value) {
    return super.encode(writer, toUtf8Bytes(value));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
};

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder = class extends Coder {
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    this.coders = coders;
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name = coder.localName;
      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }
        accum[name]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name = coder.localName;
      if (!name || uniqueNames[name] !== 1) {
        return;
      }
      if (name === "length") {
        name = "_length";
      }
      if (values[name] != null) {
        return;
      }
      values[name] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, value) {
    return pack(writer, this.coders, value);
  }
  decode(reader) {
    return reader.coerce(this.name, unpack(reader, this.coders));
  }
};

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger11 = new Logger(version7);
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var AbiCoder = class {
  constructor(coerceFunc) {
    defineReadOnly(this, "coerceFunc", coerceFunc || null);
  }
  _getCoder(param) {
    switch (param.baseType) {
      case "address":
        return new AddressCoder(param.name);
      case "bool":
        return new BooleanCoder(param.name);
      case "string":
        return new StringCoder(param.name);
      case "bytes":
        return new BytesCoder(param.name);
      case "array":
        return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
      case "tuple":
        return new TupleCoder((param.components || []).map((component) => {
          return this._getCoder(component);
        }), param.name);
      case "":
        return new NullCoder(param.name);
    }
    let match = param.type.match(paramTypeNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      if (size === 0 || size > 256 || size % 8 !== 0) {
        logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
      }
      return new NumberCoder(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes);
    if (match) {
      let size = parseInt(match[1]);
      if (size === 0 || size > 32) {
        logger11.throwArgumentError("invalid bytes length", "param", param);
      }
      return new FixedBytesCoder(size, param.name);
    }
    return logger11.throwArgumentError("invalid type", "type", param.type);
  }
  _getWordSize() {
    return 32;
  }
  _getReader(data, allowLoose) {
    return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
  }
  _getWriter() {
    return new Writer(this._getWordSize());
  }
  getDefaultValue(types) {
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  encode(types, values) {
    if (types.length !== values.length) {
      logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
        count: { types: types.length, values: values.length },
        value: { types, values }
      });
    }
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = this._getWriter();
    coder.encode(writer, values);
    return writer.data;
  }
  decode(types, data, loose) {
    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(this._getReader(arrayify(data), loose));
  }
};
var defaultAbiCoder = new AbiCoder();

// node_modules/@ethersproject/hash/lib.esm/id.js
function id(text) {
  return keccak256(toUtf8Bytes(text));
}

// node_modules/@ethersproject/hash/lib.esm/_version.js
var version9 = "hash/5.7.0";

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode(textData) {
  textData = atob(textData);
  const data = [];
  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach2 = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach2.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N = 31;
  const FULL = Math.pow(2, N);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0; i < N; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b = b << 1 & MASK | 1;
    }
    while (a & ~b & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b = (b ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_counts(n, next) {
  let v = Array(n);
  for (let i = 0; i < n; i++)
    v[i] = 1 + next();
  return v;
}
function read_ascending(n, next) {
  let v = Array(n);
  for (let i = 0, x = -1; i < n; i++)
    v[i] = x += 1 + next();
  return v;
}
function read_deltas(n, next) {
  let v = Array(n);
  for (let i = 0, x = 0; i < n; i++)
    v[i] = x += signed(next());
  return v;
}
function read_member_array(next, lookup) {
  let v = read_ascending(next(), next);
  let n = next();
  let vX = read_ascending(n, next);
  let vN = read_counts(n, next);
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < vN[i]; j++) {
      v.push(vX[i] + j);
    }
  }
  return lookup ? v.map((x) => lookup[x]) : v;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0)
      break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0)
      break;
    ret.push(read_replacement_table(w, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v = [];
  while (true) {
    let i = next();
    if (i == 0)
      break;
    v.push(i);
  }
  return v;
}
function read_transposed(n, w, next) {
  let m = Array(n).fill(void 0).map(() => []);
  for (let i = 0; i < w; i++) {
    read_deltas(n, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return flat(m.map((v, i) => {
    const x = v[0], ys = v.slice(1);
    return Array(vN[i]).fill(void 0).map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  }));
}
function read_replacement_table(w, next) {
  let n = 1 + next();
  let m = read_transposed(n, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a, b) => a - b);
  return read();
  function read() {
    let branches = [];
    while (true) {
      let keys = read_member_array(next, sorted);
      if (keys.length == 0)
        break;
      branches.push({ set: new Set(keys), node: read() });
    }
    branches.sort((a, b) => b.set.size - a.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode(""));
}

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var r = getData();
var VALID = new Set(read_member_array(r));
var IGNORED = new Set(read_member_array(r));
var MAPPED = read_mapped_map(r);
var EMOJI_ROOT = read_emoji_trie(r);

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger12 = new Logger(version9);
var Zeros = new Uint8Array(32);
Zeros.fill(0);

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
var logger13 = new Logger(version9);
var padding = new Uint8Array(32);
padding.fill(0);
var NegativeOne3 = BigNumber2.from(-1);
var Zero3 = BigNumber2.from(0);
var One2 = BigNumber2.from(1);
var MaxUint2562 = BigNumber2.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var hexTrue = hexZeroPad(One2.toHexString(), 32);
var hexFalse = hexZeroPad(Zero3.toHexString(), 32);
function checkString(key) {
  return function(value) {
    if (typeof value !== "string") {
      logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    }
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(value) {
    try {
      return BigNumber2.from(value).toString();
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    try {
      const bytes = arrayify(value);
      if (bytes.length !== 32) {
        throw new Error("bad length");
      }
      return hexlify(bytes);
    } catch (error) {
    }
    return logger13.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  }
};

// node_modules/@ethersproject/abi/lib.esm/interface.js
var logger14 = new Logger(version7);
var LogDescription = class extends Description {
};
var TransactionDescription = class extends Description {
};
var ErrorDescription = class extends Description {
};
var Indexed = class extends Description {
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
};
var BuiltinErrors = {
  "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
  "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
};
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var Interface = class {
  constructor(fragments) {
    let abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    defineReadOnly(this, "fragments", abi.map((fragment) => {
      return Fragment.from(fragment);
    }).filter((fragment) => fragment != null));
    defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
    defineReadOnly(this, "functions", {});
    defineReadOnly(this, "errors", {});
    defineReadOnly(this, "events", {});
    defineReadOnly(this, "structs", {});
    this.fragments.forEach((fragment) => {
      let bucket = null;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            logger14.warn("duplicate definition - constructor");
            return;
          }
          defineReadOnly(this, "deploy", fragment);
          return;
        case "function":
          bucket = this.functions;
          break;
        case "event":
          bucket = this.events;
          break;
        case "error":
          bucket = this.errors;
          break;
        default:
          return;
      }
      let signature = fragment.format();
      if (bucket[signature]) {
        logger14.warn("duplicate definition - " + signature);
        return;
      }
      bucket[signature] = fragment;
    });
    if (!this.deploy) {
      defineReadOnly(this, "deploy", ConstructorFragment.from({
        payable: false,
        type: "constructor"
      }));
    }
    defineReadOnly(this, "_isInterface", true);
  }
  format(format) {
    if (!format) {
      format = FormatTypes.full;
    }
    if (format === FormatTypes.sighash) {
      logger14.throwArgumentError("interface does not support formatting sighash", "format", format);
    }
    const abi = this.fragments.map((fragment) => fragment.format(format));
    if (format === FormatTypes.json) {
      return JSON.stringify(abi.map((j) => JSON.parse(j)));
    }
    return abi;
  }
  // Sub-classes can override these to handle other blockchains
  static getAbiCoder() {
    return defaultAbiCoder;
  }
  static getAddress(address) {
    return getAddress(address);
  }
  static getSighash(fragment) {
    return hexDataSlice(id(fragment.format()), 0, 4);
  }
  static getEventTopic(eventFragment) {
    return id(eventFragment.format());
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  getFunction(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      for (const name in this.functions) {
        if (nameOrSignatureOrSighash === this.getSighash(name)) {
          return this.functions[name];
        }
      }
      logger14.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.functions).filter((f) => f.split(
        "("
        /* fix:) */
      )[0] === name);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching function", "name", name);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching functions", "name", name);
      }
      return this.functions[matching[0]];
    }
    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger14.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  // Find an event definition by any means necessary (unless it is ambiguous)
  getEvent(nameOrSignatureOrTopic) {
    if (isHexString(nameOrSignatureOrTopic)) {
      const topichash = nameOrSignatureOrTopic.toLowerCase();
      for (const name in this.events) {
        if (topichash === this.getEventTopic(name)) {
          return this.events[name];
        }
      }
      logger14.throwArgumentError("no matching event", "topichash", topichash);
    }
    if (nameOrSignatureOrTopic.indexOf("(") === -1) {
      const name = nameOrSignatureOrTopic.trim();
      const matching = Object.keys(this.events).filter((f) => f.split(
        "("
        /* fix:) */
      )[0] === name);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching event", "name", name);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching events", "name", name);
      }
      return this.events[matching[0]];
    }
    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
    if (!result) {
      logger14.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
    }
    return result;
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  getError(nameOrSignatureOrSighash) {
    if (isHexString(nameOrSignatureOrSighash)) {
      const getSighash = getStatic(this.constructor, "getSighash");
      for (const name in this.errors) {
        const error = this.errors[name];
        if (nameOrSignatureOrSighash === getSighash(error)) {
          return this.errors[name];
        }
      }
      logger14.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
    }
    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.errors).filter((f) => f.split(
        "("
        /* fix:) */
      )[0] === name);
      if (matching.length === 0) {
        logger14.throwArgumentError("no matching error", "name", name);
      } else if (matching.length > 1) {
        logger14.throwArgumentError("multiple matching errors", "name", name);
      }
      return this.errors[matching[0]];
    }
    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
    if (!result) {
      logger14.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
    }
    return result;
  }
  // Get the sighash (the bytes4 selector) used by Solidity to identify a function
  getSighash(fragment) {
    if (typeof fragment === "string") {
      try {
        fragment = this.getFunction(fragment);
      } catch (error) {
        try {
          fragment = this.getError(fragment);
        } catch (_) {
          throw error;
        }
      }
    }
    return getStatic(this.constructor, "getSighash")(fragment);
  }
  // Get the topic (the bytes32 hash) used by Solidity to identify an event
  getEventTopic(eventFragment) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    return getStatic(this.constructor, "getEventTopic")(eventFragment);
  }
  _decodeParams(params, data) {
    return this._abiCoder.decode(params, data);
  }
  _encodeParams(params, values) {
    return this._abiCoder.encode(params, values);
  }
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    const bytes = arrayify(data);
    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
      logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
    }
    return this._decodeParams(fragment.inputs, bytes.slice(4));
  }
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }
    return hexlify(concat([
      this.getSighash(fragment),
      this._encodeParams(fragment.inputs, values || [])
    ]));
  }
  // Decode the data for a function call (e.g. tx.data)
  decodeFunctionData(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    const bytes = arrayify(data);
    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
      logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
    }
    return this._decodeParams(functionFragment.inputs, bytes.slice(4));
  }
  // Encode the data for a function call (e.g. tx.data)
  encodeFunctionData(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(concat([
      this.getSighash(functionFragment),
      this._encodeParams(functionFragment.inputs, values || [])
    ]));
  }
  // Decode the result from a function call (e.g. from eth_call)
  decodeFunctionResult(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    let bytes = arrayify(data);
    let reason = null;
    let message = "";
    let errorArgs = null;
    let errorName = null;
    let errorSignature = null;
    switch (bytes.length % this._abiCoder._getWordSize()) {
      case 0:
        try {
          return this._abiCoder.decode(functionFragment.outputs, bytes);
        } catch (error) {
        }
        break;
      case 4: {
        const selector = hexlify(bytes.slice(0, 4));
        const builtin = BuiltinErrors[selector];
        if (builtin) {
          errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
          errorName = builtin.name;
          errorSignature = builtin.signature;
          if (builtin.reason) {
            reason = errorArgs[0];
          }
          if (errorName === "Error") {
            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
          } else if (errorName === "Panic") {
            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
          }
        } else {
          try {
            const error = this.getError(selector);
            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
            errorName = error.name;
            errorSignature = error.format();
          } catch (error) {
          }
        }
        break;
      }
    }
    return logger14.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
      method: functionFragment.format(),
      data: hexlify(data),
      errorArgs,
      errorName,
      errorSignature,
      reason
    });
  }
  // Encode the result for a function call (e.g. for eth_call)
  encodeFunctionResult(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }
    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
  }
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (values.length > eventFragment.inputs.length) {
      logger14.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
        argument: "values",
        value: values
      });
    }
    let topics = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "bool" && typeof value === "boolean") {
        value = value ? "0x01" : "0x00";
      }
      if (param.type.match(/^u?int/)) {
        value = BigNumber2.from(value).toHexString();
      }
      if (param.type === "address") {
        this._abiCoder.encode(["address"], [value]);
      }
      return hexZeroPad(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      let param = eventFragment.inputs[index];
      if (!param.indexed) {
        if (value != null) {
          logger14.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        }
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        logger14.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }
    if (values.length !== eventFragment.inputs.length) {
      logger14.throwArgumentError("event arguments/values mismatch", "values", values);
    }
    eventFragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(this._abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this._abiCoder.encode(dataTypes, dataValues),
      topics
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(eventFragment, data, topics) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }
    if (topics != null && !eventFragment.anonymous) {
      let topicHash = this.getEventTopic(eventFragment);
      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
        logger14.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
      }
      topics = topics.slice(1);
    }
    let indexed = [];
    let nonIndexed = [];
    let dynamic = [];
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
    let result = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (resultIndexed == null) {
          result[index] = new Indexed({ _isIndexed: true, hash: null });
        } else if (dynamic[index]) {
          result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
        } else {
          try {
            result[index] = resultIndexed[indexedIndex++];
          } catch (error) {
            result[index] = error;
          }
        }
      } else {
        try {
          result[index] = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          result[index] = error;
        }
      }
      if (param.name && result[param.name] == null) {
        const value = result[index];
        if (value instanceof Error) {
          Object.defineProperty(result, param.name, {
            enumerable: true,
            get: () => {
              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
            }
          });
        } else {
          result[param.name] = value;
        }
      }
    });
    for (let i = 0; i < result.length; i++) {
      const value = result[i];
      if (value instanceof Error) {
        Object.defineProperty(result, i, {
          enumerable: true,
          get: () => {
            throw wrapAccessError(`index ${i}`, value);
          }
        });
      }
    }
    return Object.freeze(result);
  }
  // Given a transaction, find the matching function fragment (if any) and
  // determine all its properties and call parameters
  parseTransaction(tx) {
    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new TransactionDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
      functionFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment),
      value: BigNumber2.from(tx.value || "0")
    });
  }
  // @TODO
  //parseCallResult(data: BytesLike): ??
  // Given an event log, find the matching event fragment (if any) and
  // determine all its properties and values
  parseLog(log) {
    let fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription({
      eventFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      topic: this.getEventTopic(fragment),
      args: this.decodeEventLog(fragment, log.data, log.topics)
    });
  }
  parseError(data) {
    const hexData = hexlify(data);
    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
    if (!fragment) {
      return null;
    }
    return new ErrorDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
      errorFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment)
    });
  }
  /*
  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
      if (Interface.isInterface(value)) {
          return value;
      }
      if (typeof(value) === "string") {
          return new Interface(JSON.parse(value));
      }
      return new Interface(value);
  }
  */
  static isInterface(value) {
    return !!(value && value._isInterface);
  }
};

// node_modules/@moralisweb3/common-streams-utils/lib/esm/index.js
var __assign4 = function() {
  __assign4 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var AptosStream = (
  /** @class */
  function() {
    function AptosStream2(data) {
      this._data = AptosStream2.parse(data);
    }
    AptosStream2.create = function(data) {
      if (data instanceof AptosStream2) {
        return data;
      }
      return new AptosStream2(data);
    };
    AptosStream2.equals = function(valueA, valueB) {
      var aptosStreamA = AptosStream2.create(valueA);
      var aptosStreamB = AptosStream2.create(valueB);
      if (aptosStreamA.id !== aptosStreamB.id) {
        return false;
      }
      return true;
    };
    AptosStream2.prototype.equals = function(value) {
      return AptosStream2.equals(this, value);
    };
    AptosStream2.prototype.toJSON = function() {
      return __assign4(__assign4({}, this._data), { network: this.network.map(function(network) {
        return network.toJSON();
      }) });
    };
    AptosStream2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(AptosStream2.prototype, "network", {
      get: function() {
        return this._data.network;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "webhookUrl", {
      get: function() {
        return this._data.webhookUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "description", {
      get: function() {
        return this._data.description;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "allAddresses", {
      get: function() {
        return this._data.allAddresses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "id", {
      get: function() {
        return this._data.id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "statusMessage", {
      get: function() {
        return this._data.statusMessage;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "demo", {
      get: function() {
        return this._data.demo;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includeChanges", {
      get: function() {
        return this._data.includeChanges;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includeEvents", {
      get: function() {
        return this._data.includeEvents;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "includePayload", {
      get: function() {
        return this._data.includePayload;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "isErrorSince", {
      get: function() {
        return this._data.isErrorSince;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "events", {
      get: function() {
        return this._data.events;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "functions", {
      get: function() {
        return this._data.functions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(AptosStream2.prototype, "amountOfAddresses", {
      get: function() {
        return this._data.amountOfAddresses;
      },
      enumerable: false,
      configurable: true
    });
    AptosStream2.parse = function(data) {
      return __assign4(__assign4({}, data), { network: data.network.map(function(network) {
        return AptosNetwork.create(network);
      }) });
    };
    return AptosStream2;
  }()
);
var StreamSelector = (
  /** @class */
  function() {
    function StreamSelector2(data) {
      this._value = StreamSelector2.parse(data);
    }
    StreamSelector2.isSelectorString = function(selector) {
      if (selector instanceof StreamSelector2) {
        return true;
      }
      return selector.startsWith("$");
    };
    StreamSelector2.create = function(streamSelector) {
      if (streamSelector instanceof StreamSelector2) {
        return streamSelector;
      }
      return new StreamSelector2(streamSelector);
    };
    StreamSelector2.parse = function(streamSelector) {
      if (!StreamSelector2.isSelectorString(streamSelector)) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid selector string provided"
        });
      }
      return streamSelector;
    };
    StreamSelector2.equals = function(valueA, valueB) {
      var streamSelectorA = StreamSelector2.create(valueA);
      var streamSelectorB = StreamSelector2.create(valueB);
      return streamSelectorA.value === streamSelectorB.value;
    };
    StreamSelector2.prototype.equals = function(streamSelector) {
      return StreamSelector2.equals(this, streamSelector);
    };
    StreamSelector2.prototype.format = function() {
      return this.value;
    };
    Object.defineProperty(StreamSelector2.prototype, "value", {
      /**
       * @returns the selector path
       * @example '$from'
       */
      get: function() {
        return this._value;
      },
      enumerable: false,
      configurable: true
    });
    StreamSelector2.prototype.toJSON = function() {
      return this.value;
    };
    return StreamSelector2;
  }()
);
var StreamTrigger = (
  /** @class */
  function() {
    function StreamTrigger2(data) {
      this._data = StreamTrigger2.parse(data);
    }
    StreamTrigger2.create = function(data) {
      if (data instanceof StreamTrigger2) {
        return data;
      }
      return new StreamTrigger2(data);
    };
    StreamTrigger2.parseSelectorOrAddress = function(input) {
      var result;
      if (!(input instanceof EvmAddress) && StreamSelector.isSelectorString(input)) {
        result = StreamSelector.create(input);
      } else {
        result = EvmAddress.create(input);
      }
      return result;
    };
    StreamTrigger2.equals = function(valueA, valueB) {
      var _a2, _b;
      var streamTriggerA = StreamTrigger2.create(valueA);
      var streamTriggerB = StreamTrigger2.create(valueB);
      if (streamTriggerA.type !== streamTriggerB.type) {
        return false;
      }
      if (streamTriggerA.contractAddress.toJSON() !== streamTriggerB.contractAddress.toJSON()) {
        return false;
      }
      if (streamTriggerA.functionAbi !== streamTriggerB.functionAbi) {
        return false;
      }
      if (((_a2 = streamTriggerA.inputs) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = streamTriggerB.inputs) === null || _b === void 0 ? void 0 : _b.length)) {
        return false;
      }
      var triggerInputsA = streamTriggerA.inputs || [];
      var triggerInputsB = streamTriggerB.inputs || [];
      for (var i = 0; i < (triggerInputsA === null || triggerInputsA === void 0 ? void 0 : triggerInputsA.length); i++) {
        if (triggerInputsA[i] !== triggerInputsB[i]) {
          return false;
        }
      }
      if (streamTriggerA.topic0 !== streamTriggerB.topic0) {
        return false;
      }
      if (streamTriggerA.callFrom !== streamTriggerB.callFrom) {
        return false;
      }
      return true;
    };
    StreamTrigger2.arrayEquals = function(valueA, valueB) {
      if (valueA.length !== valueB.length) {
        return false;
      }
      var triggersA = valueA.map(function(trigger) {
        return StreamTrigger2.create(trigger);
      });
      var triggersB = valueB.map(function(trigger) {
        return StreamTrigger2.create(trigger);
      });
      var seenTriggersB = Array(triggersB.length).fill(false);
      var _loop_1 = function(i2) {
        var indexB = triggersB.findIndex(function(triggerB) {
          return triggerB.equals(triggersA[i2]);
        });
        if (indexB < 0) {
          return { value: false };
        }
        seenTriggersB[indexB] = true;
      };
      for (var i = 0; i < triggersA.length; i++) {
        var state_1 = _loop_1(i);
        if (typeof state_1 === "object")
          return state_1.value;
      }
      if (seenTriggersB.some(function(seen) {
        return !seen;
      })) {
        return false;
      }
      return true;
    };
    StreamTrigger2.prototype.equals = function(value) {
      return StreamTrigger2.equals(this, value);
    };
    StreamTrigger2.prototype.toJSON = function() {
      var _a2 = this._data, contractAddress = _a2.contractAddress, callFrom = _a2.callFrom, data = __rest(_a2, ["contractAddress", "callFrom"]);
      return __assign4(__assign4({}, data), { contractAddress: contractAddress.toJSON(), callFrom: callFrom === null || callFrom === void 0 ? void 0 : callFrom.toJSON() });
    };
    StreamTrigger2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamTrigger2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "contractAddress", {
      get: function() {
        return this._data.contractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "functionAbi", {
      get: function() {
        return this._data.functionAbi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "inputs", {
      get: function() {
        return this._data.inputs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTrigger2.prototype, "callFrom", {
      get: function() {
        return this._data.callFrom;
      },
      enumerable: false,
      configurable: true
    });
    StreamTrigger2.parse = function(data) {
      var contractAddressInput = data.contractAddress, callFromInput = data.callFrom, input = __rest(data, ["contractAddress", "callFrom"]);
      var contractAddress = StreamTrigger2.parseSelectorOrAddress(contractAddressInput);
      var callFrom = maybe(callFromInput, function(value) {
        return StreamTrigger2.parseSelectorOrAddress(value);
      });
      return __assign4(__assign4({}, input), { contractAddress, callFrom });
    };
    return StreamTrigger2;
  }()
);
var EvmStream = (
  /** @class */
  function() {
    function EvmStream2(data) {
      this._data = EvmStream2.parse(data);
    }
    EvmStream2.create = function(data) {
      if (data instanceof EvmStream2) {
        return data;
      }
      return new EvmStream2(data);
    };
    EvmStream2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmStreamA = EvmStream2.create(valueA);
      var evmStreamB = EvmStream2.create(valueB);
      if (evmStreamA.id !== evmStreamB.id) {
        return false;
      }
      if (((_a2 = evmStreamA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmStreamB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTrigger.arrayEquals(evmStreamA.triggers || [], evmStreamB.triggers || [])) {
        return false;
      }
      return true;
    };
    EvmStream2.prototype.equals = function(value) {
      return EvmStream2.equals(this, value);
    };
    EvmStream2.prototype.toJSON = function() {
      var _a2 = this._data, chains = _a2.chains, triggers = _a2.triggers, data = __rest(_a2, ["chains", "triggers"]);
      return __assign4(__assign4({}, data), { chainIds: chains.map(function(chain) {
        return chain.toJSON();
      }), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    EvmStream2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmStream2.prototype, "chains", {
      get: function() {
        return this._data.chains;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "chainIds", {
      get: function() {
        return this._data.chains.map(function(chain) {
          return chain.hex;
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "webhookUrl", {
      get: function() {
        return this._data.webhookUrl;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "description", {
      get: function() {
        return this._data.description;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "allAddresses", {
      get: function() {
        return this._data.allAddresses;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeNativeTxs", {
      get: function() {
        return this._data.includeNativeTxs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeContractLogs", {
      get: function() {
        return this._data.includeContractLogs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeInternalTxs", {
      get: function() {
        return this._data.includeInternalTxs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "includeAllTxLogs", {
      get: function() {
        return this._data.includeAllTxLogs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "abi", {
      get: function() {
        return this._data.abi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "advancedOptions", {
      get: function() {
        return this._data.advancedOptions;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "id", {
      get: function() {
        return this._data.id;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "status", {
      get: function() {
        return this._data.status;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "statusMessage", {
      get: function() {
        return this._data.statusMessage;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStream2.prototype, "getNativeBalances", {
      get: function() {
        return this._data.getNativeBalances;
      },
      enumerable: false,
      configurable: true
    });
    EvmStream2.parse = function(data) {
      var _a2, _b, _c, _d, _e;
      return __assign4(__assign4({}, data), { chains: data.chainIds.map(function(chainId) {
        return EvmChain.create(chainId);
      }), topic0: maybe(data.topic0), allAddresses: (_a2 = data.allAddresses) !== null && _a2 !== void 0 ? _a2 : false, includeContractLogs: (_b = data.includeContractLogs) !== null && _b !== void 0 ? _b : false, includeInternalTxs: (_c = data.includeInternalTxs) !== null && _c !== void 0 ? _c : false, includeAllTxLogs: (_d = data.includeAllTxLogs) !== null && _d !== void 0 ? _d : false, includeNativeTxs: (_e = data.includeNativeTxs) !== null && _e !== void 0 ? _e : false, advancedOptions: maybe(data.advancedOptions), abi: maybe(data.abi), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTrigger.create(trigger);
        });
      }), getNativeBalances: maybe(data.getNativeBalances) });
    };
    return EvmStream2;
  }()
);
var EvmStreamResultFormatter = (
  /** @class */
  function() {
    function EvmStreamResultFormatter2() {
    }
    EvmStreamResultFormatter2.toJSON = function(data) {
      return __assign4(__assign4({}, data), { erc20Transfers: data.erc20Transfers.map(function(value) {
        return value.toJSON();
      }), erc20Approvals: data.erc20Approvals.map(function(value) {
        return value.toJSON();
      }), nftTransfers: data.nftTransfers.map(function(value) {
        return value.toJSON();
      }), nftApprovals: {
        ERC721: data.nftApprovals.ERC721.map(function(value) {
          return value.toJSON();
        }),
        ERC1155: data.nftApprovals.ERC1155.map(function(value) {
          return value.toJSON();
        })
      }, ntfTokenApprovals: data.ntfTokenApprovals.map(function(value) {
        return value.toJSON();
      }), chain: data.chain.toJSON(), block: data.block.toJSON(), logs: data.logs.map(function(value) {
        return value.toJSON();
      }), txs: data.txs.map(function(value) {
        return value.toJSON();
      }), txsInternal: data.txsInternal.map(function(value) {
        return value.toJSON();
      }), abi: data.abi, nativeBalances: data.nativeBalances.map(function(nativeBalance) {
        return nativeBalance.toJSON();
      }) });
    };
    return EvmStreamResultFormatter2;
  }()
);
var StreamTriggerOutput = (
  /** @class */
  function() {
    function StreamTriggerOutput2(data) {
      this._data = StreamTriggerOutput2.parse(data);
    }
    StreamTriggerOutput2.create = function(data) {
      if (data instanceof StreamTriggerOutput2) {
        return data;
      }
      return new StreamTriggerOutput2(data);
    };
    StreamTriggerOutput2.equals = function(valueA, valueB) {
      var streamTriggerOutputA = StreamTriggerOutput2.create(valueA);
      var streamTriggerOutputB = StreamTriggerOutput2.create(valueB);
      return streamTriggerOutputA.name === streamTriggerOutputB.name && streamTriggerOutputA.value === streamTriggerOutputB.value;
    };
    StreamTriggerOutput2.arrayEquals = function(valueA, valueB) {
      if (valueA.length !== valueB.length) {
        return false;
      }
      var triggerOutputsA = valueA.map(function(triggerOutput) {
        return StreamTriggerOutput2.create(triggerOutput);
      });
      var triggerOutputsB = valueB.map(function(triggerOutput) {
        return StreamTriggerOutput2.create(triggerOutput);
      });
      triggerOutputsA.sort(function(a, b) {
        return b.name > a.name ? 1 : -1;
      });
      triggerOutputsB.sort(function(a, b) {
        return b.name > a.name ? 1 : -1;
      });
      for (var i = 0; i < (triggerOutputsA === null || triggerOutputsA === void 0 ? void 0 : triggerOutputsA.length); i++) {
        if (!triggerOutputsA[i].equals(triggerOutputsB[i])) {
          return false;
        }
      }
      return true;
    };
    StreamTriggerOutput2.prototype.equals = function(value) {
      return StreamTriggerOutput2.equals(this, value);
    };
    StreamTriggerOutput2.prototype.toJSON = function() {
      var data = __rest(this._data, []);
      return __assign4({}, data);
    };
    StreamTriggerOutput2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamTriggerOutput2.prototype, "name", {
      get: function() {
        return this._data.name;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamTriggerOutput2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    StreamTriggerOutput2.parse = function(data) {
      return __assign4({}, data);
    };
    return StreamTriggerOutput2;
  }()
);
var StreamErc1155Approval = (
  /** @class */
  function() {
    function StreamErc1155Approval2(data) {
      this._data = StreamErc1155Approval2.parse(data);
    }
    StreamErc1155Approval2.create = function(data) {
      if (data instanceof StreamErc1155Approval2) {
        return data;
      }
      return new StreamErc1155Approval2(data);
    };
    StreamErc1155Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmNftApprovalA = StreamErc1155Approval2.create(valueA);
      var evmNftApprovalB = StreamErc1155Approval2.create(valueB);
      if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
        return false;
      }
      if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
        return false;
      }
      if (!evmNftApprovalA.account.equals(evmNftApprovalB.account)) {
        return false;
      }
      if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
        return false;
      }
      if (!evmNftApprovalA.operator.equals(evmNftApprovalB.operator)) {
        return false;
      }
      if (evmNftApprovalA.approved !== evmNftApprovalB.approved) {
        return false;
      }
      if (((_a2 = evmNftApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc1155Approval2.prototype.equals = function(value) {
      return StreamErc1155Approval2.equals(this, value);
    };
    StreamErc1155Approval2.prototype.toJSON = function() {
      var _a2;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), account: data.account.toJSON(), operator: data.operator.toJSON(), triggers: (_a2 = data.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc1155Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc1155Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "approved", {
      get: function() {
        return this._data.approved;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "account", {
      get: function() {
        return this._data.account;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "operator", {
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc1155Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc1155Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, logIndex: +data.logIndex, account: EvmAddress.create(data.account), operator: EvmAddress.create(data.operator), contract: EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc1155Approval2;
  }()
);
var StreamErc20Approval = (
  /** @class */
  function() {
    function StreamErc20Approval2(data) {
      this._data = StreamErc20Approval2.parse(data);
    }
    StreamErc20Approval2.create = function(data) {
      if (data instanceof StreamErc20Approval2) {
        return data;
      }
      return new StreamErc20Approval2(data);
    };
    StreamErc20Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var erc20ApprovalA = StreamErc20Approval2.create(valueA);
      var erc20ApprovalB = StreamErc20Approval2.create(valueB);
      if (!erc20ApprovalA.chain.equals(erc20ApprovalB.chain)) {
        return false;
      }
      if (erc20ApprovalA.transactionHash !== erc20ApprovalB.transactionHash) {
        return false;
      }
      if (erc20ApprovalA.logIndex !== erc20ApprovalB.logIndex) {
        return false;
      }
      if (((_a2 = erc20ApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = erc20ApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(erc20ApprovalA.triggers || [], erc20ApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc20Approval2.prototype.equals = function(value) {
      return StreamErc20Approval2.equals(this, value);
    };
    StreamErc20Approval2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, owner = _a2.owner, spender = _a2.spender, contract = _a2.contract, value = _a2.value, triggers = _a2.triggers, data = __rest(_a2, ["chain", "owner", "spender", "contract", "value", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), owner: owner.toJSON(), spender: spender.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc20Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc20Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "owner", {
      get: function() {
        return this._data.owner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "spender", {
      get: function() {
        return this._data.spender;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "tokenDecimals", {
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "valueWithDecimals", {
      get: function() {
        return this._data.valueWithDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc20Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, spender: EvmAddress.create(data.spender), owner: EvmAddress.create(data.owner), logIndex: +data.logIndex, contract: EvmAddress.create(data.contract), value: BigNumber.create(data.value), valueWithDecimals: maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === "" ? void 0 : +data.tokenDecimals, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc20Approval2;
  }()
);
var StreamErc20Transfer = (
  /** @class */
  function() {
    function StreamErc20Transfer2(data) {
      this._data = StreamErc20Transfer2.parse(data);
    }
    StreamErc20Transfer2.create = function(data) {
      if (data instanceof StreamErc20Transfer2) {
        return data;
      }
      return new StreamErc20Transfer2(data);
    };
    StreamErc20Transfer2.equals = function(valueA, valueB) {
      var _a2, _b;
      var erc20TransferA = StreamErc20Transfer2.create(valueA);
      var erc20TransferB = StreamErc20Transfer2.create(valueB);
      if (!erc20TransferA.chain.equals(erc20TransferB.chain)) {
        return false;
      }
      if (erc20TransferA.transactionHash !== erc20TransferB.transactionHash) {
        return false;
      }
      if (erc20TransferA.logIndex !== erc20TransferB.logIndex) {
        return false;
      }
      if (((_a2 = erc20TransferA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = erc20TransferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(erc20TransferA.triggers || [], erc20TransferB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc20Transfer2.prototype.equals = function(value) {
      return StreamErc20Transfer2.equals(this, value);
    };
    StreamErc20Transfer2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, from = _a2.from, to = _a2.to, contract = _a2.contract, value = _a2.value, triggers = _a2.triggers, data = __rest(_a2, ["chain", "from", "to", "contract", "value", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), from: from.toJSON(), to: to.toJSON(), contract: contract.toJSON(), value: value.toString(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc20Transfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc20Transfer2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "tokenDecimals", {
      get: function() {
        return this._data.tokenDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "valueWithDecimals", {
      get: function() {
        return this._data.valueWithDecimals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc20Transfer2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc20Transfer2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, from: EvmAddress.create(data.from), to: EvmAddress.create(data.to), logIndex: +data.logIndex, contract: EvmAddress.create(data.contract), value: BigNumber.create(data.value), valueWithDecimals: maybe(data.valueWithDecimals), tokenDecimals: data.tokenDecimals === "" ? void 0 : +data.tokenDecimals, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc20Transfer2;
  }()
);
var StreamErc721Approval = (
  /** @class */
  function() {
    function StreamErc721Approval2(data) {
      this._data = StreamErc721Approval2.parse(data);
    }
    StreamErc721Approval2.create = function(data) {
      if (data instanceof StreamErc721Approval2) {
        return data;
      }
      return new StreamErc721Approval2(data);
    };
    StreamErc721Approval2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmNftApprovalA = StreamErc721Approval2.create(valueA);
      var evmNftApprovalB = StreamErc721Approval2.create(valueB);
      if (!evmNftApprovalA.chain.equals(evmNftApprovalB.chain)) {
        return false;
      }
      if (evmNftApprovalA.transactionHash !== evmNftApprovalB.transactionHash) {
        return false;
      }
      if (!evmNftApprovalA.owner.equals(evmNftApprovalB.owner)) {
        return false;
      }
      if (!evmNftApprovalA.contract.equals(evmNftApprovalB.contract)) {
        return false;
      }
      if (evmNftApprovalA.tokenId !== evmNftApprovalB.tokenId) {
        return false;
      }
      if (!evmNftApprovalA.approved.equals(evmNftApprovalB.approved)) {
        return false;
      }
      if (((_a2 = evmNftApprovalA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmNftApprovalB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmNftApprovalA.triggers || [], evmNftApprovalB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamErc721Approval2.prototype.equals = function(value) {
      return StreamErc721Approval2.equals(this, value);
    };
    StreamErc721Approval2.prototype.toJSON = function() {
      var _a2;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), contract: data.contract.toJSON(), owner: data.owner.toJSON(), approved: data.approved.toJSON(), triggers: (_a2 = data.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamErc721Approval2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamErc721Approval2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "approved", {
      get: function() {
        return this._data.approved;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "owner", {
      get: function() {
        return this._data.owner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenId", {
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamErc721Approval2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamErc721Approval2.parse = function(data) {
      var chain = EvmChain.create(data.chain);
      return __assign4(__assign4({}, data), { chain, logIndex: +data.logIndex, owner: EvmAddress.create(data.owner), contract: EvmAddress.create(data.contract), tokenContractType: data.tokenContractType, approved: EvmAddress.create(data.approved), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamErc721Approval2;
  }()
);
var StreamEvmInternalTransaction = (
  /** @class */
  function() {
    function StreamEvmInternalTransaction2(data) {
      this._data = StreamEvmInternalTransaction2.parse(data);
    }
    StreamEvmInternalTransaction2.create = function(data) {
      if (data instanceof StreamEvmInternalTransaction2) {
        return data;
      }
      return new StreamEvmInternalTransaction2(data);
    };
    StreamEvmInternalTransaction2.equals = function(valueA, valueB) {
      var _a2, _b;
      var evmInternalTransactionA = StreamEvmInternalTransaction2.create(valueA);
      var evmInternalTransactionB = StreamEvmInternalTransaction2.create(valueB);
      if (!evmInternalTransactionA.chain.equals(evmInternalTransactionB.chain)) {
        return false;
      }
      if (evmInternalTransactionA.transactionHash !== evmInternalTransactionB.transactionHash) {
        return false;
      }
      if (((_a2 = evmInternalTransactionA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = evmInternalTransactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(evmInternalTransactionA.triggers || [], evmInternalTransactionB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmInternalTransaction2.prototype.equals = function(value) {
      return StreamEvmInternalTransaction2.equals(this, value);
    };
    StreamEvmInternalTransaction2.prototype.toJSON = function() {
      var _a2, _b, _c, _d, _e;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), from: (_a2 = data.from) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), to: (_b = data.to) === null || _b === void 0 ? void 0 : _b.toJSON(), value: (_c = data.value) === null || _c === void 0 ? void 0 : _c.toString(), gas: (_d = data.gas) === null || _d === void 0 ? void 0 : _d.toString(), triggers: (_e = data.triggers) === null || _e === void 0 ? void 0 : _e.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmInternalTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmInternalTransaction2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    StreamEvmInternalTransaction2.parse = function(data) {
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), from: maybe(data.from, function(value) {
        return EvmAddress.create(value);
      }), to: maybe(data.to, function(value) {
        return EvmAddress.create(value);
      }), value: maybe(data.value, function(value) {
        return BigNumber.create(value);
      }), gas: maybe(data.gas, function(value) {
        return BigNumber.create(value);
      }), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    return StreamEvmInternalTransaction2;
  }()
);
var StreamEvmNftTransfer = (
  /** @class */
  function() {
    function StreamEvmNftTransfer2(data) {
      this._data = StreamEvmNftTransfer2.parse(data);
    }
    StreamEvmNftTransfer2.create = function(data) {
      if (data instanceof StreamEvmNftTransfer2) {
        return data;
      }
      return new StreamEvmNftTransfer2(data);
    };
    StreamEvmNftTransfer2.parse = function(data) {
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), to: EvmAddress.create(data.to), contract: EvmAddress.create(data.contract), from: EvmAddress.create(data.from), logIndex: +data.logIndex, operator: maybe(data.operator, function(operator) {
        return EvmAddress.create(operator);
      }), tokenId: data.tokenId, transactionHash: data.transactionHash, amount: +data.amount, tokenName: data.tokenName, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmNftTransfer2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transferA = StreamEvmNftTransfer2.create(valueA);
      var transferB = StreamEvmNftTransfer2.create(valueB);
      if (!transferA.chain.equals(transferB.chain)) {
        return false;
      }
      if (transferA.transactionHash !== transferB.transactionHash) {
        return false;
      }
      if (transferA.logIndex !== transferB.logIndex) {
        return false;
      }
      if (!transferA.contract.equals(transferB.contract)) {
        return false;
      }
      if (transferA.tokenId !== transferB.tokenId) {
        return false;
      }
      if (((_a2 = transferA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transferB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transferA.triggers || [], transferB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmNftTransfer2.prototype.equals = function(value) {
      return StreamEvmNftTransfer2.equals(this, value);
    };
    StreamEvmNftTransfer2.prototype.toJSON = function() {
      var _a2, _b;
      var data = this._data;
      return __assign4(__assign4({}, data), { chain: data.chain.toJSON(), from: data.from.toJSON(), to: data.to.toJSON(), contract: data.contract.toJSON(), operator: (_a2 = data.operator) === null || _a2 === void 0 ? void 0 : _a2.toJSON(), triggers: (_b = data.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmNftTransfer2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "from", {
      get: function() {
        return this._data.from;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "to", {
      get: function() {
        return this._data.to;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "contract", {
      get: function() {
        return this._data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenId", {
      get: function() {
        return this._data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "amount", {
      get: function() {
        return this._data.amount;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenContractType", {
      get: function() {
        return this._data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenName", {
      get: function() {
        return this._data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "tokenSymbol", {
      get: function() {
        return this._data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "operator", {
      get: function() {
        return this._data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTransfer2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmNftTransfer2;
  }()
);
var StreamEvmTransaction = (
  /** @class */
  function() {
    function StreamEvmTransaction2(_a2) {
      var data = __rest(_a2, []);
      this._data = StreamEvmTransaction2.parse(data);
    }
    StreamEvmTransaction2.create = function(data) {
      if (data instanceof StreamEvmTransaction2) {
        return data;
      }
      return new StreamEvmTransaction2(data);
    };
    StreamEvmTransaction2.parse = function(data) {
      var signature = data.r != null && data.s != null && data.v != null ? EvmSignature.create({ r: data.r, s: data.s, v: data.v }) : void 0;
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), gas: maybe(data.gas, BigNumber.create), gasPrice: maybe(data.gasPrice, BigNumber.create), nonce: maybe(data.nonce, BigNumber.create), input: maybe(data.input), fromAddress: EvmAddress.create(data.fromAddress), toAddress: maybe(data.toAddress, function(address) {
        return EvmAddress.create(address);
      }), value: maybe(data.value, BigNumber.create), type: maybe(data.type, function(type) {
        return +type;
      }), receiptCumulativeGasUsed: maybe(data.receiptCumulativeGasUsed, BigNumber.create), receiptGasUsed: maybe(data.receiptGasUsed, BigNumber.create), receiptContractAddress: maybe(data.receiptContractAddress, function(address) {
        return EvmAddress.create(address);
      }), receiptRoot: maybe(data.receiptRoot), receiptStatus: maybe(data.receiptStatus, function(status) {
        return +status;
      }), signature, transactionIndex: +data.transactionIndex, triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmTransaction2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transactionA = StreamEvmTransaction2.create(valueA);
      var transactionB = StreamEvmTransaction2.create(valueB);
      if (!transactionA.chain.equals(transactionB.chain)) {
        return false;
      }
      if (transactionA.hash !== transactionB.hash) {
        return false;
      }
      if (((_a2 = transactionA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transactionB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transactionA.triggers || [], transactionB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmTransaction2.prototype.equals = function(value) {
      return StreamEvmTransaction2.equals(this, value);
    };
    StreamEvmTransaction2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, gas = _a2.gas, gasPrice = _a2.gasPrice, nonce = _a2.nonce, fromAddress = _a2.fromAddress, toAddress = _a2.toAddress, value = _a2.value, receiptContractAddress = _a2.receiptContractAddress, receiptCumulativeGasUsed = _a2.receiptCumulativeGasUsed, receiptGasUsed = _a2.receiptGasUsed, signature = _a2.signature, triggers = _a2.triggers, data = __rest(_a2, ["chain", "gas", "gasPrice", "nonce", "fromAddress", "toAddress", "value", "receiptContractAddress", "receiptCumulativeGasUsed", "receiptGasUsed", "signature", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), gas: gas === null || gas === void 0 ? void 0 : gas.toString(), gasPrice: gasPrice === null || gasPrice === void 0 ? void 0 : gasPrice.toString(), nonce: nonce === null || nonce === void 0 ? void 0 : nonce.toString(), fromAddress: fromAddress.toJSON(), toAddress: toAddress === null || toAddress === void 0 ? void 0 : toAddress.toJSON(), value: value === null || value === void 0 ? void 0 : value.toString(), receiptCumulativeGasUsed: receiptCumulativeGasUsed === null || receiptCumulativeGasUsed === void 0 ? void 0 : receiptCumulativeGasUsed.toString(), receiptGasUsed: receiptGasUsed === null || receiptGasUsed === void 0 ? void 0 : receiptGasUsed.toString(), receiptContractAddress: receiptContractAddress === null || receiptContractAddress === void 0 ? void 0 : receiptContractAddress.toJSON(), r: signature === null || signature === void 0 ? void 0 : signature.r, s: signature === null || signature === void 0 ? void 0 : signature.s, v: signature === null || signature === void 0 ? void 0 : signature.v, triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmTransaction2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmTransaction2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "input", {
      get: function() {
        return this._data.input;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "transactionIndex", {
      get: function() {
        return this._data.transactionIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "fromAddress", {
      get: function() {
        return this._data.fromAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "toAddress", {
      get: function() {
        return this._data.toAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptGasUsed", {
      get: function() {
        return this._data.receiptGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptCumulativeGasUsed", {
      get: function() {
        return this._data.receiptCumulativeGasUsed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptContractAddress", {
      get: function() {
        return this._data.receiptContractAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "signature", {
      get: function() {
        return this._data.signature;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "r", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.r;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "s", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.s;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "v", {
      get: function() {
        var _a2;
        return (_a2 = this.signature) === null || _a2 === void 0 ? void 0 : _a2.v;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "hash", {
      get: function() {
        return this._data.hash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "gas", {
      get: function() {
        return this._data.gas;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "gasPrice", {
      get: function() {
        return this._data.gasPrice;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "nonce", {
      get: function() {
        return this._data.nonce;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "value", {
      get: function() {
        return this._data.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "type", {
      get: function() {
        return this._data.type;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptRoot", {
      get: function() {
        return this._data.receiptRoot;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "receiptStatus", {
      get: function() {
        return this._data.receiptStatus;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransaction2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmTransaction2;
  }()
);
var StreamEvmTransactionLog = (
  /** @class */
  function() {
    function StreamEvmTransactionLog2(_a2) {
      var data = __rest(_a2, []);
      this._data = StreamEvmTransactionLog2.parse(data);
    }
    StreamEvmTransactionLog2.create = function(data) {
      if (data instanceof StreamEvmTransactionLog2) {
        return data;
      }
      return new StreamEvmTransactionLog2(data);
    };
    StreamEvmTransactionLog2.parse = function(data) {
      return __assign4(__assign4({}, data), { chain: EvmChain.create(data.chain), logIndex: +data.logIndex, address: EvmAddress.create(data.address), topic0: maybe(data.topic0), topic1: maybe(data.topic1), topic2: maybe(data.topic2), topic3: maybe(data.topic3), triggers: maybe(data.triggers, function(triggers) {
        return triggers.map(function(trigger) {
          return StreamTriggerOutput.create(trigger);
        });
      }) });
    };
    StreamEvmTransactionLog2.equals = function(valueA, valueB) {
      var _a2, _b;
      var transactionLogA = StreamEvmTransactionLog2.create(valueA);
      var transactionLogB = StreamEvmTransactionLog2.create(valueB);
      if (!transactionLogA.chain.equals(transactionLogB.chain)) {
        return false;
      }
      if (transactionLogA.transactionHash !== transactionLogB.transactionHash) {
        return false;
      }
      if (transactionLogA.logIndex !== transactionLogB.logIndex) {
        return false;
      }
      if (((_a2 = transactionLogA.triggers) === null || _a2 === void 0 ? void 0 : _a2.length) !== ((_b = transactionLogB.triggers) === null || _b === void 0 ? void 0 : _b.length) || !StreamTriggerOutput.arrayEquals(transactionLogA.triggers || [], transactionLogB.triggers || [])) {
        return false;
      }
      return true;
    };
    StreamEvmTransactionLog2.prototype.equals = function(value) {
      return StreamEvmTransactionLog2.equals(this, value);
    };
    StreamEvmTransactionLog2.prototype.toJSON = function() {
      var _a2 = this._data, chain = _a2.chain, address = _a2.address, triggers = _a2.triggers, data = __rest(_a2, ["chain", "address", "triggers"]);
      return __assign4(__assign4({}, data), { chain: chain.toJSON(), address: address.toJSON(), triggers: triggers === null || triggers === void 0 ? void 0 : triggers.map(function(trigger) {
        return trigger.format();
      }) });
    };
    StreamEvmTransactionLog2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "logIndex", {
      get: function() {
        return this._data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "transactionHash", {
      get: function() {
        return this._data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "address", {
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "data", {
      get: function() {
        return this._data.data;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic0", {
      get: function() {
        return this._data.topic0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic1", {
      get: function() {
        return this._data.topic1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic2", {
      get: function() {
        return this._data.topic2;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "topic3", {
      get: function() {
        return this._data.topic3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmTransactionLog2.prototype, "triggers", {
      get: function() {
        return this._data.triggers;
      },
      enumerable: false,
      configurable: true
    });
    return StreamEvmTransactionLog2;
  }()
);
var StreamNativeBalance = (
  /** @class */
  function() {
    function StreamNativeBalance2(data) {
      this._data = StreamNativeBalance2.parse(data);
    }
    StreamNativeBalance2.create = function(data) {
      if (data instanceof StreamNativeBalance2) {
        return data;
      }
      return new StreamNativeBalance2(data);
    };
    StreamNativeBalance2.parse = function(input) {
      return {
        address: EvmAddress.create(input.address),
        balance: EvmNative.create(input.balance, "wei")
      };
    };
    StreamNativeBalance2.equals = function(valueA, valueB) {
      var nativeBalanceTriggerA = StreamNativeBalance2.create(valueA);
      var nativeBalanceTriggerB = StreamNativeBalance2.create(valueB);
      return nativeBalanceTriggerA.address.equals(nativeBalanceTriggerB.address) && nativeBalanceTriggerA.balance.equals(nativeBalanceTriggerB.balance);
    };
    StreamNativeBalance2.prototype.equals = function(value) {
      return StreamNativeBalance2.equals(this, value);
    };
    StreamNativeBalance2.prototype.toJSON = function() {
      var _a2 = this._data, address = _a2.address, balance = _a2.balance;
      return {
        address: address.toJSON(),
        balance: balance.format()
      };
    };
    StreamNativeBalance2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(StreamNativeBalance2.prototype, "address", {
      get: function() {
        return this._data.address;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamNativeBalance2.prototype, "balance", {
      get: function() {
        return this._data.balance;
      },
      enumerable: false,
      configurable: true
    });
    return StreamNativeBalance2;
  }()
);
var StreamEvmNftTokenApproval = (
  /** @class */
  function() {
    function StreamEvmNftTokenApproval2(data) {
      this.data = data;
    }
    StreamEvmNftTokenApproval2.create = function(data) {
      var chain = EvmChain.create(data.chain);
      return new StreamEvmNftTokenApproval2(__assign4(__assign4({}, data), { chain }));
    };
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "chain", {
      get: function() {
        return this.data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "contract", {
      get: function() {
        return this.data.contract;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "account", {
      get: function() {
        return this.data.account;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "operator", {
      get: function() {
        return this.data.operator;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "approvedAll", {
      get: function() {
        return this.data.approvedAll;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenId", {
      get: function() {
        return this.data.tokenId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "transactionHash", {
      get: function() {
        return this.data.transactionHash;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "logIndex", {
      get: function() {
        return this.data.logIndex;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenContractType", {
      get: function() {
        return this.data.tokenContractType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenName", {
      get: function() {
        return this.data.tokenName;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(StreamEvmNftTokenApproval2.prototype, "tokenSymbol", {
      get: function() {
        return this.data.tokenSymbol;
      },
      enumerable: false,
      configurable: true
    });
    StreamEvmNftTokenApproval2.prototype.toJSON = function() {
      return {
        chain: this.chain.toJSON(),
        contract: this.contract,
        account: this.account,
        operator: this.operator,
        approvedAll: this.approvedAll,
        tokenId: this.tokenId,
        transactionHash: this.transactionHash,
        logIndex: this.logIndex,
        tokenContractType: this.tokenContractType,
        tokenName: this.tokenName,
        tokenSymbol: this.tokenSymbol
      };
    };
    StreamEvmNftTokenApproval2.prototype.format = function() {
      return this.toJSON();
    };
    StreamEvmNftTokenApproval2.prototype.equals = function(value) {
      return this.contract === value.contract && this.account === value.account && this.operator === value.operator && this.approvedAll === value.approvedAll && this.tokenId === value.tokenId && this.transactionHash === value.transactionHash && this.logIndex === value.logIndex && this.tokenContractType === value.tokenContractType && this.tokenName === value.tokenName && this.tokenSymbol === value.tokenSymbol;
    };
    return StreamEvmNftTokenApproval2;
  }()
);
var EvmStreamResultParser = (
  /** @class */
  function() {
    function EvmStreamResultParser2() {
    }
    EvmStreamResultParser2.parseChainId = function(value) {
      return value === "" ? EvmChain.ETHEREUM : EvmChain.create(value);
    };
    EvmStreamResultParser2.parseErc20Transfers = function(value, chain) {
      return value.map(function(transfer) {
        return StreamErc20Transfer.create(__assign4({ chain }, transfer));
      });
    };
    EvmStreamResultParser2.parseErc20Approvals = function(value, chain) {
      return value.map(function(approval) {
        return StreamErc20Approval.create(__assign4({ chain }, approval));
      });
    };
    EvmStreamResultParser2.parseNftTransfers = function(value, chain) {
      return value.map(function(transfer) {
        return StreamEvmNftTransfer.create(__assign4({ chain }, transfer));
      });
    };
    EvmStreamResultParser2.parseNftApprovals = function(value, chain) {
      return {
        ERC721: value.ERC721.map(function(approval) {
          return StreamErc721Approval.create(__assign4({ chain }, approval));
        }),
        ERC1155: value.ERC1155.map(function(approval) {
          return StreamErc1155Approval.create(__assign4({ chain }, approval));
        })
      };
    };
    EvmStreamResultParser2.parseNftTokenApprovals = function(values, chain) {
      return values.map(function(value) {
        return StreamEvmNftTokenApproval.create(__assign4({ chain }, value));
      });
    };
    EvmStreamResultParser2.parseBlock = function(value, chain) {
      if (value.number === "") {
        return EvmSimpleBlock.create({
          chain,
          number: 0,
          hash: "",
          timestamp: "0"
        });
      }
      return EvmSimpleBlock.create(__assign4({ chain }, value));
    };
    EvmStreamResultParser2.parseLogs = function(value, chain) {
      return value.map(function(log) {
        return StreamEvmTransactionLog.create(__assign4({ chain }, log));
      });
    };
    EvmStreamResultParser2.parseTransactions = function(value, chain) {
      return value.map(function(transaction) {
        return StreamEvmTransaction.create(__assign4({ chain }, transaction));
      });
    };
    EvmStreamResultParser2.parseInternalTransactions = function(value, chain) {
      return value.map(function(transaction) {
        return StreamEvmInternalTransaction.create(__assign4({ chain }, transaction));
      });
    };
    EvmStreamResultParser2.parseNativeBalances = function(value) {
      return value.map(function(nativeBalance) {
        return StreamNativeBalance.create(nativeBalance);
      });
    };
    var _a2;
    _a2 = EvmStreamResultParser2;
    EvmStreamResultParser2.parse = function(value) {
      var chain = _a2.parseChainId(value.chainId);
      return {
        chain,
        erc20Transfers: _a2.parseErc20Transfers(value.erc20Transfers, chain),
        erc20Approvals: _a2.parseErc20Approvals(value.erc20Approvals, chain),
        nftTransfers: _a2.parseNftTransfers(value.nftTransfers, chain),
        nftApprovals: _a2.parseNftApprovals(value.nftApprovals, chain),
        ntfTokenApprovals: _a2.parseNftTokenApprovals(value.nftTokenApprovals, chain),
        block: _a2.parseBlock(value.block, chain),
        logs: _a2.parseLogs(value.logs, chain),
        txs: _a2.parseTransactions(value.txs, chain),
        txsInternal: _a2.parseInternalTransactions(value.txsInternal, chain),
        abi: value.abi,
        retries: value.retries,
        confirmed: value.confirmed,
        streamId: value.streamId,
        tag: value.tag,
        nativeBalances: _a2.parseNativeBalances(value.nativeBalances)
      };
    };
    return EvmStreamResultParser2;
  }()
);
var EvmStreamResult = (
  /** @class */
  function() {
    function EvmStreamResult2(data) {
      this._data = EvmStreamResult2.parse(data);
    }
    EvmStreamResult2.create = function(data) {
      if (data instanceof EvmStreamResult2) {
        return data;
      }
      return new EvmStreamResult2(data);
    };
    EvmStreamResult2.equals = function(valueA, valueB) {
      var evmStreamResultA = EvmStreamResult2.create(valueA);
      var evmStreamResultB = EvmStreamResult2.create(valueB);
      if (!evmStreamResultA.chain.equals(evmStreamResultB.chain)) {
        return false;
      }
      if (!evmStreamResultA.block.equals(evmStreamResultB.block)) {
        return false;
      }
      if (evmStreamResultA.streamId !== evmStreamResultB.streamId) {
        return false;
      }
      if (evmStreamResultA.tag !== evmStreamResultB.tag) {
        return false;
      }
      if (evmStreamResultA.confirmed !== evmStreamResultB.confirmed) {
        return false;
      }
      return true;
    };
    EvmStreamResult2.prototype.equals = function(value) {
      return EvmStreamResult2.equals(this, value);
    };
    EvmStreamResult2.prototype.toJSON = function() {
      return EvmStreamResultFormatter.toJSON(this._data);
    };
    EvmStreamResult2.prototype.format = function() {
      return this.toJSON();
    };
    Object.defineProperty(EvmStreamResult2.prototype, "abiInterface", {
      get: function() {
        if (!this.abi || !this.abi.length) {
          return null;
        }
        return new Interface(this.abi);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "decodedLogs", {
      get: function() {
        var abiInterface = this.abiInterface;
        if (!abiInterface) {
          return [];
        }
        return this.logs.map(function(log) {
          return abiInterface.parseLog({
            data: log.data,
            topics: [log.topic0, log.topic1, log.topic2, log.topic3].filter(isNotEmpty)
          });
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "chain", {
      get: function() {
        return this._data.chain;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "streamId", {
      get: function() {
        return this._data.streamId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "tag", {
      get: function() {
        return this._data.tag;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "block", {
      get: function() {
        return this._data.block;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "retries", {
      get: function() {
        return this._data.retries;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "confirmed", {
      get: function() {
        return this._data.confirmed;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "erc20Approvals", {
      get: function() {
        return this._data.erc20Approvals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "erc20Transfers", {
      get: function() {
        return this._data.erc20Transfers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "logs", {
      get: function() {
        return this._data.logs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nftApprovals", {
      /**
       * @deprecated Use `ntfTokenApprovals` instead. This property will be removed in the future.
       */
      get: function() {
        return this._data.nftApprovals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "ntfTokenApprovals", {
      get: function() {
        return this._data.ntfTokenApprovals;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nftTransfers", {
      get: function() {
        return this._data.nftTransfers;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "txs", {
      get: function() {
        return this._data.txs;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "txsInternal", {
      get: function() {
        return this._data.txsInternal;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "abi", {
      get: function() {
        return this._data.abi;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(EvmStreamResult2.prototype, "nativeBalances", {
      get: function() {
        return this._data.nativeBalances;
      },
      enumerable: false,
      configurable: true
    });
    EvmStreamResult2.parse = function(data) {
      return EvmStreamResultParser.parse(data);
    };
    return EvmStreamResult2;
  }()
);
var isNotEmpty = function(value) {
  return value != null;
};
var addAddressAptosOperation = {
  method: "POST",
  name: "addAddressAptos",
  id: "aptosStreamsAddAddresses",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos/{id}/address",
  bodyParamNames: ["address"],
  urlPathParamNames: ["id"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$o2,
  getRequestBody: getRequestBody$d,
  deserializeResponse: deserializeResponse$o2,
  serializeRequest: serializeRequest$o2,
  deserializeRequest: deserializeRequest$o2
};
function getRequestUrlParams$o2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$d(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return AptosAddress.create(a).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeResponse$o2(jsonResponse) {
  var data = toCamelCase2(jsonResponse);
  return __assign4(__assign4({}, data), { address: data.address ? typeof data.address === "string" ? AptosAddress.create(data.address) : data.address.map(function(address) {
    return AptosAddress.create(address);
  }) : void 0 });
}
function serializeRequest$o2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return AptosAddress.create(a).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeRequest$o2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(a) {
      return AptosAddress.create(a);
    }) : AptosAddress.create(jsonRequest.address)
  };
}
var getStreamsAptosOperation = {
  method: "GET",
  name: "getStreamsAptos",
  id: "aptosStreamsGetAll",
  groupName: "aptosStreams",
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/aptos",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$n2,
  deserializeResponse: deserializeResponse$n2,
  serializeRequest: serializeRequest$n2,
  deserializeRequest: deserializeRequest$n2
};
function getRequestUrlParams$n2(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$n2(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return AptosStream.create(stream);
  });
}
function serializeRequest$n2(request) {
  return {
    cursor: request.cursor,
    limit: request.limit
  };
}
function deserializeRequest$n2(jsonRequest) {
  return {
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit
  };
}
var getStreamAptosOperation = {
  method: "GET",
  name: "getStreamAptos",
  id: "aptosStreamsGet",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos/{id}",
  urlPathParamNames: ["id"],
  getRequestUrlParams: getRequestUrlParams$m2,
  deserializeResponse: deserializeResponse$m2,
  serializeRequest: serializeRequest$m2,
  deserializeRequest: deserializeRequest$m2
};
function getRequestUrlParams$m2(request) {
  return {
    id: request.id
  };
}
function deserializeResponse$m2(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$m2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$m2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var createStreamAptosOperation = {
  method: "PUT",
  name: "createStreamAptos",
  id: "aptosStreamsCreate",
  groupName: "aptosStreams",
  urlPathPattern: "/streams/aptos",
  bodyParamNames: [
    "webhookUrl",
    "tag",
    "functions",
    "events",
    "network",
    "includePayload",
    "includeEvents",
    "includeChanges",
    "description",
    "demo",
    "allAddresses"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$l2,
  getRequestBody: getRequestBody$c,
  deserializeResponse: deserializeResponse$l2,
  serializeRequest: serializeRequest$l2,
  deserializeRequest: deserializeRequest$l2
};
function getRequestUrlParams$l2() {
  return {};
}
function getRequestBody$c(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeResponse$l2(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$l2(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network).network;
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeRequest$l2(jsonRequest) {
  return {
    allAddresses: jsonRequest.allAddresses,
    demo: jsonRequest.demo,
    description: jsonRequest.description,
    includeChanges: jsonRequest.includeChanges,
    includeEvents: jsonRequest.includeEvents,
    includePayload: jsonRequest.includePayload,
    network: jsonRequest.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: jsonRequest.events,
    functions: jsonRequest.functions,
    tag: jsonRequest.tag,
    webhookUrl: jsonRequest.webhookUrl
  };
}
var deleteAddressAptosOperation = {
  method: "DELETE",
  name: "deleteAddressAptos",
  id: "aptosStreamsDeleteAddresses",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}/address",
  bodyParamNames: ["address"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$k2,
  getRequestBody: getRequestBody$b,
  deserializeResponse: deserializeResponse$k2,
  serializeRequest: serializeRequest$k2,
  deserializeRequest: deserializeRequest$k2
};
function getRequestUrlParams$k2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$b(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return AptosAddress.create(address).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeResponse$k2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$k2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return AptosAddress.create(address).address;
    }) : AptosAddress.create(request.address).address
  };
}
function deserializeRequest$k2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(address) {
      return AptosAddress.create(address);
    }) : AptosAddress.create(jsonRequest.address)
  };
}
var deleteStreamAptosOperation = {
  method: "DELETE",
  name: "deleteStreamAptos",
  id: "aptosStreamsDelete",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}",
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$j2,
  getRequestBody: getRequestBody$a,
  deserializeResponse: deserializeResponse$j2,
  serializeRequest: serializeRequest$j2,
  deserializeRequest: deserializeRequest$j2
};
function getRequestUrlParams$j2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$a() {
  return {};
}
function deserializeResponse$j2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$j2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$j2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var getAddressesAptosOperation = {
  method: "GET",
  name: "getAddressesAptos",
  id: "aptosStreamsGetAddresses",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/aptos/{id}/address",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$i2,
  deserializeResponse: deserializeResponse$i2,
  serializeRequest: serializeRequest$i2,
  deserializeRequest: deserializeRequest$i2
};
function getRequestUrlParams$i2(request) {
  return {
    id: request.id,
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$i2(jsonResponse) {
  var _a2;
  return {
    result: ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(address) {
      return AptosAddress.create(address.address);
    }),
    total: jsonResponse.total
  };
}
function serializeRequest$i2(request) {
  return {
    id: request.id,
    limit: request.limit,
    cursor: request.cursor
  };
}
function deserializeRequest$i2(jsonRequest) {
  return {
    id: jsonRequest.id,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor
  };
}
var updateStreamAptosOperation = {
  method: "POST",
  name: "updateStreamAptos",
  id: "aptosStreamsUpdate",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}",
  bodyParamNames: [
    "allAddresses",
    "demo",
    "description",
    "includeChanges",
    "includeEvents",
    "includePayload",
    "network",
    "events",
    "functions",
    "tag",
    "webhookUrl"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$h2,
  getRequestBody: getRequestBody$9,
  deserializeResponse: deserializeResponse$h2,
  serializeRequest: serializeRequest$h2,
  deserializeRequest: deserializeRequest$h2
};
function getRequestUrlParams$h2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$9(request) {
  return {
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeResponse$h2(jsonResponse) {
  return AptosStream.create(jsonResponse);
}
function serializeRequest$h2(request) {
  return {
    id: request.id,
    allAddresses: request.allAddresses,
    demo: request.demo,
    description: request.description,
    includeChanges: request.includeChanges,
    includeEvents: request.includeEvents,
    includePayload: request.includePayload,
    network: request.network.map(function(network) {
      return AptosNetwork.create(network).network;
    }),
    events: request.events,
    functions: request.functions,
    tag: request.tag,
    webhookUrl: request.webhookUrl
  };
}
function deserializeRequest$h2(jsonRequest) {
  return {
    id: jsonRequest.id,
    allAddresses: jsonRequest.allAddresses,
    demo: jsonRequest.demo,
    description: jsonRequest.description,
    includeChanges: jsonRequest.includeChanges,
    includeEvents: jsonRequest.includeEvents,
    includePayload: jsonRequest.includePayload,
    network: jsonRequest.network.map(function(network) {
      return AptosNetwork.create(network);
    }),
    events: jsonRequest.events,
    functions: jsonRequest.functions,
    tag: jsonRequest.tag,
    webhookUrl: jsonRequest.webhookUrl
  };
}
var updateStreamStatusAptosOperation = {
  method: "POST",
  name: "updateStreamStatusAptos",
  id: "aptosStreamsUpdateStatus",
  groupName: "aptosStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/aptos/{id}/status",
  bodyParamNames: ["status"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$g2,
  getRequestBody: getRequestBody$8,
  deserializeResponse: deserializeResponse$g2,
  serializeRequest: serializeRequest$g2,
  deserializeRequest: deserializeRequest$g2
};
function getRequestUrlParams$g2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$8(request) {
  return {
    status: request.status
  };
}
function deserializeResponse$g2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$g2(request) {
  return {
    id: request.id,
    status: request.status
  };
}
function deserializeRequest$g2(jsonRequest) {
  return {
    id: jsonRequest.id,
    status: jsonRequest.status
  };
}
var addAddressEvmOperation = {
  method: "POST",
  name: "addAddressEvm",
  id: "AddAddressToStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm/{id}/address",
  bodyParamNames: ["address"],
  urlPathParamNames: ["id"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$f2,
  getRequestBody: getRequestBody$7,
  deserializeResponse: deserializeResponse$f2,
  serializeRequest: serializeRequest$f2,
  deserializeRequest: deserializeRequest$f2
};
function getRequestUrlParams$f2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$7(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return EvmAddress.create(a).checksum;
    }) : EvmAddress.create(request.address).checksum
  };
}
function deserializeResponse$f2(jsonResponse) {
  var data = toCamelCase2(jsonResponse);
  return __assign4(__assign4({}, data), { address: data.address ? typeof data.address === "string" ? EvmAddress.create(data.address) : data.address.map(function(address) {
    return EvmAddress.create(address);
  }) : void 0 });
}
function serializeRequest$f2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(a) {
      return EvmAddress.create(a).checksum;
    }) : EvmAddress.create(request.address).checksum
  };
}
function deserializeRequest$f2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(a) {
      return EvmAddress.create(a);
    }) : EvmAddress.create(jsonRequest.address)
  };
}
var getStreamsEvmOperation = {
  method: "GET",
  name: "getStreamsEvm",
  id: "GetStreams",
  groupName: "evmStreams",
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/evm",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$e2,
  deserializeResponse: deserializeResponse$e2,
  serializeRequest: serializeRequest$e2,
  deserializeRequest: deserializeRequest$e2
};
function getRequestUrlParams$e2(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$e2(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return EvmStream.create(stream);
  });
}
function serializeRequest$e2(request) {
  return {
    cursor: request.cursor,
    limit: request.limit
  };
}
function deserializeRequest$e2(jsonRequest) {
  return {
    cursor: jsonRequest.cursor,
    limit: jsonRequest.limit
  };
}
var getStreamEvmOperation = {
  method: "GET",
  name: "getStreamEvm",
  id: "GetStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm/{id}",
  urlPathParamNames: ["id"],
  getRequestUrlParams: getRequestUrlParams$d2,
  deserializeResponse: deserializeResponse$d2,
  serializeRequest: serializeRequest$d2,
  deserializeRequest: deserializeRequest$d2
};
function getRequestUrlParams$d2(request) {
  return {
    id: request.id
  };
}
function deserializeResponse$d2(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$d2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$d2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var createStreamEvmOperation = {
  method: "PUT",
  name: "createStreamEvm",
  id: "CreateStream",
  groupName: "evmStreams",
  urlPathPattern: "/streams/evm",
  bodyParamNames: [
    "webhookUrl",
    "description",
    "tag",
    "topic0",
    "allAddresses",
    "includeNativeTxs",
    "includeContractLogs",
    "includeInternalTxs",
    "includeAllTxLogs",
    "getNativeBalances",
    "chains",
    "abi",
    "advancedOptions",
    "demo",
    "triggers"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$c2,
  getRequestBody: getRequestBody$6,
  deserializeResponse: deserializeResponse$c2,
  serializeRequest: serializeRequest$c2,
  deserializeRequest: deserializeRequest$c2
};
function getRequestUrlParams$c2() {
  return {};
}
function getRequestBody$6(request) {
  var _a2;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    getNativeBalances: request.getNativeBalances,
    chainIds: request.chains.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_a2 = request.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeResponse$c2(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$c2(request) {
  var _a2;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    chainIds: request.chains.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_a2 = request.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeRequest$c2(jsonRequest) {
  var _a2;
  return {
    webhookUrl: jsonRequest.webhookUrl,
    description: jsonRequest.description,
    tag: jsonRequest.tag,
    topic0: jsonRequest.topic0,
    allAddresses: jsonRequest.allAddresses,
    includeNativeTxs: jsonRequest.includeNativeTxs,
    includeContractLogs: jsonRequest.includeContractLogs,
    includeInternalTxs: jsonRequest.includeInternalTxs,
    includeAllTxLogs: jsonRequest.includeAllTxLogs,
    chains: jsonRequest.chainIds.map(function(chainId) {
      return EvmChain.create(chainId);
    }),
    abi: jsonRequest.abi,
    advancedOptions: jsonRequest.advancedOptions,
    demo: jsonRequest.demo,
    triggers: (_a2 = jsonRequest.triggers) === null || _a2 === void 0 ? void 0 : _a2.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
var deleteAddressEvmOperation = {
  method: "DELETE",
  name: "deleteAddressEvm",
  id: "DeleteAddressFromStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}/address",
  bodyParamNames: ["address"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$b2,
  getRequestBody: getRequestBody$5,
  deserializeResponse: deserializeResponse$b2,
  serializeRequest: serializeRequest$b2,
  deserializeRequest: deserializeRequest$b2
};
function getRequestUrlParams$b2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$5(request) {
  return {
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }) : EvmAddress.create(request.address).lowercase
  };
}
function deserializeResponse$b2(jsonResponse) {
  var data = toCamelCase2(jsonResponse);
  return {
    streamId: jsonResponse.streamId,
    address: data.address ? typeof data.address === "string" ? EvmAddress.create(data.address) : data.address.map(function(address) {
      return EvmAddress.create(address);
    }) : void 0
  };
}
function serializeRequest$b2(request) {
  return {
    id: request.id,
    address: Array.isArray(request.address) ? request.address.map(function(address) {
      return EvmAddress.create(address).lowercase;
    }) : EvmAddress.create(request.address).lowercase
  };
}
function deserializeRequest$b2(jsonRequest) {
  return {
    id: jsonRequest.id,
    address: Array.isArray(jsonRequest.address) ? jsonRequest.address.map(function(address) {
      return EvmAddress.create(address);
    }) : EvmAddress.create(jsonRequest.address)
  };
}
var deleteStreamEvmOperation = {
  method: "DELETE",
  name: "deleteStreamEvm",
  id: "DeleteStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}",
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$a2,
  getRequestBody: getRequestBody$4,
  deserializeResponse: deserializeResponse$a2,
  serializeRequest: serializeRequest$a2,
  deserializeRequest: deserializeRequest$a2
};
function getRequestUrlParams$a2(request) {
  return {
    id: request.id
  };
}
function getRequestBody$4() {
  return {};
}
function deserializeResponse$a2(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$a2(request) {
  return {
    id: request.id
  };
}
function deserializeRequest$a2(jsonRequest) {
  return {
    id: jsonRequest.id
  };
}
var getAddressesEvmOperation = {
  method: "GET",
  name: "getAddressesEvm",
  id: "GetAddresses",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlSearchParamNames: ["cursor", "limit"],
  urlPathPattern: "/streams/evm/{id}/address",
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$92,
  deserializeResponse: deserializeResponse$92,
  serializeRequest: serializeRequest$92,
  deserializeRequest: deserializeRequest$92
};
function getRequestUrlParams$92(request) {
  return {
    id: request.id,
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$92(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(stream) {
    return __assign4(__assign4({}, stream), { address: stream.address ? EvmAddress.create(stream.address) : void 0 });
  });
}
function serializeRequest$92(request) {
  return {
    id: request.id,
    limit: request.limit,
    cursor: request.cursor
  };
}
function deserializeRequest$92(jsonRequest) {
  return {
    id: jsonRequest.id,
    limit: jsonRequest.limit,
    cursor: jsonRequest.cursor
  };
}
var updateStreamEvmOperation = {
  method: "POST",
  name: "updateStreamEvm",
  id: "UpdateStream",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}",
  bodyParamNames: [
    "webhookUrl",
    "description",
    "tag",
    "topic0",
    "allAddresses",
    "includeNativeTxs",
    "includeContractLogs",
    "includeInternalTxs",
    "includeAllTxLogs",
    "getNativeBalances",
    "chains",
    "abi",
    "advancedOptions",
    "demo",
    "triggers"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$82,
  getRequestBody: getRequestBody$32,
  deserializeResponse: deserializeResponse$82,
  serializeRequest: serializeRequest$82,
  deserializeRequest: deserializeRequest$82
};
function getRequestUrlParams$82(request) {
  return {
    id: request.id
  };
}
function getRequestBody$32(request) {
  var _a2, _b;
  return {
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    getNativeBalances: request.getNativeBalances,
    chainIds: (_a2 = request.chains) === null || _a2 === void 0 ? void 0 : _a2.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
function deserializeResponse$82(jsonResponse) {
  return EvmStream.create(jsonResponse);
}
function serializeRequest$82(request) {
  var _a2, _b;
  return {
    id: request.id,
    webhookUrl: request.webhookUrl,
    description: request.description,
    tag: request.tag,
    topic0: request.topic0,
    allAddresses: request.allAddresses,
    includeNativeTxs: request.includeNativeTxs,
    includeContractLogs: request.includeContractLogs,
    includeInternalTxs: request.includeInternalTxs,
    includeAllTxLogs: request.includeAllTxLogs,
    chainIds: (_a2 = request.chains) === null || _a2 === void 0 ? void 0 : _a2.map(function(chain) {
      return EvmChain.create(chain).apiHex;
    }),
    abi: request.abi,
    advancedOptions: request.advancedOptions,
    demo: request.demo,
    triggers: (_b = request.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger).format();
    })
  };
}
function deserializeRequest$82(jsonRequest) {
  var _a2, _b;
  return {
    id: jsonRequest.id,
    webhookUrl: jsonRequest.webhookUrl,
    description: jsonRequest.description,
    tag: jsonRequest.tag,
    topic0: jsonRequest.topic0,
    allAddresses: jsonRequest.allAddresses,
    includeNativeTxs: jsonRequest.includeNativeTxs,
    includeContractLogs: jsonRequest.includeContractLogs,
    includeInternalTxs: jsonRequest.includeInternalTxs,
    includeAllTxLogs: jsonRequest.includeAllTxLogs,
    chains: (_a2 = jsonRequest.chainIds) === null || _a2 === void 0 ? void 0 : _a2.map(function(chainId) {
      return EvmChain.create(chainId);
    }),
    abi: jsonRequest.abi,
    advancedOptions: jsonRequest.advancedOptions,
    demo: jsonRequest.demo,
    triggers: (_b = jsonRequest.triggers) === null || _b === void 0 ? void 0 : _b.map(function(trigger) {
      return StreamTrigger.create(trigger);
    })
  };
}
var updateStreamStatusEvmOperation = {
  method: "POST",
  name: "updateStreamStatusEvm",
  id: "UpdateStreamStatus",
  groupName: "evmStreams",
  urlPathParamNames: ["id"],
  urlPathPattern: "/streams/evm/{id}/status",
  bodyParamNames: ["status"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$72,
  getRequestBody: getRequestBody$22,
  deserializeResponse: deserializeResponse$72,
  serializeRequest: serializeRequest$72,
  deserializeRequest: deserializeRequest$72
};
function getRequestUrlParams$72(request) {
  return {
    id: request.id
  };
}
function getRequestBody$22(request) {
  return {
    status: request.status
  };
}
function deserializeResponse$72(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$72(request) {
  return {
    id: request.id,
    status: request.status
  };
}
function deserializeRequest$72(jsonRequest) {
  return {
    id: jsonRequest.id,
    status: jsonRequest.status
  };
}
var getHistoryOperation = {
  method: "GET",
  name: "getHistory",
  id: "GetHistory",
  groupName: "history",
  urlPathPattern: "/history",
  urlSearchParamNames: ["excludePayload", "limit", "cursor"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$62,
  deserializeResponse: deserializeResponse$62,
  serializeRequest: serializeRequest$62,
  deserializeRequest: deserializeRequest$62
};
function getRequestUrlParams$62(request) {
  return {
    excludePayload: maybe(request.excludePayload, String),
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$62(jsonResponse) {
  var _a2;
  return (_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : [];
}
function serializeRequest$62(request) {
  return request;
}
function deserializeRequest$62(jsonRequest) {
  return jsonRequest;
}
var replayHistoryOperation = {
  method: "POST",
  name: "replayHistory",
  id: "ReplayHistory",
  groupName: "history",
  urlPathPattern: "/history/replay/{streamId}/{id}",
  urlPathParamNames: ["streamId", "id"],
  bodyParamNames: [],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$52,
  getRequestBody: getRequestBody$12,
  deserializeResponse: deserializeResponse$52,
  serializeRequest: serializeRequest$52,
  deserializeRequest: deserializeRequest$52
};
function getRequestUrlParams$52(request) {
  return {
    streamId: request.streamId,
    id: request.id
  };
}
function getRequestBody$12() {
  return {};
}
function deserializeResponse$52(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$52(request) {
  return {
    streamId: request.streamId,
    id: request.id
  };
}
function deserializeRequest$52(jsonRequest) {
  return {
    streamId: jsonRequest.streamId,
    id: jsonRequest.id
  };
}
var getLogsOperation = {
  method: "GET",
  name: "getLogs",
  id: "GetLogs",
  groupName: "history",
  urlPathPattern: "/history/logs",
  urlSearchParamNames: ["limit", "cursor"],
  firstPageIndex: 0,
  getRequestUrlParams: getRequestUrlParams$42,
  deserializeResponse: deserializeResponse$42,
  serializeRequest: serializeRequest$42,
  deserializeRequest: deserializeRequest$42
};
function getRequestUrlParams$42(request) {
  return {
    limit: maybe(request.limit, String),
    cursor: request.cursor
  };
}
function deserializeResponse$42(jsonResponse) {
  var _a2;
  return ((_a2 = jsonResponse.result) !== null && _a2 !== void 0 ? _a2 : []).map(function(result) {
    return __assign4(__assign4({}, result), { chain: EvmChain.create(result.chain) });
  });
}
function serializeRequest$42(request) {
  return request;
}
function deserializeRequest$42(jsonRequest) {
  return jsonRequest;
}
var getSettingsOperation = {
  method: "GET",
  name: "getSettings",
  id: "GetSettings",
  groupName: "project",
  urlPathPattern: "/settings",
  getRequestUrlParams: getRequestUrlParams$32,
  deserializeResponse: deserializeResponse$32,
  serializeRequest: serializeRequest$32,
  deserializeRequest: deserializeRequest$32
};
function getRequestUrlParams$32() {
  return {};
}
function deserializeResponse$32(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$32() {
  return void 0;
}
function deserializeRequest$32() {
  return {};
}
var setSettingsOperation = {
  method: "POST",
  name: "setSettings",
  id: "SetSettings",
  groupName: "project",
  urlPathPattern: "/settings",
  bodyParamNames: ["region"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$22,
  getRequestBody: getRequestBody2,
  deserializeResponse: deserializeResponse$22,
  serializeRequest: serializeRequest$22,
  deserializeRequest: deserializeRequest$22
};
function getRequestUrlParams$22() {
  return {};
}
function getRequestBody2(request) {
  return {
    region: request.region
  };
}
function deserializeResponse$22(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$22(request) {
  return {
    region: request.region
  };
}
function deserializeRequest$22(jsonRequest) {
  return {
    region: jsonRequest.region
  };
}
var getStatsOperation = {
  method: "GET",
  name: "getStats",
  id: "getStats",
  groupName: "streams",
  urlPathPattern: "/stats",
  getRequestUrlParams: getRequestUrlParams$12,
  deserializeResponse: deserializeResponse$12,
  serializeRequest: serializeRequest$12,
  deserializeRequest: deserializeRequest$12
};
function getRequestUrlParams$12() {
  return {};
}
function deserializeResponse$12(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$12() {
  return void 0;
}
function deserializeRequest$12() {
  return {};
}
var getStatsByIdOperation = {
  method: "GET",
  name: "getStatsById",
  id: "GetStatsByStreamId",
  groupName: "stats",
  urlPathPattern: "/stats/{streamId}",
  urlPathParamNames: ["streamId"],
  getRequestUrlParams: getRequestUrlParams2,
  deserializeResponse: deserializeResponse2,
  serializeRequest: serializeRequest2,
  deserializeRequest: deserializeRequest2
};
function getRequestUrlParams2(request) {
  return {
    streamId: request.streamId
  };
}
function deserializeResponse2(jsonResponse) {
  return jsonResponse;
}
function serializeRequest2(request) {
  return request;
}
function deserializeRequest2(jsonRequest) {
  return jsonRequest;
}

// node_modules/@moralisweb3/streams/lib/esm/index.js
var import_ethereumjs_util = __toESM(require_dist2());

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
var import_hash2 = __toESM(require_hash());

// node_modules/@ethersproject/sha2/lib.esm/types.js
var SupportedAlgorithm;
(function(SupportedAlgorithm2) {
  SupportedAlgorithm2["sha256"] = "sha256";
  SupportedAlgorithm2["sha512"] = "sha512";
})(SupportedAlgorithm || (SupportedAlgorithm = {}));

// node_modules/@ethersproject/sha2/lib.esm/_version.js
var version10 = "sha2/5.7.0";

// node_modules/@ethersproject/sha2/lib.esm/sha2.js
var logger15 = new Logger(version10);
function sha256(data) {
  return "0x" + import_hash2.default.sha256().update(arrayify(data)).digest("hex");
}

// node_modules/@moralisweb3/streams/lib/esm/index.js
var extendStatics5 = function(d, b) {
  extendStatics5 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics5(d, b);
};
function __extends5(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics5(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest2(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __spreadArray3(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var StreamNetwork;
(function(StreamNetwork2) {
  StreamNetwork2["APTOS"] = "aptos";
  StreamNetwork2["EVM"] = "evm";
})(StreamNetwork || (StreamNetwork = {}));
var IncorrectNetworkError = (
  /** @class */
  function(_super) {
    __extends5(IncorrectNetworkError2, _super);
    function IncorrectNetworkError2(network) {
      return _super.call(this, {
        code: StreamErrorCode.INCORRECT_NETWORK,
        message: 'Incorrect network provided. Got "'.concat(network, '", Valid values are: ').concat(Object.values(StreamNetwork).map(function(value) {
          return '"'.concat(value, '"');
        }).join(", "))
      }) || this;
    }
    return IncorrectNetworkError2;
  }(MoralisStreamError)
);
var makeCreateAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(createStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeCreateEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(createStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeCreateStream = function(core2, baseUrl) {
  return function(createStreamOptions) {
    switch (createStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeCreateAptosStream(core2, baseUrl, createStreamOptions);
      case StreamNetwork.EVM:
        return makeCreateEvmStream(core2, baseUrl, createStreamOptions);
      default:
        if (createStreamOptions.networkType === void 0) {
          return makeCreateEvmStream(core2, baseUrl, createStreamOptions);
        }
        throw new IncorrectNetworkError(createStreamOptions.networkType);
    }
  };
};
var makeUpdateAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeUpdateEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeUpdateStream = function(core2, baseUrl) {
  return function(updateStreamOptions) {
    switch (updateStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeUpdateAptosStream(core2, baseUrl, updateStreamOptions);
      case StreamNetwork.EVM:
        return makeUpdateEvmStream(core2, baseUrl, updateStreamOptions);
      default:
        if (updateStreamOptions.networkType === void 0) {
          return makeUpdateEvmStream(core2, baseUrl, updateStreamOptions);
        }
        throw new IncorrectNetworkError(updateStreamOptions.networkType);
    }
  };
};
var makeDeleteAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeDeleteEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeDeleteStream = function(core2, baseUrl) {
  return function(deleteStreamOptions) {
    switch (deleteStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeDeleteAptosStream(core2, baseUrl, deleteStreamOptions);
      case StreamNetwork.EVM:
        return makeDeleteEvmStream(core2, baseUrl, deleteStreamOptions);
      default:
        if (deleteStreamOptions.networkType === void 0) {
          return makeDeleteEvmStream(core2, baseUrl, deleteStreamOptions);
        }
        throw new IncorrectNetworkError(deleteStreamOptions.networkType);
    }
  };
};
var makeGetAptosStream$1 = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getStreamsAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmStream$1 = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getStreamsEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetStreams = function(core2, baseUrl) {
  return function(getStreamsOptions) {
    switch (getStreamsOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosStream$1(core2, baseUrl, getStreamsOptions);
      case StreamNetwork.EVM:
        return makeGetEvmStream$1(core2, baseUrl, getStreamsOptions);
      default:
        if (getStreamsOptions.networkType === void 0) {
          return makeGetEvmStream$1(core2, baseUrl, getStreamsOptions);
        }
        throw new IncorrectNetworkError(getStreamsOptions.networkType);
    }
  };
};
var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
var isHexStrict = function(hex) {
  return /^(-)?0x[0-9a-f]*$/i.test(hex);
};
var sha32 = function(value) {
  var bufferValue;
  if (isHexStrict(value) && /^0x/i.test(value.toString())) {
    bufferValue = (0, import_ethereumjs_util.toBuffer)(value);
  } else {
    bufferValue = Buffer.from(value, "utf-8");
  }
  var returnValue = (0, import_ethereumjs_util.bufferToHex)((0, import_ethereumjs_util.keccak256)(bufferValue));
  if (returnValue === SHA3_NULL_S) {
    return null;
  }
  return returnValue;
};
var StreamsConfig = {
  streamsSecret: {
    name: "streamsSecret",
    defaultValue: null
  }
};
var makeVerifySignature = function(config) {
  return function(_a2) {
    var body = _a2.body, signature = _a2.signature;
    var secret = config.get(StreamsConfig.streamsSecret);
    if (!secret) {
      secret = config.get(ApiUtilsConfig.apiKey);
    }
    if (!secret) {
      throw new MoralisStreamError({
        code: StreamErrorCode.GENERIC_STREAM_ERROR,
        message: "Unable to verify signature without an api key or streams secret"
      });
    }
    var generatedSignature = sha32(JSON.stringify(body) + secret);
    if (signature !== generatedSignature) {
      throw new MoralisStreamError({
        code: StreamErrorCode.INVALID_SIGNATURE,
        message: "Signature is not valid"
      });
    }
    return true;
  };
};
var makeAddAddressAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(addAddressAptosOperation, baseUrl, core2).fetch(options);
};
var makeAddAddressEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(addAddressEvmOperation, baseUrl, core2).fetch(options);
};
var makeAddAddress = function(core2, baseUrl) {
  return function(addAddressOptions) {
    switch (addAddressOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeAddAddressAptosStream(core2, baseUrl, addAddressOptions);
      case StreamNetwork.EVM:
        return makeAddAddressEvmStream(core2, baseUrl, addAddressOptions);
      default:
        if (addAddressOptions.networkType === void 0) {
          return makeAddAddressEvmStream(core2, baseUrl, addAddressOptions);
        }
        throw new IncorrectNetworkError(addAddressOptions.networkType);
    }
  };
};
var makeUpdateAptosStreamStatus = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamStatusAptosOperation, baseUrl, core2).fetch(options);
};
var makeUpdateEvmStreamStatus = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(updateStreamStatusEvmOperation, baseUrl, core2).fetch(options);
};
var makeUpdateStreamStatus = function(core2, baseUrl) {
  return function(updateStreamOptions) {
    switch (updateStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeUpdateAptosStreamStatus(core2, baseUrl, updateStreamOptions);
      case StreamNetwork.EVM:
        return makeUpdateEvmStreamStatus(core2, baseUrl, updateStreamOptions);
      default:
        if (updateStreamOptions.networkType === void 0) {
          return makeUpdateEvmStreamStatus(core2, baseUrl, updateStreamOptions);
        }
        throw new IncorrectNetworkError(updateStreamOptions.networkType);
    }
  };
};
var hasAbis = function(webhookData) {
  if (!webhookData.abi || webhookData.abi.length < 1) {
    return false;
  }
  return true;
};
var isWebhook = function(webhookData) {
  if (typeof webhookData !== "object" || webhookData === null || !("logs" in webhookData)) {
    return false;
  }
  return true;
};
var CollectionNameBuilder = (
  /** @class */
  function() {
    function CollectionNameBuilder2() {
      this.cache = {};
      this.cacheLimit = 256;
    }
    CollectionNameBuilder2.prototype.build = function(tag) {
      var result = this.cache[tag];
      if (!result) {
        result = this.process(tag);
        if (this.cacheLimit > 0) {
          this.cache[tag] = result;
          this.cacheLimit--;
        }
      }
      return result;
    };
    CollectionNameBuilder2.prototype.process = function(tag) {
      var parts = tag.split(/[^a-zA-Z0-9_]/).filter(function(p) {
        return !!p;
      }).map(function(p) {
        return p.substring(0, 1).toUpperCase() + p.substring(1).toLowerCase();
      });
      if (parts.length < 1) {
        throw new Error('Cannot build table name from value "'.concat(tag, '"'));
      }
      return parts.join("");
    };
    return CollectionNameBuilder2;
  }()
);
var SimpleProcessor = (
  /** @class */
  function() {
    function SimpleProcessor2(collectionNameBuilder, documentBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.documentBuilder = documentBuilder;
    }
    SimpleProcessor2.prototype.process = function(items, batch) {
      var updates = [];
      if (items) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
          var item = items_1[_i];
          var document_1 = this.documentBuilder(item, batch.block, batch.confirmed, batch.chainId);
          updates.push({
            collectionName: this.collectionNameBuilder.build(batch.tag),
            document: document_1
          });
        }
      }
      return updates;
    };
    return SimpleProcessor2;
  }()
);
var Sha256 = (
  /** @class */
  function() {
    function Sha2562() {
    }
    Sha2562.hash = function(value) {
      var bytes = toUtf8Bytes(value);
      return sha256(bytes);
    };
    return Sha2562;
  }()
);
var LogRelatedId = (
  /** @class */
  function() {
    function LogRelatedId2() {
    }
    LogRelatedId2.create = function(chainId, transactionHash, logIndex) {
      var safeTransactionHash = transactionHash.toLowerCase();
      return Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash, ";").concat(logIndex));
    };
    return LogRelatedId2;
  }()
);
var TriggerItemsBuilder = (
  /** @class */
  function() {
    function TriggerItemsBuilder2() {
    }
    TriggerItemsBuilder2.build = function(triggers) {
      if (!triggers || triggers.length === 0) {
        return void 0;
      }
      return triggers.map(function(trigger) {
        return {
          name: String(trigger.name),
          value: convertValue(trigger.value)
        };
      });
    };
    return TriggerItemsBuilder2;
  }()
);
function convertValue(value) {
  var type = typeof value;
  if (type === "string" || type === "number" || type === "boolean") {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(convertValue);
  }
  return String(value);
}
var Erc20TransferDocumentBuilder = (
  /** @class */
  function() {
    function Erc20TransferDocumentBuilder2() {
    }
    Erc20TransferDocumentBuilder2.build = function(transfer, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
        transactionHash: transfer.transactionHash,
        contract: transfer.contract,
        logIndex: transfer.logIndex,
        from: transfer.from,
        to: transfer.to,
        value: transfer.value,
        tokenDecimals: parseInt(transfer.tokenDecimals, 10),
        tokenName: transfer.tokenName,
        tokenSymbol: transfer.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(transfer.triggers)
      };
      return document2;
    };
    return Erc20TransferDocumentBuilder2;
  }()
);
var Erc20TransfersProcessor = (
  /** @class */
  function() {
    function Erc20TransfersProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, Erc20TransferDocumentBuilder.build);
    }
    Erc20TransfersProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.erc20Transfers, batch);
    };
    return Erc20TransfersProcessor2;
  }()
);
var Erc20ApprovalDocumentBuilder = (
  /** @class */
  function() {
    function Erc20ApprovalDocumentBuilder2() {
    }
    Erc20ApprovalDocumentBuilder2.build = function(approval, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
        transactionHash: approval.transactionHash,
        contract: approval.contract,
        logIndex: approval.logIndex,
        owner: approval.owner,
        spender: approval.spender,
        value: approval.value,
        tokenDecimals: parseInt(approval.tokenDecimals, 10),
        tokenName: approval.tokenName,
        tokenSymbol: approval.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(approval.triggers)
      };
      return document2;
    };
    return Erc20ApprovalDocumentBuilder2;
  }()
);
var Erc20ApprovalsProcessor = (
  /** @class */
  function() {
    function Erc20ApprovalsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.processor = new SimpleProcessor(this.collectionNameBuilder, Erc20ApprovalDocumentBuilder.build);
    }
    Erc20ApprovalsProcessor2.prototype.process = function(batch) {
      return this.processor.process(batch.erc20Approvals, batch);
    };
    return Erc20ApprovalsProcessor2;
  }()
);
var TxRelatedId = (
  /** @class */
  function() {
    function TxRelatedId2() {
    }
    TxRelatedId2.create = function(chainId, transactionHash) {
      var safeTransactionHash = transactionHash.toLowerCase();
      return Sha256.hash("".concat(chainId, ";").concat(safeTransactionHash));
    };
    return TxRelatedId2;
  }()
);
var InternalTxDocumentBuilder = (
  /** @class */
  function() {
    function InternalTxDocumentBuilder2() {
    }
    InternalTxDocumentBuilder2.build = function(tx, block, confirmed, chainId) {
      var chain = Number(chainId);
      return {
        id: TxRelatedId.create(chain, tx.transactionHash),
        hash: tx.transactionHash,
        chainId: chain,
        from: tx.from,
        to: tx.to,
        value: tx.value,
        gas: parseInt(tx.gas || "0", 10),
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed
      };
    };
    return InternalTxDocumentBuilder2;
  }()
);
var InternalTxsProcessor = (
  /** @class */
  function() {
    function InternalTxsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, InternalTxDocumentBuilder.build);
    }
    InternalTxsProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.txsInternal, batch);
    };
    return InternalTxsProcessor2;
  }()
);
var LogDocumentValueFormatter = (
  /** @class */
  function() {
    function LogDocumentValueFormatter2() {
    }
    LogDocumentValueFormatter2.format = function(param) {
      switch (param.type) {
        case "string":
          return param.value;
        case "address":
          return param.value.toLowerCase();
        default:
          if (BigNumber2.isBigNumber(param.value)) {
            return param.value.toString();
          }
          return param.value.toString();
      }
    };
    return LogDocumentValueFormatter2;
  }()
);
var ParamNameResolver = (
  /** @class */
  function() {
    function ParamNameResolver2(restrictedNames) {
      this.restrictedNames = restrictedNames;
      this.usedNames = [];
    }
    ParamNameResolver2.prototype.iterate = function(object, callback) {
      var _this = this;
      var sortedNames = Object.keys(object).sort(function(a, b) {
        return a.localeCompare(b);
      });
      sortedNames.forEach(function(name) {
        var safeName = _this.resolve(name);
        callback(safeName, object[name]);
      });
    };
    ParamNameResolver2.prototype.resolve = function(name) {
      if (this.isUsed(name)) {
        do {
          name = "_".concat(name);
        } while (this.isUsed(name));
      }
      this.usedNames.push(name);
      return name;
    };
    ParamNameResolver2.prototype.isUsed = function(name) {
      return this.restrictedNames.includes(name) || this.usedNames.includes(name);
    };
    return ParamNameResolver2;
  }()
);
var paramNames = [
  "id",
  "name",
  "logIndex",
  "transactionHash",
  "address",
  "blockHash",
  "blockTimestamp",
  "blockNumber",
  "confirmed",
  "chainId",
  "triggers"
];
var restrictedParamNames = __spreadArray3(__spreadArray3([], paramNames, true), [
  // Some extra names
  "_id",
  "uniqueId",
  "updatedAt",
  "createdAt",
  "user",
  "userId"
], false);
var LogDocumentBuilder = (
  /** @class */
  function() {
    function LogDocumentBuilder2() {
    }
    LogDocumentBuilder2.build = function(log, parsedLog, block, confirmed, chainId) {
      var nameResolver = new ParamNameResolver(restrictedParamNames);
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, log.transactionHash, log.logIndex),
        name: parsedLog.name,
        logIndex: parseInt(log.logIndex, 10),
        transactionHash: log.transactionHash,
        address: log.address,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(log.triggers)
      };
      nameResolver.iterate(parsedLog.params, function(safeParamName, paramValue) {
        document2[safeParamName] = LogDocumentValueFormatter.format(paramValue);
      });
      return document2;
    };
    return LogDocumentBuilder2;
  }()
);
var LogParser = (
  /** @class */
  function() {
    function LogParser2(abiItems) {
      this.abiInterface = new Interface(abiItems);
    }
    LogParser2.prototype.read = function(log) {
      var topics = [log.topic0, log.topic1, log.topic2, log.topic3].filter(function(t) {
        return t !== null;
      });
      var eventFragment = this.abiInterface.getEvent(topics[0]);
      var args = this.abiInterface.decodeEventLog(eventFragment, log.data, topics);
      var params = {};
      eventFragment.inputs.forEach(function(input, index) {
        var type = input.type, name = input.name;
        var value = args[index];
        if (value instanceof Indexed) {
          value = value.hash;
        }
        params[name] = {
          type,
          value
        };
      });
      return {
        name: eventFragment.name,
        params
      };
    };
    return LogParser2;
  }()
);
var LogsProcessor = (
  /** @class */
  function() {
    function LogsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
    }
    LogsProcessor2.prototype.process = function(batch) {
      var updates = [];
      if (batch.abi.length < 1) {
        return updates;
      }
      var logParser = new LogParser(batch.abi);
      for (var _i = 0, _a2 = batch.logs; _i < _a2.length; _i++) {
        var log = _a2[_i];
        var logParams = logParser.read(log);
        var document_1 = LogDocumentBuilder.build(log, logParams, batch.block, batch.confirmed, batch.chainId);
        updates.push({
          collectionName: this.collectionNameBuilder.build(batch.tag),
          document: document_1
        });
      }
      return updates;
    };
    return LogsProcessor2;
  }()
);
var NftTransferDocumentBuilder = (
  /** @class */
  function() {
    function NftTransferDocumentBuilder2() {
    }
    NftTransferDocumentBuilder2.build = function(transfer, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, transfer.transactionHash, transfer.logIndex),
        transactionHash: transfer.transactionHash,
        contract: transfer.contract,
        logIndex: transfer.logIndex,
        operator: transfer.operator,
        from: transfer.from,
        to: transfer.to,
        tokenId: transfer.tokenId,
        amount: transfer.amount,
        tokenContractType: transfer.tokenContractType,
        tokenName: transfer.tokenName,
        tokenSymbol: transfer.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain,
        triggers: TriggerItemsBuilder.build(transfer.triggers)
      };
      return document2;
    };
    return NftTransferDocumentBuilder2;
  }()
);
var NftTransfersProcessor = (
  /** @class */
  function() {
    function NftTransfersProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftTransferDocumentBuilder.build);
    }
    NftTransfersProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.nftTransfers, batch);
    };
    return NftTransfersProcessor2;
  }()
);
var NftApprovalDocumentBuilder = (
  /** @class */
  function() {
    function NftApprovalDocumentBuilder2() {
    }
    NftApprovalDocumentBuilder2.build = function(approval, block, confirmed, chainId) {
      var chain = Number(chainId);
      var document2 = {
        id: LogRelatedId.create(chain, approval.transactionHash, approval.logIndex),
        transactionHash: approval.transactionHash,
        contract: approval.contract,
        logIndex: approval.logIndex,
        operator: approval.operator,
        account: approval.account,
        approvedAll: approval.approvedAll,
        tokenId: approval.tokenId,
        tokenContractType: approval.tokenContractType,
        tokenName: approval.tokenName,
        tokenSymbol: approval.tokenSymbol,
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        chainId: chain
      };
      return document2;
    };
    return NftApprovalDocumentBuilder2;
  }()
);
var NftApprovalsProcessor = (
  /** @class */
  function() {
    function NftApprovalsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.simpleProcessor = new SimpleProcessor(this.collectionNameBuilder, NftApprovalDocumentBuilder.build);
    }
    NftApprovalsProcessor2.prototype.process = function(batch) {
      return this.simpleProcessor.process(batch.nftTokenApprovals, batch);
    };
    return NftApprovalsProcessor2;
  }()
);
var TxDocumentBuilder = (
  /** @class */
  function() {
    function TxDocumentBuilder2() {
    }
    TxDocumentBuilder2.build = function(tx, block, confirmed, chainId) {
      var chain = Number(chainId);
      return {
        id: TxRelatedId.create(chain, tx.hash),
        hash: tx.hash,
        chainId: chain,
        transactionIndex: parseInt(tx.transactionIndex, 10),
        gas: parseInt(tx.gas, 10),
        gasPrice: parseInt(tx.gasPrice, 10),
        nonce: parseInt(tx.nonce, 10),
        fromAddress: tx.fromAddress,
        toAddress: tx.toAddress,
        value: tx.value || "0",
        input: tx.input,
        type: parseInt(tx.type, 10),
        receiptStatus: parseInt(tx.receiptStatus, 10),
        receiptGasUsed: parseInt(tx.receiptGasUsed, 10),
        receiptCumulativeGasUsed: parseInt(tx.receiptCumulativeGasUsed, 10),
        blockHash: block.hash,
        blockTimestamp: parseInt(block.timestamp, 10),
        blockNumber: parseInt(block.number, 10),
        confirmed,
        triggers: TriggerItemsBuilder.build(tx.triggers)
      };
    };
    return TxDocumentBuilder2;
  }()
);
var TxsProcessor = (
  /** @class */
  function() {
    function TxsProcessor2(collectionNameBuilder) {
      this.collectionNameBuilder = collectionNameBuilder;
      this.processor = new SimpleProcessor(this.collectionNameBuilder, TxDocumentBuilder.build);
    }
    TxsProcessor2.prototype.process = function(batch) {
      return this.processor.process(batch.txs, batch);
    };
    return TxsProcessor2;
  }()
);
var BatchProcessor = (
  /** @class */
  function() {
    function BatchProcessor2(erc20ApprovalsProcessor, erc20TransfersProcessor, internalTxsProcessor, logsProcessor, nftApprovalsProcessor, nftTransfersProcessor, txsProcessor) {
      this.erc20ApprovalsProcessor = erc20ApprovalsProcessor;
      this.erc20TransfersProcessor = erc20TransfersProcessor;
      this.internalTxsProcessor = internalTxsProcessor;
      this.logsProcessor = logsProcessor;
      this.nftApprovalsProcessor = nftApprovalsProcessor;
      this.nftTransfersProcessor = nftTransfersProcessor;
      this.txsProcessor = txsProcessor;
    }
    BatchProcessor2.create = function() {
      var nameBuilder = new CollectionNameBuilder();
      return new BatchProcessor2(new Erc20ApprovalsProcessor(nameBuilder), new Erc20TransfersProcessor(nameBuilder), new InternalTxsProcessor(nameBuilder), new LogsProcessor(nameBuilder), new NftApprovalsProcessor(nameBuilder), new NftTransfersProcessor(nameBuilder), new TxsProcessor(nameBuilder));
    };
    BatchProcessor2.prototype.process = function(batch) {
      var _this = this;
      return {
        erc20Approvals: function() {
          return _this.erc20ApprovalsProcessor.process(batch);
        },
        erc20Transfers: function() {
          return _this.erc20TransfersProcessor.process(batch);
        },
        internalTxs: function() {
          return _this.internalTxsProcessor.process(batch);
        },
        logs: function() {
          return _this.logsProcessor.process(batch);
        },
        nftApprovals: function() {
          return _this.nftApprovalsProcessor.process(batch);
        },
        nftTransfers: function() {
          return _this.nftTransfersProcessor.process(batch);
        },
        txs: function() {
          return _this.txsProcessor.process(batch);
        }
      };
    };
    return BatchProcessor2;
  }()
);
var parseLog = function(webhookData) {
  if (!isWebhook(webhookData)) {
    throw new MoralisStreamError({
      code: StreamErrorCode.GENERIC_STREAM_ERROR,
      message: "Cannot decode the logs. No logs found in the webhook, or invalid webhook provided."
    });
  }
  if (!hasAbis(webhookData)) {
    throw new MoralisStreamError({
      code: StreamErrorCode.GENERIC_STREAM_ERROR,
      message: "Cannot decode the logs. No abis found in the provided webhook."
    });
  }
  var logs = webhookData.logs, abi = webhookData.abi;
  var decodedLogs = [];
  logs.forEach(function(currentLog) {
    var params = new LogParser(abi).read(currentLog).params;
    var decodedLog = {};
    for (var key in params) {
      if (Object.prototype.hasOwnProperty.call(params, key)) {
        var element = params[key];
        decodedLog[key] = element.value;
      }
    }
    decodedLogs.push(decodedLog);
  });
  return decodedLogs;
};
var makeGetAptosAddresses = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getAddressesAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmAddresses = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new PaginatedOperationResolver(getAddressesEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetAddresses = function(core2, baseUrl) {
  return function(getAddressesOptions) {
    switch (getAddressesOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosAddresses(core2, baseUrl, getAddressesOptions);
      case StreamNetwork.EVM:
        return makeGetEvmAddresses(core2, baseUrl, getAddressesOptions);
      default:
        if (getAddressesOptions.networkType === void 0) {
          return makeGetEvmAddresses(core2, baseUrl, getAddressesOptions);
        }
        throw new IncorrectNetworkError(getAddressesOptions.networkType);
    }
  };
};
var makeDeleteAddressAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteAddressAptosOperation, baseUrl, core2).fetch(options);
};
var makeDeleteAddressEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  var options = __rest2(_a2, ["networkType"]);
  return new OperationResolver(deleteAddressEvmOperation, baseUrl, core2).fetch(options);
};
var makeDeleteAddress = function(core2, baseUrl) {
  return function(deleteAddressOptions) {
    switch (deleteAddressOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeDeleteAddressAptosStream(core2, baseUrl, deleteAddressOptions);
      case StreamNetwork.EVM:
        return makeDeleteAddressEvmStream(core2, baseUrl, deleteAddressOptions);
      default:
        if (deleteAddressOptions.networkType === void 0) {
          return makeDeleteAddressEvmStream(core2, baseUrl, deleteAddressOptions);
        }
        throw new IncorrectNetworkError(deleteAddressOptions.networkType);
    }
  };
};
var makeGetAptosStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest2(_a2, ["networkType", "network"]);
  return new OperationResolver(getStreamAptosOperation, baseUrl, core2).fetch(options);
};
var makeGetEvmStream = function(core2, baseUrl, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest2(_a2, ["networkType", "network"]);
  return new OperationResolver(getStreamEvmOperation, baseUrl, core2).fetch(options);
};
var makeGetStreamById = function(core2, baseUrl) {
  return function(getStreamOptions) {
    if (!getStreamOptions.networkType && getStreamOptions.network) {
      getStreamOptions.networkType = getStreamOptions.network;
    }
    switch (getStreamOptions.networkType) {
      case StreamNetwork.APTOS:
        return makeGetAptosStream(core2, baseUrl, getStreamOptions);
      case StreamNetwork.EVM:
        return makeGetEvmStream(core2, baseUrl, getStreamOptions);
      default:
        if (getStreamOptions.networkType === void 0) {
          return makeGetEvmStream(core2, baseUrl, getStreamOptions);
        }
        throw new IncorrectNetworkError(getStreamOptions.networkType);
    }
  };
};
var StreamsConfigSetup = (
  /** @class */
  function() {
    function StreamsConfigSetup2() {
    }
    StreamsConfigSetup2.register = function(config) {
      config.registerKey(StreamsConfig.streamsSecret);
    };
    return StreamsConfigSetup2;
  }()
);
var BASE_URL = "https://api.moralis-streams.com";
var Streams = (
  /** @class */
  function(_super) {
    __extends5(Streams2, _super);
    function Streams2(core2) {
      var _this = _super.call(this, Streams2.moduleName, core2, function() {
        return BASE_URL;
      }) || this;
      _this.add = makeCreateStream(_this.core, BASE_URL);
      _this.update = makeUpdateStream(_this.core, BASE_URL);
      _this.delete = makeDeleteStream(_this.core, BASE_URL);
      _this.getAll = makeGetStreams(_this.core, BASE_URL);
      _this.getById = makeGetStreamById(_this.core, BASE_URL);
      _this.updateStatus = makeUpdateStreamStatus(_this.core, BASE_URL);
      _this.addAddress = makeAddAddress(_this.core, BASE_URL);
      _this.getAddresses = makeGetAddresses(_this.core, BASE_URL);
      _this.deleteAddress = makeDeleteAddress(_this.core, BASE_URL);
      _this.getHistory = _this.createPaginatedFetcher(getHistoryOperation);
      _this.getLogs = _this.createPaginatedFetcher(getLogsOperation);
      _this.retry = _this.createFetcher(replayHistoryOperation);
      _this._getStats = _this.createFetcher(getStatsOperation);
      _this.getStats = function() {
        return _this._getStats({});
      };
      _this.getStatsById = _this.createFetcher(getStatsByIdOperation);
      _this.setSettings = _this.createFetcher(setSettingsOperation);
      _this._readSettings = _this.createFetcher(getSettingsOperation);
      _this.readSettings = function() {
        return _this._readSettings({});
      };
      _this.verifySignature = function(options) {
        return makeVerifySignature(_this.core.config)(options);
      };
      _this.parsedLogs = function(webhookData) {
        return parseLog(webhookData);
      };
      return _this;
    }
    Streams2.create = function(core2) {
      return new Streams2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    Streams2.prototype.setup = function() {
      StreamsConfigSetup.register(this.core.config);
    };
    Streams2.prototype.start = function() {
    };
    Streams2.prototype.createFetcher = function(operation) {
      return new OperationResolver(operation, BASE_URL, this.core).fetch;
    };
    Streams2.prototype.createPaginatedFetcher = function(operation) {
      return new PaginatedOperationResolver(operation, BASE_URL, this.core).fetch;
    };
    Streams2.moduleName = "streams";
    return Streams2;
  }(ApiModule)
);

// node_modules/@moralisweb3/common-sol-utils/lib/esm/index.js
var import_bn2 = __toESM(require_bn());
var import_bs58 = __toESM(require_bs58());
var import_buffer = __toESM(require_buffer());
var PUBLIC_KEY_LENGTH = 32;
function isPublicKeyData(value) {
  return value._bn !== void 0;
}
var PublicKey = (
  /** @class */
  function() {
    function PublicKey2(value) {
      if (isPublicKeyData(value)) {
        this._bn = value._bn;
      } else {
        if (typeof value === "string") {
          var decoded = import_bs58.default.decode(value);
          if (decoded.length !== PUBLIC_KEY_LENGTH) {
            throw new Error("Invalid public key input");
          }
          this._bn = new import_bn2.default(decoded);
        } else {
          this._bn = new import_bn2.default(value);
        }
        if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {
          throw new Error("Invalid public key input");
        }
      }
    }
    PublicKey2.prototype.toBase58 = function() {
      return import_bs58.default.encode(this.toBytes());
    };
    PublicKey2.prototype.toBytes = function() {
      var buf = this.toBuffer();
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    };
    PublicKey2.prototype.toBuffer = function() {
      var b = this._bn.toArrayLike(import_buffer.Buffer);
      if (b.length === PUBLIC_KEY_LENGTH) {
        return b;
      }
      var zeroPad2 = import_buffer.Buffer.alloc(32);
      b.copy(zeroPad2, 32 - b.length);
      return zeroPad2;
    };
    Object.defineProperty(PublicKey2.prototype, Symbol.toStringTag, {
      get: function() {
        return "PublicKey(".concat(this.toString(), ")");
      },
      enumerable: false,
      configurable: true
    });
    PublicKey2.prototype.toString = function() {
      return this.toBase58();
    };
    return PublicKey2;
  }()
);
var SolAddress = (
  /** @class */
  function() {
    function SolAddress2(address) {
      this.address = address;
    }
    SolAddress2.create = function(address) {
      return address instanceof SolAddress2 ? address : new SolAddress2(SolAddress2.parse(address));
    };
    SolAddress2.fromJSON = function(address) {
      return SolAddress2.create(address);
    };
    SolAddress2.parse = function(address) {
      try {
        var publicKey = new PublicKey(address);
        return publicKey.toBase58();
      } catch (e) {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Invalid Solana address provided: ".concat(address),
          cause: e
        });
      }
    };
    SolAddress2.prototype.format = function() {
      return this.address;
    };
    SolAddress2.prototype.equals = function(address) {
      return this.address === SolAddress2.create(address).address;
    };
    SolAddress2.prototype.toString = function() {
      return this.address;
    };
    SolAddress2.prototype.toJSON = function() {
      return this.address;
    };
    return SolAddress2;
  }()
);
var solNetworkNames = ["mainnet", "devnet"];
var SolNetwork = (
  /** @class */
  function() {
    function SolNetwork2(network) {
      this.network = network;
    }
    Object.defineProperty(SolNetwork2, "MAINNET", {
      /**
       * Returns MAINNET network
       *
       * @example SolNetwork.MAINNET
       */
      get: function() {
        return SolNetwork2.create("mainnet");
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNetwork2, "DEVNET", {
      /**
       * Returns DEVNET network
       *
       * @example SolNetwork.MAINNET
       */
      get: function() {
        return SolNetwork2.create("devnet");
      },
      enumerable: false,
      configurable: true
    });
    SolNetwork2.create = function(network) {
      return network instanceof SolNetwork2 ? network : new SolNetwork2(SolNetwork2.parse(network));
    };
    SolNetwork2.fromJSON = function(network) {
      return SolNetwork2.create(network);
    };
    SolNetwork2.parse = function(network) {
      if (typeof network === "string") {
        if (!solNetworkNames.includes(network)) {
          throw new CoreError({
            code: CoreErrorCode.INVALID_ARGUMENT,
            message: "Solana network is not supported: ".concat(network)
          });
        }
      }
      return network;
    };
    SolNetwork2.prototype.format = function() {
      return this.network;
    };
    SolNetwork2.prototype.equals = function(network) {
      return this.network === SolNetwork2.create(network).network;
    };
    SolNetwork2.prototype.toJSON = function() {
      return this.network;
    };
    SolNetwork2.prototype.toString = function() {
      return this.network;
    };
    return SolNetwork2;
  }()
);
var unitToDecimals3 = {
  solana: 9,
  lamports: 0
};
var SolNative = (
  /** @class */
  function() {
    function SolNative2(rawValue) {
      this.rawValue = rawValue;
    }
    SolNative2.create = function(value, unit) {
      if (value instanceof SolNative2) {
        return value;
      }
      return new SolNative2(SolNative2.parse(value, unit));
    };
    SolNative2.fromJSON = function(json) {
      return SolNative2.create(json, "lamports");
    };
    SolNative2.parse = function(value, unit) {
      if (unit === void 0) {
        unit = "solana";
      }
      var decimal;
      if (typeof unit === "number") {
        decimal = unit;
      } else if (unitToDecimals3[unit] !== void 0) {
        decimal = unitToDecimals3[unit];
      } else {
        throw new CoreError({
          code: CoreErrorCode.INVALID_ARGUMENT,
          message: "Not supported Solana unit: ".concat(unit)
        });
      }
      return BigNumber.fromDecimal(value.toString(), decimal);
    };
    SolNative2.equals = function(valueA, valueB) {
      var solNativeA = SolNative2.create(valueA);
      var solNativeB = SolNative2.create(valueB);
      return solNativeA.lamports === solNativeB.lamports;
    };
    SolNative2.prototype.equals = function(value) {
      return SolNative2.equals(this, value);
    };
    SolNative2.prototype.format = function() {
      return this.lamports;
    };
    SolNative2.prototype.toJSON = function() {
      return this.lamports;
    };
    SolNative2.prototype.toString = function() {
      return this.lamports;
    };
    Object.defineProperty(SolNative2.prototype, "value", {
      /**
       * @returns the value of the SolNative as a BigNumber
       * @example `native.value`
       */
      get: function() {
        return this.rawValue;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNative2.prototype, "solana", {
      /**
       * Converts the SolNative to a solana unit.
       * @returns the value of the SolNative as a solana string
       * @example `native.solana`
       */
      get: function() {
        return this.rawValue.toDecimal(unitToDecimals3["solana"]);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(SolNative2.prototype, "lamports", {
      /**
       * Converts the SolNative to a string.
       * @returns the value of the SolNative as a string
       * @example `native.lamports`
       */
      get: function() {
        return this.rawValue.toString();
      },
      enumerable: false,
      configurable: true
    });
    return SolNative2;
  }()
);
var SolSPLNativePrice = (
  /** @class */
  function() {
    function SolSPLNativePrice2(input) {
      this.value = input.value;
      this.decimals = input.decimals;
      this.name = input.name;
      this.symbol = input.symbol;
    }
    SolSPLNativePrice2.create = function(input) {
      if (input instanceof SolSPLNativePrice2) {
        return input;
      }
      return new SolSPLNativePrice2(input);
    };
    SolSPLNativePrice2.fromJSON = function(json) {
      var input = {
        value: json.value,
        decimals: json.decimals,
        name: json.name,
        symbol: json.symbol
      };
      return SolSPLNativePrice2.create(input);
    };
    SolSPLNativePrice2.prototype.toJSON = function() {
      return {
        value: this.value,
        decimals: this.decimals,
        name: this.name,
        symbol: this.symbol
      };
    };
    return SolSPLNativePrice2;
  }()
);
var SolSPLTokenPrice = (
  /** @class */
  function() {
    function SolSPLTokenPrice2(input) {
      this.nativePrice = input.nativePrice ? SolSPLNativePrice.create(input.nativePrice) : void 0;
      this.usdPrice = input.usdPrice;
      this.exchangeAddress = input.exchangeAddress ? SolAddress.create(input.exchangeAddress) : void 0;
      this.exchangeName = input.exchangeName;
    }
    SolSPLTokenPrice2.create = function(input) {
      if (input instanceof SolSPLTokenPrice2) {
        return input;
      }
      return new SolSPLTokenPrice2(input);
    };
    SolSPLTokenPrice2.fromJSON = function(json) {
      var input = {
        nativePrice: json.nativePrice ? SolSPLNativePrice.fromJSON(json.nativePrice) : void 0,
        usdPrice: json.usdPrice,
        exchangeAddress: json.exchangeAddress ? SolAddress.fromJSON(json.exchangeAddress) : void 0,
        exchangeName: json.exchangeName
      };
      return SolSPLTokenPrice2.create(input);
    };
    SolSPLTokenPrice2.prototype.toJSON = function() {
      return {
        nativePrice: this.nativePrice ? this.nativePrice.toJSON() : void 0,
        usdPrice: this.usdPrice,
        exchangeAddress: this.exchangeAddress ? this.exchangeAddress.toJSON() : void 0,
        exchangeName: this.exchangeName
      };
    };
    return SolSPLTokenPrice2;
  }()
);
var GetTokenPriceOperation = {
  operationId: "getTokenPrice",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/token/{network}/{address}/price",
  parameterNames: ["network", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return SolSPLTokenPrice.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = SolNetwork.create(request.network);
    var address = SolAddress.create(request.address);
    return {
      network: network.toJSON(),
      address: address.toJSON()
    };
  }
};
var SolMetaplexToken = (
  /** @class */
  function() {
    function SolMetaplexToken2(input) {
      this.metadataUri = input.metadataUri;
      this.masterEdition = input.masterEdition;
      this.isMutable = input.isMutable;
      this.primarySaleHappened = input.primarySaleHappened;
      this.sellerFeeBasisPoints = input.sellerFeeBasisPoints;
      this.updateAuthority = input.updateAuthority;
    }
    SolMetaplexToken2.create = function(input) {
      if (input instanceof SolMetaplexToken2) {
        return input;
      }
      return new SolMetaplexToken2(input);
    };
    SolMetaplexToken2.fromJSON = function(json) {
      var input = {
        metadataUri: json.metadataUri,
        masterEdition: json.masterEdition,
        isMutable: json.isMutable,
        primarySaleHappened: json.primarySaleHappened,
        sellerFeeBasisPoints: json.sellerFeeBasisPoints,
        updateAuthority: json.updateAuthority
      };
      return SolMetaplexToken2.create(input);
    };
    SolMetaplexToken2.prototype.toJSON = function() {
      return {
        metadataUri: this.metadataUri,
        masterEdition: this.masterEdition,
        isMutable: this.isMutable,
        primarySaleHappened: this.primarySaleHappened,
        sellerFeeBasisPoints: this.sellerFeeBasisPoints,
        updateAuthority: this.updateAuthority
      };
    };
    return SolMetaplexToken2;
  }()
);
var SolTokenMetadata = (
  /** @class */
  function() {
    function SolTokenMetadata2(input) {
      this.mint = input.mint;
      this.standard = input.standard;
      this.name = input.name;
      this.symbol = input.symbol;
      this.metaplex = SolMetaplexToken.create(input.metaplex);
    }
    SolTokenMetadata2.create = function(input) {
      if (input instanceof SolTokenMetadata2) {
        return input;
      }
      return new SolTokenMetadata2(input);
    };
    SolTokenMetadata2.fromJSON = function(json) {
      var input = {
        mint: json.mint,
        standard: json.standard,
        name: json.name,
        symbol: json.symbol,
        metaplex: SolMetaplexToken.fromJSON(json.metaplex)
      };
      return SolTokenMetadata2.create(input);
    };
    SolTokenMetadata2.prototype.toJSON = function() {
      return {
        mint: this.mint,
        standard: this.standard,
        name: this.name,
        symbol: this.symbol,
        metaplex: this.metaplex.toJSON()
      };
    };
    return SolTokenMetadata2;
  }()
);
var GetTokenMetadataOperation = {
  operationId: "getTokenMetadata",
  groupName: "token",
  httpMethod: "get",
  routePattern: "/token/{network}/{address}/metadata",
  parameterNames: ["network", "address"],
  hasResponse: true,
  hasBody: false,
  parseResponse: function(json) {
    return SolTokenMetadata.fromJSON(json);
  },
  serializeRequest: function(request) {
    var network = SolNetwork.create(request.network);
    var address = SolAddress.create(request.address);
    return {
      network: network.toJSON(),
      address: address.toJSON()
    };
  }
};
var SolGetTokenPriceNetworkEnum = (
  /** @class */
  function() {
    function SolGetTokenPriceNetworkEnum2() {
    }
    SolGetTokenPriceNetworkEnum2.create = function(input) {
      return input;
    };
    SolGetTokenPriceNetworkEnum2.fromJSON = function(json) {
      return json;
    };
    return SolGetTokenPriceNetworkEnum2;
  }()
);
var SolGetTokenMetadataNetworkEnum = (
  /** @class */
  function() {
    function SolGetTokenMetadataNetworkEnum2() {
    }
    SolGetTokenMetadataNetworkEnum2.create = function(input) {
      return input;
    };
    SolGetTokenMetadataNetworkEnum2.fromJSON = function(json) {
      return json;
    };
    return SolGetTokenMetadataNetworkEnum2;
  }()
);
var extendStatics6 = function(d, b) {
  extendStatics6 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics6(d, b);
};
function __extends6(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics6(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __spreadArray4(to, from, pack2) {
  if (pack2 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var CommonSolUtilsConfig = {
  defaultSolNetwork: {
    name: "defaultSolNetwork",
    defaultValue: "mainnet"
  }
};
var CommonSolUtilsConfigSetup = (
  /** @class */
  function() {
    function CommonSolUtilsConfigSetup2() {
    }
    CommonSolUtilsConfigSetup2.register = function(config) {
      config.registerKey(CommonSolUtilsConfig.defaultSolNetwork);
    };
    return CommonSolUtilsConfigSetup2;
  }()
);
var CommonSolUtils = (
  /** @class */
  function(_super) {
    __extends6(CommonSolUtils2, _super);
    function CommonSolUtils2(core2) {
      return _super.call(this, CommonSolUtils2.moduleName, core2) || this;
    }
    CommonSolUtils2.create = function(core2) {
      return new CommonSolUtils2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    CommonSolUtils2.prototype.setup = function() {
      CommonSolUtilsConfigSetup.register(this.core.config);
    };
    CommonSolUtils2.prototype.start = function() {
    };
    Object.defineProperty(CommonSolUtils2.prototype, "SolAddress", {
      get: function() {
        return SolAddress;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonSolUtils2.prototype, "SolNative", {
      get: function() {
        return SolNative;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(CommonSolUtils2.prototype, "SolNetwork", {
      get: function() {
        return SolNetwork;
      },
      enumerable: false,
      configurable: true
    });
    CommonSolUtils2.moduleName = "solUtils";
    return CommonSolUtils2;
  }(Module)
);
var SolNetworkResolver = (
  /** @class */
  function() {
    function SolNetworkResolver2() {
    }
    SolNetworkResolver2.resolve = function(network, core2) {
      if (!network) {
        network = core2.config.get(CommonSolUtilsConfig.defaultSolNetwork);
      }
      return SolNetwork.create(network).network;
    };
    return SolNetworkResolver2;
  }()
);
var getBalanceOperation = {
  method: "GET",
  name: "getBalance",
  id: "balance",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/balance",
  getRequestUrlParams: getRequestUrlParams$53,
  deserializeResponse: deserializeResponse$53,
  serializeRequest: serializeRequest$53,
  deserializeRequest: deserializeRequest$53
};
function getRequestUrlParams$53(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$53(jsonResponse) {
  return SolNative.create(jsonResponse.lamports);
}
function serializeRequest$53(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$53(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getNFTsOperation = {
  method: "GET",
  name: "getNFTs",
  id: "getNFTs",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/nft",
  getRequestUrlParams: getRequestUrlParams$43,
  deserializeResponse: deserializeResponse$43,
  serializeRequest: serializeRequest$43,
  deserializeRequest: deserializeRequest$43
};
function getRequestUrlParams$43(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$43(jsonResponse) {
  return jsonResponse.map(function(item) {
    return {
      associatedTokenAddress: SolAddress.create(item.associatedTokenAddress),
      mint: SolAddress.create(item.mint),
      name: item.name,
      symbol: item.symbol
    };
  });
}
function serializeRequest$43(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$43(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getPortfolioOperation = {
  method: "GET",
  name: "getPortfolio",
  id: "getPortfolio",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/portfolio",
  getRequestUrlParams: getRequestUrlParams$33,
  deserializeResponse: deserializeResponse$33,
  serializeRequest: serializeRequest$33,
  deserializeRequest: deserializeRequest$33
};
function getRequestUrlParams$33(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$33(jsonResponse) {
  return {
    nativeBalance: SolNative.create(jsonResponse.nativeBalance.lamports, "lamports"),
    nfts: jsonResponse.nfts.map(function(nft) {
      return {
        associatedTokenAddress: SolAddress.create(nft.associatedTokenAddress),
        mint: SolAddress.create(nft.mint),
        name: nft.name,
        symbol: nft.symbol
      };
    }),
    tokens: jsonResponse.tokens.map(function(token) {
      return {
        associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),
        mint: SolAddress.create(token.mint),
        amount: SolNative.create(token.amountRaw, "lamports"),
        name: token.name,
        symbol: token.symbol
      };
    })
  };
}
function serializeRequest$33(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$33(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getSPLOperation = {
  method: "GET",
  name: "getSPL",
  id: "getSPL",
  groupName: "account",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/account/{network}/{address}/tokens",
  getRequestUrlParams: getRequestUrlParams$23,
  deserializeResponse: deserializeResponse$23,
  serializeRequest: serializeRequest$23,
  deserializeRequest: deserializeRequest$23
};
function getRequestUrlParams$23(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$23(jsonResponse) {
  return jsonResponse.map(function(token) {
    return {
      associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),
      mint: SolAddress.create(token.mint),
      amount: SolNative.create(token.amountRaw, "lamports"),
      name: token.name,
      symbol: token.symbol
    };
  });
}
function serializeRequest$23(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$23(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getNFTMetadataOperation2 = {
  method: "GET",
  name: "getNFTMetadata",
  id: "getNFTMetadata",
  groupName: "nft",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/nft/{network}/{address}/metadata",
  getRequestUrlParams: getRequestUrlParams$13,
  deserializeResponse: deserializeResponse$13,
  serializeRequest: serializeRequest$13,
  deserializeRequest: deserializeRequest$13
};
function getRequestUrlParams$13(request, core2) {
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse$13(jsonResponse) {
  return {
    mint: SolAddress.create(jsonResponse.mint),
    standard: jsonResponse.standard,
    name: jsonResponse.name,
    symbol: jsonResponse.symbol,
    metaplex: {
      metadataUri: jsonResponse.metaplex.metadataUri,
      updateAuthority: SolAddress.create(jsonResponse.metaplex.updateAuthority),
      sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,
      primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,
      isMutable: jsonResponse.metaplex.isMutable,
      masterEdition: jsonResponse.metaplex.masterEdition
    }
  };
}
function serializeRequest$13(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest$13(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var getTokenPriceOperation2 = {
  method: "GET",
  name: "getTokenPrice",
  id: "getTokenPrice",
  groupName: "token",
  urlPathParamNames: ["network", "address"],
  urlPathPattern: "/token/{network}/{address}/price",
  getRequestUrlParams: getRequestUrlParams3,
  deserializeResponse: deserializeResponse3,
  serializeRequest: serializeRequest3,
  deserializeRequest: deserializeRequest3
};
function getRequestUrlParams3(request, core2) {
  var network = SolNetworkResolver.resolve(request.network, core2);
  if (network !== "mainnet") {
    throw new MoralisApiError({
      message: "Incorrct value for 'network', getTokenPrice is only available on mainnet",
      code: ApiErrorCode.INVALID_PARAMS
    });
  }
  return {
    network: SolNetworkResolver.resolve(request.network, core2),
    address: SolAddress.create(request.address).address
  };
}
function deserializeResponse3(jsonResponse) {
  return SolSPLTokenPrice.fromJSON(jsonResponse);
}
function serializeRequest3(request, core2) {
  return {
    address: SolAddress.create(request.address).address,
    network: SolNetworkResolver.resolve(request.network, core2)
  };
}
function deserializeRequest3(jsonRequest) {
  return {
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address)
  };
}
var operationsV22 = [
  getBalanceOperation,
  getNFTsOperation,
  getPortfolioOperation,
  getSPLOperation,
  getNFTMetadataOperation2
];
var operationsV2All2 = __spreadArray4(__spreadArray4([], operationsV22, true), [getTokenPriceOperation2], false);

// node_modules/@moralisweb3/common-auth-utils/lib/esm/index.js
var __assign5 = function() {
  __assign5 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
function __rest3(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var verifyChallengeAptosOperation = {
  method: "POST",
  name: "verifyChallengeAptos",
  id: "verifyChallengeAptos",
  groupName: "aptos",
  urlPathPattern: "/challenge/verify/aptos",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$a3,
  getRequestBody: getRequestBody$92,
  serializeRequest: serializeRequest$a3,
  deserializeRequest: deserializeRequest$a3,
  deserializeResponse: deserializeResponse$a3
};
function getRequestUrlParams$a3() {
  return {};
}
function getRequestBody$92(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$a3(_a2) {
  var network = _a2.network, jsonResponse = __rest3(_a2, ["network"]);
  return __assign5(__assign5({}, jsonResponse), { network: AptosNetwork.create(network), address: AptosAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$a3(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$a3(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeAptosOperation = {
  method: "POST",
  name: "requestChallengeAptos",
  id: "requestChallengeAptos",
  groupName: "aptos",
  urlPathPattern: "/challenge/request/aptos",
  bodyParamNames: [
    "domain",
    "network",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout",
    "publicKey"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$93,
  getRequestBody: getRequestBody$82,
  serializeRequest: serializeRequest$93,
  deserializeRequest: deserializeRequest$93,
  deserializeResponse: deserializeResponse$93
};
function getRequestUrlParams$93() {
  return {};
}
function getRequestBody$82(request) {
  return {
    domain: request.domain,
    network: AptosNetwork.create(request.network).toString(),
    address: AptosAddress.create(request.address).toString(),
    publicKey: request.publicKey,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse$93(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$93(request, core2) {
  return {
    domain: request.domain,
    network: AptosNetworkResolver.resolve(request.network, core2),
    address: AptosAddress.create(request.address).toString(),
    publicKey: request.publicKey,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest$93(jsonRequest) {
  return {
    domain: jsonRequest.domain,
    network: AptosNetwork.create(jsonRequest.network),
    address: AptosAddress.create(jsonRequest.address),
    publicKey: jsonRequest.publicKey,
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}
var verifyChallengeEvmOperation = {
  method: "POST",
  name: "verifyChallengeEvm",
  id: "verifyChallengeEvm",
  groupName: "evm",
  urlPathPattern: "/challenge/verify/evm",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$83,
  getRequestBody: getRequestBody$72,
  serializeRequest: serializeRequest$83,
  deserializeRequest: deserializeRequest$83,
  deserializeResponse: deserializeResponse$83
};
function getRequestUrlParams$83() {
  return {};
}
function getRequestBody$72(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$83(_a2) {
  var chainId = _a2.chainId, jsonResponse = __rest3(_a2, ["chainId"]);
  return __assign5(__assign5({}, jsonResponse), { chain: EvmChain.create(chainId), address: EvmAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$83(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$83(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeEvmOperation = {
  method: "POST",
  name: "requestChallengeEvm",
  id: "requestChallengeEvm",
  groupName: "evm",
  urlPathPattern: "/challenge/request/evm",
  bodyParamNames: [
    "domain",
    "chainId",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$73,
  getRequestBody: getRequestBody$62,
  serializeRequest: serializeRequest$73,
  deserializeRequest: deserializeRequest$73,
  deserializeResponse: deserializeResponse$73
};
function getRequestUrlParams$73() {
  return {};
}
function getRequestBody$62(request, core2) {
  return {
    domain: request.domain,
    chainId: EvmChainResolver.resolve(request.chainId, core2).hex,
    address: EvmAddress.create(request.address).checksum,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse$73(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$73(request, core2) {
  return {
    domain: request.domain,
    chainId: EvmChainResolver.resolve(request.chainId, core2).decimal.toString(),
    address: EvmAddress.create(request.address).checksum,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest$73(jsonRequest, core2) {
  return {
    domain: jsonRequest.domain,
    chainId: EvmChainResolver.resolve(jsonRequest.chainId, core2),
    address: EvmAddress.create(jsonRequest.address),
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}
var getAddressesOperation = {
  method: "GET",
  name: "getAddresses",
  id: "getAddresses",
  groupName: "evm",
  urlPathPattern: "/profile/{profileId}/addresses",
  urlPathParamNames: ["profileId"],
  getRequestUrlParams: getRequestUrlParams$63,
  serializeRequest: serializeRequest$63,
  deserializeRequest: deserializeRequest$63,
  deserializeResponse: deserializeResponse$63
};
function getRequestUrlParams$63(request) {
  return {
    profileId: request.profileId
  };
}
function deserializeResponse$63(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$63(request) {
  return request;
}
function deserializeRequest$63(jsonRequest) {
  return jsonRequest;
}
var removeBindOperation = {
  method: "POST",
  name: "removeBind",
  id: "removeBind",
  groupName: "evm",
  urlPathPattern: "/bind/remove",
  bodyParamNames: ["blockchainType", "address", "profileId", "publicKey"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$54,
  getRequestBody: getRequestBody$52,
  serializeRequest: serializeRequest$54,
  deserializeRequest: deserializeRequest$54,
  deserializeResponse: deserializeResponse$54
};
function getRequestUrlParams$54() {
  return {};
}
function getRequestBody$52(request) {
  return {
    blockchainType: request.blockchainType,
    address: EvmAddress.create(request.address).checksum,
    profileId: request.profileId,
    publicKey: request.publicKey
  };
}
function deserializeResponse$54(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$54(request) {
  return {
    blockchainType: request.blockchainType,
    address: EvmAddress.create(request.address).checksum,
    profileId: request.profileId,
    publicKey: request.publicKey
  };
}
function deserializeRequest$54(jsonRequest) {
  return {
    blockchainType: jsonRequest.blockchainType,
    address: EvmAddress.create(jsonRequest.address),
    profileId: jsonRequest.profileId,
    publicKey: jsonRequest.publicKey
  };
}
var requestBindOperation = {
  method: "POST",
  name: "requestBind",
  id: "requestBind",
  groupName: "evm",
  urlPathPattern: "/bind/request",
  bodyParamNames: ["addresses"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$44,
  getRequestBody: getRequestBody$42,
  serializeRequest: serializeRequest$44,
  deserializeRequest: deserializeRequest$44,
  deserializeResponse: deserializeResponse$44
};
function getRequestUrlParams$44() {
  return {};
}
function getRequestBody$42(request) {
  return {
    addresses: request.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address).checksum
      };
    })
  };
}
function deserializeResponse$44(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$44(request) {
  return {
    addresses: request.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address).checksum
      };
    })
  };
}
function deserializeRequest$44(jsonRequest) {
  return {
    addresses: jsonRequest.addresses.map(function(address) {
      return {
        blockchainType: address.blockchainType,
        address: EvmAddress.create(address.address)
      };
    })
  };
}
var verifyRemoveBindOperation = {
  method: "POST",
  name: "verifyRemoveBind",
  id: "verifyRemoveBind",
  groupName: "evm",
  urlPathPattern: "/bind/remove/verify",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$34,
  getRequestBody: getRequestBody$33,
  serializeRequest: serializeRequest$34,
  deserializeRequest: deserializeRequest$34,
  deserializeResponse: deserializeResponse$34
};
function getRequestUrlParams$34() {
  return {};
}
function getRequestBody$33(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$34(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$34(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$34(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var verifyRequestBindOperation = {
  method: "POST",
  name: "verifyRequestBind",
  id: "verifyRequestBind",
  groupName: "evm",
  urlPathPattern: "/bind/request/verify",
  bodyParamNames: ["verifications"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$24,
  getRequestBody: getRequestBody$23,
  serializeRequest: serializeRequest$24,
  deserializeRequest: deserializeRequest$24,
  deserializeResponse: deserializeResponse$24
};
function getRequestUrlParams$24() {
  return {};
}
function getRequestBody$23(request) {
  return {
    verifications: request.verifications
  };
}
function deserializeResponse$24(jsonResponse) {
  return jsonResponse;
}
function serializeRequest$24(request) {
  return {
    verifications: request.verifications
  };
}
function deserializeRequest$24(jsonRequest) {
  return {
    verifications: jsonRequest.verifications
  };
}
var verifyChallengeSolanaOperation = {
  method: "POST",
  name: "verifyChallengeSolana",
  id: "verifyChallengeSolana",
  groupName: "solana",
  urlPathPattern: "/challenge/verify/solana",
  bodyParamNames: ["message", "signature"],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams$14,
  getRequestBody: getRequestBody$13,
  serializeRequest: serializeRequest$14,
  deserializeRequest: deserializeRequest$14,
  deserializeResponse: deserializeResponse$14
};
function getRequestUrlParams$14() {
  return {};
}
function getRequestBody$13(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeResponse$14(_a2) {
  var network = _a2.network, jsonResponse = __rest3(_a2, ["network"]);
  return __assign5(__assign5({}, jsonResponse), { solNetwork: SolNetwork.create(network), address: SolAddress.create(jsonResponse.address), expirationTime: maybe(jsonResponse.expirationTime, function(value) {
    return new Date(value);
  }), notBefore: maybe(jsonResponse.notBefore, function(value) {
    return new Date(value);
  }) });
}
function serializeRequest$14(request) {
  return {
    message: request.message,
    signature: request.signature
  };
}
function deserializeRequest$14(jsonRequest) {
  return {
    message: jsonRequest.message,
    signature: jsonRequest.signature
  };
}
var requestChallengeSolanaOperation = {
  method: "POST",
  name: "requestChallengeSolana",
  id: "requestChallengeSolana",
  groupName: "solana",
  urlPathPattern: "/challenge/request/solana",
  bodyParamNames: [
    "domain",
    "network",
    "address",
    "statement",
    "uri",
    "expirationTime",
    "notBefore",
    "resources",
    "timeout"
  ],
  bodyType: "properties",
  getRequestUrlParams: getRequestUrlParams4,
  getRequestBody: getRequestBody3,
  serializeRequest: serializeRequest4,
  deserializeRequest: deserializeRequest4,
  deserializeResponse: deserializeResponse4
};
function getRequestUrlParams4() {
  return {};
}
function getRequestBody3(request) {
  return {
    domain: request.domain,
    network: SolNetwork.create(request.network).network,
    address: SolAddress.create(request.address).address,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeResponse4(jsonResponse) {
  return jsonResponse;
}
function serializeRequest4(request) {
  return {
    domain: request.domain,
    network: SolNetwork.create(request.network).network,
    address: SolAddress.create(request.address).address,
    statement: request.statement,
    uri: request.uri,
    expirationTime: request.expirationTime,
    notBefore: request.notBefore,
    resources: request.resources,
    timeout: request.timeout
  };
}
function deserializeRequest4(jsonRequest) {
  return {
    domain: jsonRequest.domain,
    network: SolNetwork.create(jsonRequest.network),
    address: SolAddress.create(jsonRequest.address),
    statement: jsonRequest.statement,
    uri: jsonRequest.uri,
    expirationTime: jsonRequest.expirationTime,
    notBefore: jsonRequest.notBefore,
    resources: jsonRequest.resources,
    timeout: jsonRequest.timeout
  };
}

// node_modules/@moralisweb3/auth/lib/esm/index.js
var extendStatics7 = function(d, b) {
  extendStatics7 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics7(d, b);
};
function __extends7(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics7(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign6 = function() {
  __assign6 = Object.assign || function __assign7(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
function __rest4(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator3(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var AuthNetworkType;
(function(AuthNetworkType2) {
  AuthNetworkType2["EVM"] = "evm";
  AuthNetworkType2["SOLANA"] = "solana";
  AuthNetworkType2["APTOS"] = "aptos";
})(AuthNetworkType || (AuthNetworkType = {}));
var makeEvmRequestMessage = function(core2, _a2) {
  var chain = _a2.chain, address = _a2.address;
  _a2.networkType;
  var options = __rest4(_a2, ["chain", "address", "networkType"]);
  return new OperationResolver(requestChallengeEvmOperation, BASE_URL2, core2).fetch(__assign6({ chainId: EvmChain.create(chain).hex, address: EvmAddress.create(address).checksum }, options));
};
var makeSolRequestMessage = function(core2, _a2) {
  var address = _a2.address;
  _a2.networkType;
  var solNetwork = _a2.solNetwork, options = __rest4(_a2, ["address", "networkType", "solNetwork"]);
  if (!options.network && solNetwork) {
    options.network = solNetwork;
  }
  return new OperationResolver(requestChallengeSolanaOperation, BASE_URL2, core2).fetch(__assign6({ address: SolAddress.create(address).toString() }, options));
};
var makeAptosRequestMessage = function(core2, _a2) {
  var address = _a2.address;
  _a2.networkType;
  var options = __rest4(_a2, ["address", "networkType"]);
  return new OperationResolver(requestChallengeAptosOperation, BASE_URL2, core2).fetch(__assign6({ address: AptosAddress.create(address).toString() }, options));
};
var makeRequestMessage = function(core2) {
  return function(options) {
    return __awaiter3(void 0, void 0, void 0, function() {
      return __generator3(this, function(_a2) {
        switch (options.networkType) {
          case AuthNetworkType.EVM:
            return [2, makeEvmRequestMessage(core2, options)];
          case AuthNetworkType.SOLANA:
            return [2, makeSolRequestMessage(core2, options)];
          case AuthNetworkType.APTOS:
            return [2, makeAptosRequestMessage(core2, options)];
          default:
            if (!options.networkType) {
              return [2, makeEvmRequestMessage(core2, options)];
            }
            throw new MoralisAuthError({
              code: AuthErrorCode.INCORRECT_NETWORK,
              message: 'Incorrect networkType provided. Got "'.concat(options.networkType, '", Valid values are: ').concat(Object.values(AuthNetworkType).map(function(value) {
                return '"'.concat(value, '"');
              }).join(", "))
            });
        }
      });
    });
  };
};
var makeEvmVerify = function(core2, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest4(_a2, ["networkType", "network"]);
  return new OperationResolver(verifyChallengeEvmOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeSolVerify = function(core2, _a2) {
  _a2.networkType;
  _a2.network;
  var options = __rest4(_a2, ["networkType", "network"]);
  return new OperationResolver(verifyChallengeSolanaOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeAptosVerify = function(core2, _a2) {
  _a2.networkType;
  var options = __rest4(_a2, ["networkType"]);
  return new OperationResolver(verifyChallengeAptosOperation, BASE_URL2, core2).fetch({
    message: options.message,
    signature: options.signature
  });
};
var makeVerify = function(core2) {
  return function(options) {
    return __awaiter3(void 0, void 0, void 0, function() {
      return __generator3(this, function(_a2) {
        if (!options.networkType && options.network) {
          options.networkType = options.network;
        }
        switch (options.networkType) {
          case AuthNetworkType.EVM:
            return [2, makeEvmVerify(core2, options)];
          case AuthNetworkType.SOLANA:
            return [2, makeSolVerify(core2, options)];
          case AuthNetworkType.APTOS:
            return [2, makeAptosVerify(core2, options)];
          default:
            if (!options.networkType) {
              return [2, makeEvmVerify(core2, options)];
            }
            throw new MoralisAuthError({
              code: AuthErrorCode.INCORRECT_NETWORK,
              message: 'Incorrect network provided. Got "'.concat(options.networkType, '", Valid values are: ').concat(Object.values(AuthNetworkType).map(function(value) {
                return '"'.concat(value, '"');
              }).join(", "))
            });
        }
      });
    });
  };
};
var BASE_URL2 = "https://authapi.moralis.io";
var Auth = (
  /** @class */
  function(_super) {
    __extends7(Auth2, _super);
    function Auth2(core2) {
      var _this = _super.call(this, Auth2.moduleName, core2, function() {
        return BASE_URL2;
      }) || this;
      _this.evm = {
        getAddresses: function(request) {
          return new OperationResolver(getAddressesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        removeBind: function(request) {
          return new OperationResolver(removeBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        requestBind: function(request) {
          return new OperationResolver(requestBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        requestChallengeEvm: function(request) {
          return new OperationResolver(requestChallengeEvmOperation, _this.baseUrl, _this.core).fetch(request);
        },
        verifyRemoveBind: function(request) {
          return new OperationResolver(verifyRemoveBindOperation, _this.baseUrl, _this.core).fetch(request);
        },
        verifyRequestBind: function(request) {
          return new OperationResolver(verifyRequestBindOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.solana = {
        requestChallengeSol: function(request) {
          return new OperationResolver(requestChallengeSolanaOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.requestMessage = function(options) {
        return makeRequestMessage(_this.core)(options);
      };
      return _this;
    }
    Auth2.create = function(core2) {
      return new Auth2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    Auth2.prototype.setup = function() {
    };
    Auth2.prototype.start = function() {
    };
    Auth2.prototype.verify = function(options) {
      return makeVerify(this.core)(options);
    };
    Auth2.moduleName = "auth";
    return Auth2;
  }(ApiModule)
);

// node_modules/@moralisweb3/evm-api/lib/esm/index.js
var extendStatics8 = function(d, b) {
  extendStatics8 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics8(d, b);
};
function __extends8(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics8(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var EvmApiConfig = {
  evmApiBaseUrl: {
    name: "evmApiBaseUrl",
    defaultValue: "https://deep-index.moralis.io/api/v2.2"
  }
};
var EvmApiConfigSetup = (
  /** @class */
  function() {
    function EvmApiConfigSetup2() {
    }
    EvmApiConfigSetup2.register = function(config) {
      config.registerKey(EvmApiConfig.evmApiBaseUrl);
    };
    return EvmApiConfigSetup2;
  }()
);
var ClientEvmApi = (
  /** @class */
  function(_super) {
    __extends8(ClientEvmApi2, _super);
    function ClientEvmApi2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.block = {
        getBlock: function(request) {
          return new NullableOperationResolver(getBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getDateToBlock: function(request) {
          return new OperationResolver(getDateToBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getBlockStats: function(request) {
          return new OperationV3Resolver(GetBlockStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.events = {
        getContractEvents: function(request) {
          return new PaginatedOperationResolver(getContractEventsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getContractLogs: function(request) {
          return new PaginatedOperationResolver(getContractLogsOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.nft = {
        getContractNFTs: function(request) {
          return new PaginatedOperationResolver(getContractNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getMultipleNFTs: function(request) {
          return new OperationResolver(getMultipleNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTContractMetadata: function(request) {
          return new NullableOperationResolver(getNFTContractMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTContractTransfers: function(request) {
          return new PaginatedOperationResolver(getNFTContractTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTLowestPrice: function(request) {
          return new NullableOperationResolver(getNFTLowestPriceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTMetadata: function(request) {
          return new NullableOperationResolver(getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTOwners: function(request) {
          return new PaginatedOperationResolver(getNFTOwnersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTokenIdOwners: function(request) {
          return new PaginatedOperationResolver(getNFTTokenIdOwnersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfersByBlock: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersByBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfersFromToBlock: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersFromToBlockOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTransfers: function(request) {
          return new PaginatedOperationResolver(getNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTCollections: function(request) {
          return new PaginatedOperationResolver(getWalletNFTCollectionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTs: function(request) {
          return new PaginatedOperationResolver(getWalletNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletNFTTransfers: function(request) {
          return new PaginatedOperationResolver(getWalletNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        reSyncMetadata: function(request) {
          return new OperationResolver(reSyncMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        syncNFTContract: function(request) {
          return new OperationResolver(syncNFTContractOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTTrades: function(request) {
          return new PaginatedOperationV3Resolver(GetNFTTradesOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTTradesByToken: function(request) {
          return new PaginatedOperationV3Resolver(GetNFTTradesByTokenOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTContractSalePrices: function(request) {
          return new OperationV3Resolver(GetNFTContractSalePricesOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTSalePrices: function(request) {
          return new OperationV3Resolver(GetNFTSalePricesOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTCollectionStats: function(request) {
          return new OperationV3Resolver(GetNFTCollectionStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getNFTTokenStats: function(request) {
          return new OperationV3Resolver(GetNFTTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.transaction = {
        getInternalTransactions: function(request) {
          return new OperationResolver(getInternalTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTransaction: function(request) {
          return new NullableOperationResolver(getTransactionOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTransactionVerbose: function(request) {
          return new NullableOperationResolver(getTransactionVerboseOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTransactions: function(request) {
          return new PaginatedOperationResolver(getWalletTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTransactionsVerbose: function(request) {
          return new PaginatedOperationResolver(getWalletTransactionsVerboseOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.balance = {
        getNativeBalance: function(request) {
          return new OperationResolver(getNativeBalanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNativeBalancesForAddresses: function(request) {
          return new OperationResolver(getNativeBalancesForAddressesOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.defi = {
        getPairAddress: function(request) {
          return new OperationResolver(getPairAddressOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPairReserves: function(request) {
          return new OperationResolver(getPairReservesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPairPrice: function(request) {
          return new OperationV3Resolver(GetPairPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.token = {
        getTokenAllowance: function(request) {
          return new OperationResolver(getTokenAllowanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenMetadataBySymbol: function(request) {
          return new OperationResolver(getTokenMetadataBySymbolOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenMetadata: function(request) {
          return new OperationResolver(getTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenPrice: function(request) {
          return new OperationResolver(getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getTokenTransfers: function(request) {
          return new PaginatedOperationResolver(getTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTokenBalances: function(request) {
          return new OperationResolver(getWalletTokenBalancesOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getWalletTokenTransfers: function(request) {
          return new PaginatedOperationResolver(getWalletTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getMultipleTokenPrices: function(request, body) {
          return new OperationV3Resolver(GetMultipleTokenPricesOperation, _this.baseUrl, _this.core).fetch(request, body);
        },
        getTokenOwners: function(request) {
          return new PaginatedOperationV3Resolver(GetTokenOwnersOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getTokenStats: function(request) {
          return new OperationV3Resolver(GetTokenStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getTopProfitableWalletPerToken: function(request) {
          return new OperationV3Resolver(GetTopProfitableWalletPerTokenOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.resolve = {
        resolveAddress: function(request) {
          return new NullableOperationResolver(resolveAddressOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveDomain: function(request) {
          return new NullableOperationResolver(resolveDomainOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveENSDomain: function(request) {
          return new NullableOperationResolver(resolveENSDomainOperation, _this.baseUrl, _this.core).fetch(request);
        },
        resolveAddressToDomain: function(request) {
          return new OperationV3Resolver(ResolveAddressToDomainOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.utils = {
        runContractFunction: function(request) {
          return new OperationResolver(runContractFunctionOperation, _this.baseUrl, _this.core).fetch(request);
        },
        web3ApiVersion: function() {
          return new OperationV3Resolver(Web3ApiVersionOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        endpointWeights: function() {
          return new OperationV3Resolver(EndpointWeightsOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        reviewContracts: function(request, body) {
          return new OperationV3Resolver(ReviewContractsOperation, _this.baseUrl, _this.core).fetch(request, body);
        }
      };
      _this.ipfs = {
        uploadFolder: function(request) {
          return new OperationResolver(uploadFolderOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.wallets = {
        getWalletHistory: function(request) {
          return new PaginatedOperationV3Resolver(GetWalletHistoryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletTokenBalancesPrice: function(request) {
          return new PaginatedOperationV3Resolver(GetWalletTokenBalancesPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletNetWorth: function(request) {
          return new OperationV3Resolver(GetWalletNetWorthOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getDefiSummary: function(request) {
          return new OperationV3Resolver(GetDefiSummaryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getDefiPositionsByProtocol: function(request) {
          return new OperationV3Resolver(GetDefiPositionsByProtocolOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getDefiPositionsSummary: function(request) {
          return new OperationV3Resolver(GetDefiPositionsSummaryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletActiveChains: function(request) {
          return new OperationV3Resolver(GetWalletActiveChainsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletStats: function(request) {
          return new OperationV3Resolver(GetWalletStatsOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletProfitabilitySummary: function(request) {
          return new OperationV3Resolver(GetWalletProfitabilitySummaryOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getWalletProfitability: function(request) {
          return new OperationV3Resolver(GetWalletProfitabilityOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      _this.marketData = {
        getTopERC20TokensByMarketCap: function() {
          return new OperationV3Resolver(GetTopERC20TokensByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopERC20TokensByPriceMovers: function() {
          return new OperationV3Resolver(GetTopERC20TokensByPriceMoversOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopNFTCollectionsByMarketCap: function() {
          return new OperationV3Resolver(GetTopNFTCollectionsByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getHottestNFTCollectionsByTradingVolume: function() {
          return new OperationV3Resolver(GetHottestNFTCollectionsByTradingVolumeOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopCryptoCurrenciesByMarketCap: function() {
          return new OperationV3Resolver(GetTopCryptoCurrenciesByMarketCapOperation, _this.baseUrl, _this.core).fetch({}, null);
        },
        getTopCryptoCurrenciesByTradingVolume: function() {
          return new OperationV3Resolver(GetTopCryptoCurrenciesByTradingVolumeOperation, _this.baseUrl, _this.core).fetch({}, null);
        }
      };
      return _this;
    }
    return ClientEvmApi2;
  }(ApiModule)
);
var EvmApi = (
  /** @class */
  function(_super) {
    __extends8(EvmApi2, _super);
    function EvmApi2(core2) {
      return _super.call(this, EvmApi2.moduleName, core2, function() {
        return core2.config.get(EvmApiConfig.evmApiBaseUrl);
      }) || this;
    }
    EvmApi2.create = function(core2) {
      return new EvmApi2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    EvmApi2.prototype.setup = function() {
      EvmApiConfigSetup.register(this.core.config);
    };
    EvmApi2.prototype.start = function() {
    };
    EvmApi2.moduleName = "evmApi";
    return EvmApi2;
  }(ClientEvmApi)
);

// node_modules/@moralisweb3/aptos-api/lib/esm/index.js
var extendStatics9 = function(d, b) {
  extendStatics9 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics9(d, b);
};
function __extends9(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics9(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var MAINNET_BASE_URL = "https://aptos-mainnet.aws-prod-api-1.moralis.io";
var TESTNET_BASE_URL = "https://aptos-testnet.aws-prod-api-1.moralis.io";
var AptosApi = (
  /** @class */
  function(_super) {
    __extends9(AptosApi2, _super);
    function AptosApi2(core2) {
      var _this = _super.call(this) || this;
      _this.core = core2;
      return _this;
    }
    AptosApi2.create = function(core2) {
      if (!core2) {
        core2 = CoreProvider.getDefault();
      }
      return new AptosApi2(core2);
    };
    AptosApi2.prototype.createEndpoint = function(operation) {
      var _this = this;
      return function(request) {
        var resolver = new OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);
        return resolver.resolve(request, null);
      };
    };
    AptosApi2.prototype.createEndpointWithBody = function(operation) {
      var _this = this;
      return function(request, body) {
        var resolver = new OperationV3Resolver(operation, createBaseUrlResolver(_this.core), _this.core);
        return resolver.resolve(request, body);
      };
    };
    AptosApi2.moduleName = "aptApi";
    return AptosApi2;
  }(AbstractClient)
);
function createBaseUrlResolver(core2) {
  return function(request) {
    var network = request.network;
    if (network) {
      var finalNetwork = AptosNetworkResolver.resolve(network, core2);
      switch (finalNetwork) {
        case "mainnet":
          return MAINNET_BASE_URL;
        case "testnet":
          return TESTNET_BASE_URL;
        default:
          throw new Error("Not supported network");
      }
    }
    return MAINNET_BASE_URL;
  };
}

// node_modules/@moralisweb3/sol-api/lib/esm/index.js
var extendStatics10 = function(d, b) {
  extendStatics10 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics10(d, b);
};
function __extends10(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics10(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var ClientSolApi = (
  /** @class */
  function(_super) {
    __extends10(ClientSolApi2, _super);
    function ClientSolApi2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.account = {
        getBalance: function(request) {
          return new OperationResolver(getBalanceOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getNFTs: function(request) {
          return new OperationResolver(getNFTsOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getPortfolio: function(request) {
          return new OperationResolver(getPortfolioOperation, _this.baseUrl, _this.core).fetch(request);
        },
        getSPL: function(request) {
          return new OperationResolver(getSPLOperation, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.nft = {
        getNFTMetadata: function(request) {
          return new OperationResolver(getNFTMetadataOperation2, _this.baseUrl, _this.core).fetch(request);
        }
      };
      _this.token = {
        getTokenPrice: function(request) {
          return new OperationV3Resolver(GetTokenPriceOperation, _this.baseUrl, _this.core).fetch(request, null);
        },
        getTokenMetadata: function(request) {
          return new OperationV3Resolver(GetTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request, null);
        }
      };
      return _this;
    }
    return ClientSolApi2;
  }(ApiModule)
);
var SolApiConfig = {
  solApiBaseUrl: {
    name: "solApiBaseUrl",
    defaultValue: "https://solana-gateway.moralis.io"
  }
};
var EvmSolApiConfigSetup = (
  /** @class */
  function() {
    function EvmSolApiConfigSetup2() {
    }
    EvmSolApiConfigSetup2.register = function(config) {
      config.registerKey(SolApiConfig.solApiBaseUrl);
    };
    return EvmSolApiConfigSetup2;
  }()
);
var SolApi = (
  /** @class */
  function(_super) {
    __extends10(SolApi2, _super);
    function SolApi2(core2) {
      return _super.call(this, SolApi2.moduleName, core2, function() {
        return core2.config.get(SolApiConfig.solApiBaseUrl);
      }) || this;
    }
    SolApi2.create = function(core2) {
      return new SolApi2(core2 !== null && core2 !== void 0 ? core2 : CoreProvider.getDefault());
    };
    SolApi2.prototype.setup = function() {
      EvmSolApiConfigSetup.register(this.core.config);
    };
    SolApi2.prototype.start = function() {
    };
    SolApi2.moduleName = "solApi";
    return SolApi2;
  }(ClientSolApi)
);

// node_modules/moralis/lib/esm/index.js
var core = Core.create();
var commonEvmUtils = CommonEvmUtils.create(core);
var commonSolUtils = CommonSolUtils.create(core);
var apiUtils = ApiUtils.create(core);
var auth = Auth.create(core);
var streams = Streams.create(core);
var evmApi = EvmApi.create(core);
var solApi = SolApi.create(core);
var aptosApi = AptosApi.create(core);
core.registerModules([commonEvmUtils, commonSolUtils, auth, apiUtils, evmApi, solApi, streams]);
CoreProvider.setDefault(core);
var Moralis = {
  Core: core,
  Auth: auth,
  Streams: streams,
  EvmApi: evmApi,
  SolApi: solApi,
  AptosApi: aptosApi,
  EvmUtils: commonEvmUtils,
  SolUtils: commonSolUtils,
  start: function(config) {
    return core.start(config);
  }
};
export {
  Moralis as default
};
/*! Bundled license information:

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

@moralisweb3/common-aptos-utils/lib/esm/index.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=moralis.js.map
